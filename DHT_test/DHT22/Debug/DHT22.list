
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  08006e90  08006e90  00016e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  08007ad8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007ad8  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c843  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fd  00000000  00000000  0002ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0002ed48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  0002fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7e8  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001005f  00000000  00000000  0004c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e0de  00000000  00000000  0005c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa1b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c0c  00000000  00000000  000fa208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006e78 	.word	0x08006e78

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006e78 	.word	0x08006e78

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	e002      	b.n	8000b70 <Delay+0x10>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f9      	bne.n	8000b6a <Delay+0xa>
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f829 	bl	8000be0 <LCD_BackLed_Control>
	LCD_Rst();
 8000b8e:	f000 f80f 	bl	8000bb0 <LCD_Rst>
	LCD_REG_Config();
 8000b92:	f000 f85f 	bl	8000c54 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f9e6 	bl	8000f76 <LCD_Clear>
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <LCD_Rst+0x28>)
 8000bba:	f001 faba 	bl	8002132 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD_Rst+0x2c>)
 8000bc0:	f7ff ffce 	bl	8000b60 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <LCD_Rst+0x28>)
 8000bca:	f001 fab2 	bl	8002132 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD_Rst+0x2c>)
 8000bd0:	f7ff ffc6 	bl	8000b60 <Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40011800 	.word	0x40011800
 8000bdc:	0002bffc 	.word	0x0002bffc

08000be0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000bf8:	f001 fa9b 	bl	8002132 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bfc:	e005      	b.n	8000c0a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000c06:	f001 fa94 	bl	8002132 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011400 	.word	0x40011400

08000c18 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	8013      	strh	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <LCD_Write_Data+0x1c>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	8013      	strh	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	60020000 	.word	0x60020000

08000c54 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c58:	20cf      	movs	r0, #207	; 0xcf
 8000c5a:	f7ff ffdd 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ffe8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c64:	2081      	movs	r0, #129	; 0x81
 8000c66:	f7ff ffe5 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f7ff ffe2 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c70:	20ed      	movs	r0, #237	; 0xed
 8000c72:	f7ff ffd1 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f7ff ffdc 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff ffd9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c82:	2012      	movs	r0, #18
 8000c84:	f7ff ffd6 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c88:	2081      	movs	r0, #129	; 0x81
 8000c8a:	f7ff ffd3 	bl	8000c34 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c8e:	20e8      	movs	r0, #232	; 0xe8
 8000c90:	f7ff ffc2 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c94:	2085      	movs	r0, #133	; 0x85
 8000c96:	f7ff ffcd 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c9a:	2010      	movs	r0, #16
 8000c9c:	f7ff ffca 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f7ff ffc7 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ca6:	20cb      	movs	r0, #203	; 0xcb
 8000ca8:	f7ff ffb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f7ff ffc1 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ffbe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffbb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cbe:	2034      	movs	r0, #52	; 0x34
 8000cc0:	f7ff ffb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff ffb5 	bl	8000c34 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000cca:	20f7      	movs	r0, #247	; 0xf7
 8000ccc:	f7ff ffa4 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000cd0:	2020      	movs	r0, #32
 8000cd2:	f7ff ffaf 	bl	8000c34 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000cd6:	20ea      	movs	r0, #234	; 0xea
 8000cd8:	f7ff ff9e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffa9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa6 	bl	8000c34 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000ce8:	20b1      	movs	r0, #177	; 0xb1
 8000cea:	f7ff ff95 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ffa0 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cf4:	201b      	movs	r0, #27
 8000cf6:	f7ff ff9d 	bl	8000c34 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cfa:	20b6      	movs	r0, #182	; 0xb6
 8000cfc:	f7ff ff8c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d00:	200a      	movs	r0, #10
 8000d02:	f7ff ff97 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d06:	20a2      	movs	r0, #162	; 0xa2
 8000d08:	f7ff ff94 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d0c:	20c0      	movs	r0, #192	; 0xc0
 8000d0e:	f7ff ff83 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d12:	2035      	movs	r0, #53	; 0x35
 8000d14:	f7ff ff8e 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d18:	20c1      	movs	r0, #193	; 0xc1
 8000d1a:	f7ff ff7d 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d1e:	2011      	movs	r0, #17
 8000d20:	f7ff ff88 	bl	8000c34 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d24:	20c5      	movs	r0, #197	; 0xc5
 8000d26:	f7ff ff77 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d2a:	2045      	movs	r0, #69	; 0x45
 8000d2c:	f7ff ff82 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d30:	2045      	movs	r0, #69	; 0x45
 8000d32:	f7ff ff7f 	bl	8000c34 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d36:	20c7      	movs	r0, #199	; 0xc7
 8000d38:	f7ff ff6e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d3c:	20a2      	movs	r0, #162	; 0xa2
 8000d3e:	f7ff ff79 	bl	8000c34 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d42:	20f2      	movs	r0, #242	; 0xf2
 8000d44:	f7ff ff68 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff73 	bl	8000c34 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d4e:	2026      	movs	r0, #38	; 0x26
 8000d50:	f7ff ff62 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff ff6d 	bl	8000c34 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d5a:	20e0      	movs	r0, #224	; 0xe0
 8000d5c:	f7ff ff5c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ff67 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d66:	2026      	movs	r0, #38	; 0x26
 8000d68:	f7ff ff64 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d6c:	2024      	movs	r0, #36	; 0x24
 8000d6e:	f7ff ff61 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d72:	200b      	movs	r0, #11
 8000d74:	f7ff ff5e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f7ff ff5b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff58 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d84:	2054      	movs	r0, #84	; 0x54
 8000d86:	f7ff ff55 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d8a:	20a8      	movs	r0, #168	; 0xa8
 8000d8c:	f7ff ff52 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d90:	2046      	movs	r0, #70	; 0x46
 8000d92:	f7ff ff4f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d96:	200c      	movs	r0, #12
 8000d98:	f7ff ff4c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f7ff ff49 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000da2:	2009      	movs	r0, #9
 8000da4:	f7ff ff46 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff43 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dae:	2007      	movs	r0, #7
 8000db0:	f7ff ff40 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff3d 	bl	8000c34 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dba:	20e1      	movs	r0, #225	; 0xe1
 8000dbc:	f7ff ff2c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff37 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f7ff ff34 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000dcc:	201b      	movs	r0, #27
 8000dce:	f7ff ff31 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff2e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f7ff ff2b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff ff28 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000de4:	202a      	movs	r0, #42	; 0x2a
 8000de6:	f7ff ff25 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000dea:	2047      	movs	r0, #71	; 0x47
 8000dec:	f7ff ff22 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000df0:	2039      	movs	r0, #57	; 0x39
 8000df2:	f7ff ff1f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ff1c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f7ff ff19 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff16 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f7ff ff13 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e0e:	2038      	movs	r0, #56	; 0x38
 8000e10:	f7ff ff10 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff ff0d 	bl	8000c34 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e1a:	2036      	movs	r0, #54	; 0x36
 8000e1c:	f7ff fefc 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e20:	20c8      	movs	r0, #200	; 0xc8
 8000e22:	f7ff ff07 	bl	8000c34 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e26:	202a      	movs	r0, #42	; 0x2a
 8000e28:	f7ff fef6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff01 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fefe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fefb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e3e:	20ef      	movs	r0, #239	; 0xef
 8000e40:	f7ff fef8 	bl	8000c34 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e44:	202b      	movs	r0, #43	; 0x2b
 8000e46:	f7ff fee7 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fef2 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff feef 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feec 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e5c:	203f      	movs	r0, #63	; 0x3f
 8000e5e:	f7ff fee9 	bl	8000c34 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e62:	203a      	movs	r0, #58	; 0x3a
 8000e64:	f7ff fed8 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e68:	2055      	movs	r0, #85	; 0x55
 8000e6a:	f7ff fee3 	bl	8000c34 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f7ff fed2 	bl	8000c18 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <LCD_REG_Config+0x230>)
 8000e76:	f7ff fe73 	bl	8000b60 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e7a:	2029      	movs	r0, #41	; 0x29
 8000e7c:	f7ff fecc 	bl	8000c18 <LCD_Write_Cmd>
	
	
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0002bffc 	.word	0x0002bffc

08000e88 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ea6:	202a      	movs	r0, #42	; 0x2a
 8000ea8:	f7ff feb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff febe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff feaf 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fea4 	bl	8000c34 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000eec:	202b      	movs	r0, #43	; 0x2b
 8000eee:	f7ff fe93 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe9b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe95 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe8c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f1c:	88ba      	ldrh	r2, [r7, #4]
 8000f1e:	883b      	ldrh	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe81 	bl	8000c34 <LCD_Write_Data>
	
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}

08000f3a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff fe64 	bl	8000c18 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e006      	b.n	8000f64 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe6b 	bl	8000c34 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f4      	bcc.n	8000f56 <LCD_FillColor+0x1c>
		
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff74 	bl	8000e88 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	883a      	ldrh	r2, [r7, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	8b3b      	ldrh	r3, [r7, #24]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff ffc3 	bl	8000f3a <LCD_FillColor>
	
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	2208      	movs	r2, #8
 8000fdc:	f7ff ff54 	bl	8000e88 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe0:	202c      	movs	r0, #44	; 0x2c
 8000fe2:	f7ff fe19 	bl	8000c18 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	e023      	b.n	8001034 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <LCD_DrawChar+0x88>)
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e012      	b.n	8001028 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fe11 	bl	8000c34 <LCD_Write_Data>
 8001012:	e003      	b.n	800101c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f7ff fe0c 	bl	8000c34 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9e9      	bls.n	8001002 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d9d8      	bls.n	8000fec <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08006f10 	.word	0x08006f10

08001048 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	460b      	mov	r3, r1
 8001056:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001058:	e01c      	b.n	8001094 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2be8      	cmp	r3, #232	; 0xe8
 800105e:	d904      	bls.n	800106a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001060:	2300      	movs	r3, #0
 8001062:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001070:	d903      	bls.n	800107a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9a 	bl	8000fbc <LCD_DrawChar>
		
		pStr ++;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3308      	adds	r3, #8
 8001092:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1de      	bne.n	800105a <LCD_DrawString+0x12>
		
	}
	
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <delay_us>:
RTC_DateTypeDef sDate = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(int length){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1,0);	// set counter to 0
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <delay_us+0x2c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < length);	// breaks loop when length is reached
 80010b8:	bf00      	nop
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <delay_us+0x2c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3f9      	bcc.n	80010ba <delay_us+0x12>
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000020c 	.word	0x2000020c

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fd13 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f8f3 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f000 f9eb 	bl	80014c0 <MX_GPIO_Init>
  MX_FSMC_Init();
 80010ea:	f000 facd 	bl	8001688 <MX_FSMC_Init>
  MX_TIM1_Init();
 80010ee:	f000 f997 	bl	8001420 <MX_TIM1_Init>
  MX_RTC_Init();
 80010f2:	f000 f94b 	bl	800138c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80010f6:	f7ff fd44 	bl	8000b82 <LCD_INIT>
  HAL_TIM_Base_Start(&htim1);
 80010fa:	4868      	ldr	r0, [pc, #416]	; (800129c <main+0x1c4>)
 80010fc:	f002 fc44 	bl	8003988 <HAL_TIM_Base_Start>
  HAL_Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f000 fd62 	bl	8001bcc <HAL_Delay>
  // with HAL_Delay
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	4864      	ldr	r0, [pc, #400]	; (80012a0 <main+0x1c8>)
 800110e:	f001 f810 	bl	8002132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4862      	ldr	r0, [pc, #392]	; (80012a0 <main+0x1c8>)
 8001118:	f001 f80b 	bl	8002132 <HAL_GPIO_WritePin>
  delay_us(10000);
 800111c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001120:	f7ff ffc2 	bl	80010a8 <delay_us>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	485d      	ldr	r0, [pc, #372]	; (80012a0 <main+0x1c8>)
 800112a:	f001 f802 	bl	8002132 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//PIR sensor and LCD on/off
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	485c      	ldr	r0, [pc, #368]	; (80012a4 <main+0x1cc>)
 8001132:	f000 ffe7 	bl	8002104 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d10b      	bne.n	8001154 <main+0x7c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2101      	movs	r1, #1
 8001140:	4858      	ldr	r0, [pc, #352]	; (80012a4 <main+0x1cc>)
 8001142:	f000 fff6 	bl	8002132 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114c:	4856      	ldr	r0, [pc, #344]	; (80012a8 <main+0x1d0>)
 800114e:	f000 fff0 	bl	8002132 <HAL_GPIO_WritePin>
 8001152:	e00a      	b.n	800116a <main+0x92>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2101      	movs	r1, #1
 8001158:	4852      	ldr	r0, [pc, #328]	; (80012a4 <main+0x1cc>)
 800115a:	f000 ffea 	bl	8002132 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001164:	4850      	ldr	r0, [pc, #320]	; (80012a8 <main+0x1d0>)
 8001166:	f000 ffe4 	bl	8002132 <HAL_GPIO_WritePin>
	}

	//RTC
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800116a:	2200      	movs	r2, #0
 800116c:	494f      	ldr	r1, [pc, #316]	; (80012ac <main+0x1d4>)
 800116e:	4850      	ldr	r0, [pc, #320]	; (80012b0 <main+0x1d8>)
 8001170:	f002 f878 	bl	8003264 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001174:	2200      	movs	r2, #0
 8001176:	494f      	ldr	r1, [pc, #316]	; (80012b4 <main+0x1dc>)
 8001178:	484d      	ldr	r0, [pc, #308]	; (80012b0 <main+0x1d8>)
 800117a:	f001 fee5 	bl	8002f48 <HAL_RTC_GetTime>

	sprintf(date, "Date: %02d.%02d.%02d", sDate.Date, sDate.Month, sDate.Year);
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <main+0x1d4>)
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	461a      	mov	r2, r3
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <main+0x1d4>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	4619      	mov	r1, r3
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <main+0x1d4>)
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	460b      	mov	r3, r1
 8001192:	4949      	ldr	r1, [pc, #292]	; (80012b8 <main+0x1e0>)
 8001194:	4849      	ldr	r0, [pc, #292]	; (80012bc <main+0x1e4>)
 8001196:	f003 fbf7 	bl	8004988 <siprintf>
	sprintf(time, "Time: %02d.%02d.%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800119a:	4b46      	ldr	r3, [pc, #280]	; (80012b4 <main+0x1dc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <main+0x1dc>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <main+0x1dc>)
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	4944      	ldr	r1, [pc, #272]	; (80012c0 <main+0x1e8>)
 80011b0:	4844      	ldr	r0, [pc, #272]	; (80012c4 <main+0x1ec>)
 80011b2:	f003 fbe9 	bl	8004988 <siprintf>

	LCD_DrawString(20, 20, date);
 80011b6:	4a41      	ldr	r2, [pc, #260]	; (80012bc <main+0x1e4>)
 80011b8:	2114      	movs	r1, #20
 80011ba:	2014      	movs	r0, #20
 80011bc:	f7ff ff44 	bl	8001048 <LCD_DrawString>
	LCD_DrawString(20, 40, time);
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <main+0x1ec>)
 80011c2:	2128      	movs	r1, #40	; 0x28
 80011c4:	2014      	movs	r0, #20
 80011c6:	f7ff ff3f 	bl	8001048 <LCD_DrawString>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET){
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4835      	ldr	r0, [pc, #212]	; (80012a4 <main+0x1cc>)
 80011d0:	f000 ff98 	bl	8002104 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d131      	bne.n	800123e <main+0x166>
		uint8_t sec=0x20, min=0x59, hr=0x05, date=0x12, year=0x23;
 80011da:	2320      	movs	r3, #32
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	2359      	movs	r3, #89	; 0x59
 80011e0:	73bb      	strb	r3, [r7, #14]
 80011e2:	2305      	movs	r3, #5
 80011e4:	737b      	strb	r3, [r7, #13]
 80011e6:	2312      	movs	r3, #18
 80011e8:	733b      	strb	r3, [r7, #12]
 80011ea:	2323      	movs	r3, #35	; 0x23
 80011ec:	72fb      	strb	r3, [r7, #11]
		// update RTC
		RTC_TimeTypeDef sTime2 = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2100      	movs	r1, #0
 80011f4:	460a      	mov	r2, r1
 80011f6:	801a      	strh	r2, [r3, #0]
 80011f8:	460a      	mov	r2, r1
 80011fa:	709a      	strb	r2, [r3, #2]
		RTC_DateTypeDef sDate2 = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]

		/* Fill in the RTC_TimeTypeDef structure with the new values */
		sTime2.Hours = hr;
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	723b      	strb	r3, [r7, #8]
		sTime2.Minutes = min;
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	727b      	strb	r3, [r7, #9]
		sTime2.Seconds = sec;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	72bb      	strb	r3, [r7, #10]

		sDate2.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800120c:	2303      	movs	r3, #3
 800120e:	713b      	strb	r3, [r7, #4]
		sDate2.Month = RTC_MONTH_APRIL;
 8001210:	2304      	movs	r3, #4
 8001212:	717b      	strb	r3, [r7, #5]
		sDate2.Date = date;
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	71bb      	strb	r3, [r7, #6]
		sDate2.Year = year;
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	71fb      	strb	r3, [r7, #7]

		/* Set the new time in the RTC */
		HAL_RTC_SetTime(&hrtc, &sTime2, RTC_FORMAT_BCD);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <main+0x1d8>)
 8001226:	f001 fdf7 	bl	8002e18 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate2, RTC_FORMAT_BCD);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <main+0x1d8>)
 8001232:	f001 ff61 	bl	80030f8 <HAL_RTC_SetDate>
		HAL_Delay(500);
 8001236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123a:	f000 fcc7 	bl	8001bcc <HAL_Delay>
	}

	if(sTime.Hours == 6 && sTime.Minutes == 0 && sTime.Seconds==0){
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <main+0x1dc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b06      	cmp	r3, #6
 8001244:	d115      	bne.n	8001272 <main+0x19a>
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <main+0x1dc>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d111      	bne.n	8001272 <main+0x19a>
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <main+0x1dc>)
 8001250:	789b      	ldrb	r3, [r3, #2]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <main+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	481b      	ldr	r0, [pc, #108]	; (80012c8 <main+0x1f0>)
 800125c:	f000 ff69 	bl	8002132 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8001260:	f241 3088 	movw	r0, #5000	; 0x1388
 8001264:	f000 fcb2 	bl	8001bcc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	4816      	ldr	r0, [pc, #88]	; (80012c8 <main+0x1f0>)
 800126e:	f000 ff60 	bl	8002132 <HAL_GPIO_WritePin>
	}

	//pump and light
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001272:	2101      	movs	r1, #1
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <main+0x1f0>)
 8001276:	f000 ff45 	bl	8002104 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b01      	cmp	r3, #1
 800127e:	f47f af56 	bne.w	800112e <main+0x56>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001282:	2110      	movs	r1, #16
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <main+0x1f0>)
 8001286:	f000 ff6c 	bl	8002162 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <main+0x1f0>)
 800128e:	f000 ff68 	bl	8002162 <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8001292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001296:	f000 fc99 	bl	8001bcc <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800129a:	e748      	b.n	800112e <main+0x56>
 800129c:	2000020c 	.word	0x2000020c
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011400 	.word	0x40011400
 80012ac:	200002e0 	.word	0x200002e0
 80012b0:	200001f8 	.word	0x200001f8
 80012b4:	200002dc 	.word	0x200002dc
 80012b8:	08006ec0 	.word	0x08006ec0
 80012bc:	200002bc 	.word	0x200002bc
 80012c0:	08006ed8 	.word	0x08006ed8
 80012c4:	2000029c 	.word	0x2000029c
 80012c8:	40010800 	.word	0x40010800

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d6:	2228      	movs	r2, #40	; 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 feec 	bl	80040b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001300:	2309      	movs	r3, #9
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001324:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ff3e 	bl	80021ac <HAL_RCC_OscConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001336:	f000 fa0b 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133a:	230f      	movs	r3, #15
 800133c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	2102      	movs	r1, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f9aa 	bl	80026b0 <HAL_RCC_ClockConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001362:	f000 f9f5 	bl	8001750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800136a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fb20 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800137e:	f000 f9e7 	bl	8001750 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3758      	adds	r7, #88	; 0x58
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2100      	movs	r1, #0
 8001396:	460a      	mov	r2, r1
 8001398:	801a      	strh	r2, [r3, #0]
 800139a:	460a      	mov	r2, r1
 800139c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_RTC_Init+0x8c>)
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <MX_RTC_Init+0x90>)
 80013a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_RTC_Init+0x8c>)
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_RTC_Init+0x8c>)
 80013b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <MX_RTC_Init+0x8c>)
 80013ba:	f001 fc97 	bl	8002cec <HAL_RTC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80013c4:	f000 f9c4 	bl	8001750 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 80013c8:	2322      	movs	r3, #34	; 0x22
 80013ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2201      	movs	r2, #1
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <MX_RTC_Init+0x8c>)
 80013dc:	f001 fd1c 	bl	8002e18 <HAL_RTC_SetTime>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80013e6:	f000 f9b3 	bl	8001750 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80013ea:	2303      	movs	r3, #3
 80013ec:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 80013ee:	2304      	movs	r3, #4
 80013f0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x19;
 80013f2:	2319      	movs	r3, #25
 80013f4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 80013f6:	2323      	movs	r3, #35	; 0x23
 80013f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_RTC_Init+0x8c>)
 8001402:	f001 fe79 	bl	80030f8 <HAL_RTC_SetDate>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800140c:	f000 f9a0 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200001f8 	.word	0x200001f8
 800141c:	40002800 	.word	0x40002800

08001420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM1_Init+0x98>)
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <MX_TIM1_Init+0x9c>)
 8001440:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM1_Init+0x98>)
 8001444:	2247      	movs	r2, #71	; 0x47
 8001446:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_TIM1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM1_Init+0x98>)
 8001450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001454:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_TIM1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_TIM1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <MX_TIM1_Init+0x98>)
 800146a:	f002 fa3e 	bl	80038ea <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001474:	f000 f96c 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_TIM1_Init+0x98>)
 8001486:	f002 fad7 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001490:	f000 f95e 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_TIM1_Init+0x98>)
 80014a2:	f002 fc9d 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014ac:	f000 f950 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000020c 	.word	0x2000020c
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a65      	ldr	r2, [pc, #404]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b63      	ldr	r3, [pc, #396]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	4b60      	ldr	r3, [pc, #384]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a59      	ldr	r2, [pc, #356]	; (8001670 <MX_GPIO_Init+0x1b0>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b57      	ldr	r3, [pc, #348]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <MX_GPIO_Init+0x1b0>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a53      	ldr	r2, [pc, #332]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <MX_GPIO_Init+0x1b0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <MX_GPIO_Init+0x1b0>)
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT11_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2142      	movs	r1, #66	; 0x42
 8001550:	4848      	ldr	r0, [pc, #288]	; (8001674 <MX_GPIO_Init+0x1b4>)
 8001552:	f000 fdee 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2120      	movs	r1, #32
 800155a:	4847      	ldr	r0, [pc, #284]	; (8001678 <MX_GPIO_Init+0x1b8>)
 800155c:	f000 fde9 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Strip_Pin|pump_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	21c0      	movs	r1, #192	; 0xc0
 8001564:	4844      	ldr	r0, [pc, #272]	; (8001678 <MX_GPIO_Init+0x1b8>)
 8001566:	f000 fde4 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2101      	movs	r1, #1
 800156e:	4843      	ldr	r0, [pc, #268]	; (800167c <MX_GPIO_Init+0x1bc>)
 8001570:	f000 fddf 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	4841      	ldr	r0, [pc, #260]	; (8001680 <MX_GPIO_Init+0x1c0>)
 800157c:	f000 fdd9 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_alt_GPIO_Port, DHT11_alt_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	483f      	ldr	r0, [pc, #252]	; (8001684 <MX_GPIO_Init+0x1c4>)
 8001586:	f000 fdd4 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DHT11_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|LCD_RST_Pin;
 800158a:	2342      	movs	r3, #66	; 0x42
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	4619      	mov	r1, r3
 80015a0:	4834      	ldr	r0, [pc, #208]	; (8001674 <MX_GPIO_Init+0x1b4>)
 80015a2:	f000 fc1b 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_Button_Pin */
  GPIO_InitStruct.Pin = K1_Button_Pin;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K1_Button_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4619      	mov	r1, r3
 80015b8:	482f      	ldr	r0, [pc, #188]	; (8001678 <MX_GPIO_Init+0x1b8>)
 80015ba:	f000 fc0f 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 80015be:	2320      	movs	r3, #32
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <MX_GPIO_Init+0x1b8>)
 80015d6:	f000 fc01 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Strip_Pin pump_Pin */
  GPIO_InitStruct.Pin = LED_Strip_Pin|pump_Pin;
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4821      	ldr	r0, [pc, #132]	; (8001678 <MX_GPIO_Init+0x1b8>)
 80015f2:	f000 fbf3 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4619      	mov	r1, r3
 800160c:	481b      	ldr	r0, [pc, #108]	; (800167c <MX_GPIO_Init+0x1bc>)
 800160e:	f000 fbe5 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : button_for_set_time_Pin PIR___HC_SR501_Pin */
  GPIO_InitStruct.Pin = button_for_set_time_Pin|PIR___HC_SR501_Pin;
 8001612:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4619      	mov	r1, r3
 8001626:	4815      	ldr	r0, [pc, #84]	; (800167c <MX_GPIO_Init+0x1bc>)
 8001628:	f000 fbd8 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4619      	mov	r1, r3
 8001644:	480e      	ldr	r0, [pc, #56]	; (8001680 <MX_GPIO_Init+0x1c0>)
 8001646:	f000 fbc9 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_alt_Pin */
  GPIO_InitStruct.Pin = DHT11_alt_Pin;
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_alt_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	4619      	mov	r1, r3
 8001660:	4808      	ldr	r0, [pc, #32]	; (8001684 <MX_GPIO_Init+0x1c4>)
 8001662:	f000 fbbb 	bl	8001ddc <HAL_GPIO_Init>

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	40011800 	.word	0x40011800
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40011400 	.word	0x40011400
 8001684:	40011000 	.word	0x40011000

08001688 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80016a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016aa:	4a27      	ldr	r2, [pc, #156]	; (8001748 <MX_FSMC_Init+0xc0>)
 80016ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016c2:	2210      	movs	r2, #16
 80016c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_FSMC_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80016fe:	230f      	movs	r3, #15
 8001700:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001702:	230f      	movs	r3, #15
 8001704:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001706:	23ff      	movs	r3, #255	; 0xff
 8001708:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800170a:	230f      	movs	r3, #15
 800170c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800170e:	2310      	movs	r3, #16
 8001710:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001712:	2311      	movs	r3, #17
 8001714:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <MX_FSMC_Init+0xbc>)
 8001722:	f002 f895 	bl	8003850 <HAL_SRAM_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800172c:	f000 f810 	bl	8001750 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_FSMC_Init+0xc4>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <MX_FSMC_Init+0xc4>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000254 	.word	0x20000254
 8001748:	a0000104 	.word	0xa0000104
 800174c:	40010000 	.word	0x40010000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_RTC_MspInit+0x3c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d110      	bne.n	80017f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80017d2:	f000 fcdf 	bl	8002194 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_RTC_MspInit+0x40>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RTC_MspInit+0x40>)
 80017dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_RTC_MspInit+0x40>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RTC_MspInit+0x44>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40002800 	.word	0x40002800
 8001800:	40021000 	.word	0x40021000
 8001804:	4242043c 	.word	0x4242043c

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_TIM_Base_MspInit+0x34>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10b      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x38>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x38>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_TIM_Base_MspInit+0x38>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_FSMC_MspInit+0x78>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d129      	bne.n	80018b4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_FSMC_MspInit+0x78>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_FSMC_MspInit+0x7c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_FSMC_MspInit+0x7c>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_FSMC_MspInit+0x7c>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800187e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001882:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <HAL_FSMC_MspInit+0x80>)
 8001894:	f000 faa2 	bl	8001ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001898:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800189c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <HAL_FSMC_MspInit+0x84>)
 80018ae:	f000 fa95 	bl	8001ddc <HAL_GPIO_Init>
 80018b2:	e000      	b.n	80018b6 <HAL_FSMC_MspInit+0x72>
    return;
 80018b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002e4 	.word	0x200002e4
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40011800 	.word	0x40011800
 80018c8:	40011400 	.word	0x40011400

080018cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018d4:	f7ff ffb6 	bl	8001844 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f935 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}

0800192e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
	return 1;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <_kill>:

int _kill(int pid, int sig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001946:	f002 fb8d 	bl	8004064 <__errno>
 800194a:	4603      	mov	r3, r0
 800194c:	2216      	movs	r2, #22
 800194e:	601a      	str	r2, [r3, #0]
	return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_exit>:

void _exit (int status)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe7 	bl	800193c <_kill>
	while (1) {}		/* Make sure we hang here */
 800196e:	e7fe      	b.n	800196e <_exit+0x12>

08001970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00a      	b.n	8001998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001982:	f3af 8000 	nop.w
 8001986:	4601      	mov	r1, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf0      	blt.n	8001982 <_read+0x12>
	}

return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e009      	b.n	80019d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf1      	blt.n	80019bc <_write+0x12>
	}
	return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_close>:

int _close(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a08:	605a      	str	r2, [r3, #4]
	return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <_isatty>:

int _isatty(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
	return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f002 faf6 	bl	8004064 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20010000 	.word	0x20010000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	200002e8 	.word	0x200002e8
 8001aac:	20000300 	.word	0x20000300

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae2:	f7ff ffe5 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fac3 	bl	8004070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aea:	f7ff faf5 	bl	80010d8 <main>
  bx lr
 8001aee:	4770      	bx	lr
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001af8:	080078fc 	.word	0x080078fc
  ldr r2, =_sbss
 8001afc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b00:	20000300 	.word	0x20000300

08001b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_2_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_Init+0x28>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_Init+0x28>)
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f92b 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fe1a 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f935 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f90b 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	200002ec 	.word	0x200002ec

08001bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_GetTick+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	200002ec 	.word	0x200002ec

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffe0 	bl	8001bb8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff90 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff49 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff5e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff90 	bl	8001ccc <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5f 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffb0 	bl	8001d30 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dee:	e179      	b.n	80020e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df0:	2201      	movs	r2, #1
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8168 	bne.w	80020de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a96      	ldr	r2, [pc, #600]	; (800206c <HAL_GPIO_Init+0x290>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a94      	ldr	r2, [pc, #592]	; (800206c <HAL_GPIO_Init+0x290>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d875      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e1e:	4a94      	ldr	r2, [pc, #592]	; (8002070 <HAL_GPIO_Init+0x294>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d058      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e24:	4a92      	ldr	r2, [pc, #584]	; (8002070 <HAL_GPIO_Init+0x294>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d86f      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e2a:	4a92      	ldr	r2, [pc, #584]	; (8002074 <HAL_GPIO_Init+0x298>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d052      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e30:	4a90      	ldr	r2, [pc, #576]	; (8002074 <HAL_GPIO_Init+0x298>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d869      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_GPIO_Init+0x29c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04c      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	; (8002078 <HAL_GPIO_Init+0x29c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d863      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e42:	4a8e      	ldr	r2, [pc, #568]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d046      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e48:	4a8c      	ldr	r2, [pc, #560]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d85d      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d82a      	bhi.n	8001ea8 <HAL_GPIO_Init+0xcc>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d859      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <HAL_GPIO_Init+0x80>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001ec3 	.word	0x08001ec3
 8001e68:	08001f05 	.word	0x08001f05
 8001e6c:	08001f0b 	.word	0x08001f0b
 8001e70:	08001f0b 	.word	0x08001f0b
 8001e74:	08001f0b 	.word	0x08001f0b
 8001e78:	08001f0b 	.word	0x08001f0b
 8001e7c:	08001f0b 	.word	0x08001f0b
 8001e80:	08001f0b 	.word	0x08001f0b
 8001e84:	08001f0b 	.word	0x08001f0b
 8001e88:	08001f0b 	.word	0x08001f0b
 8001e8c:	08001f0b 	.word	0x08001f0b
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001f0b 	.word	0x08001f0b
 8001e98:	08001f0b 	.word	0x08001f0b
 8001e9c:	08001f0b 	.word	0x08001f0b
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ecd 	.word	0x08001ecd
 8001ea8:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eae:	e02c      	b.n	8001f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e029      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e024      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e01f      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e01a      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e013      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	611a      	str	r2, [r3, #16]
          break;
 8001ef6:	e009      	b.n	8001f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	615a      	str	r2, [r3, #20]
          break;
 8001f02:	e003      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          break;
 8001f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d801      	bhi.n	8001f16 <HAL_GPIO_Init+0x13a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_Init+0x13e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d802      	bhi.n	8001f28 <HAL_GPIO_Init+0x14c>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x152>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b08      	subs	r3, #8
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	210f      	movs	r1, #15
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80c1 	beq.w	80020de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f5c:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a48      	ldr	r2, [pc, #288]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f74:	4a44      	ldr	r2, [pc, #272]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_GPIO_Init+0x204>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x2b4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d019      	beq.n	8001fdc <HAL_GPIO_Init+0x200>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x1fc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a39      	ldr	r2, [pc, #228]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1f8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a38      	ldr	r2, [pc, #224]	; (800209c <HAL_GPIO_Init+0x2c0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1f4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x2c4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1f0>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	e00a      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fcc:	2306      	movs	r3, #6
 8001fce:	e008      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff2:	4925      	ldr	r1, [pc, #148]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4924      	ldr	r1, [pc, #144]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4920      	ldr	r1, [pc, #128]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8002024:	4013      	ands	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	491a      	ldr	r1, [pc, #104]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 800204c:	4013      	ands	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d025      	beq.n	80020a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4910      	ldr	r1, [pc, #64]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
 8002068:	e025      	b.n	80020b6 <HAL_GPIO_Init+0x2da>
 800206a:	bf00      	nop
 800206c:	10320000 	.word	0x10320000
 8002070:	10310000 	.word	0x10310000
 8002074:	10220000 	.word	0x10220000
 8002078:	10210000 	.word	0x10210000
 800207c:	10120000 	.word	0x10120000
 8002080:	10110000 	.word	0x10110000
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	40011000 	.word	0x40011000
 8002098:	40011400 	.word	0x40011400
 800209c:	40011800 	.word	0x40011800
 80020a0:	40011c00 	.word	0x40011c00
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4913      	ldr	r1, [pc, #76]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60cb      	str	r3, [r1, #12]
 80020ce:	e006      	b.n	80020de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4909      	ldr	r1, [pc, #36]	; (8002100 <HAL_GPIO_Init+0x324>)
 80020da:	4013      	ands	r3, r2
 80020dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f47f ae7e 	bne.w	8001df0 <HAL_GPIO_Init+0x14>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	372c      	adds	r7, #44	; 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
 800213e:	4613      	mov	r3, r2
 8002140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002142:	787b      	ldrb	r3, [r7, #1]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800214e:	e003      	b.n	8002158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	041a      	lsls	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002174:	887a      	ldrh	r2, [r7, #2]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43d9      	mvns	r1, r3
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	400b      	ands	r3, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	420e0020 	.word	0x420e0020

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e272      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8087 	beq.w	80022da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021cc:	4b92      	ldr	r3, [pc, #584]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d00c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d8:	4b8f      	ldr	r3, [pc, #572]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d112      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
 80021e4:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d10b      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x12c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d168      	bne.n	80022d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e24c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x76>
 8002214:	4b80      	ldr	r3, [pc, #512]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a7f      	ldr	r2, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e02e      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b7b      	ldr	r3, [pc, #492]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7a      	ldr	r2, [pc, #488]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b78      	ldr	r3, [pc, #480]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a77      	ldr	r2, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0xbc>
 800224e:	4b72      	ldr	r3, [pc, #456]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a71      	ldr	r2, [pc, #452]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002268:	4b6b      	ldr	r3, [pc, #428]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b68      	ldr	r3, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fc96 	bl	8001bb8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fc92 	bl	8001bb8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e200      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xe4>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fc82 	bl	8001bb8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fc7e 	bl	8001bb8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1ec      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x10c>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f2:	4b49      	ldr	r3, [pc, #292]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1c0      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4939      	ldr	r1, [pc, #228]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x270>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff fc37 	bl	8001bb8 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff fc33 	bl	8001bb8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1a1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4927      	ldr	r1, [pc, #156]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_OscConfig+0x270>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fc16 	bl	8001bb8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff fc12 	bl	8001bb8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e180      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03a      	beq.n	8002430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7ff fbf6 	bl	8001bb8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff fbf2 	bl	8001bb8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e160      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 fac4 	bl	800297c <RCC_Delay>
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff fbdc 	bl	8001bb8 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002402:	e00f      	b.n	8002424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fbd8 	bl	8001bb8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d908      	bls.n	8002424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e146      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	42420000 	.word	0x42420000
 8002420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b92      	ldr	r3, [pc, #584]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e9      	bne.n	8002404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a6 	beq.w	800258a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a87      	ldr	r2, [pc, #540]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b85      	ldr	r3, [pc, #532]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b7f      	ldr	r3, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7e      	ldr	r2, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff fb99 	bl	8001bb8 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7ff fb95 	bl	8001bb8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e103      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x312>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x334>
 80024c6:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a66      	ldr	r2, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x356>
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 8002502:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a5a      	ldr	r2, [pc, #360]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fb49 	bl	8001bb8 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fb45 	bl	8001bb8 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0b1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x37e>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff fb33 	bl	8001bb8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff fb2f 	bl	8001bb8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e09b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8087 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d061      	beq.n	8002664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d146      	bne.n	8002636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff fb03 	bl	8001bb8 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff faff 	bl	8001bb8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e06d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a19      	ldr	r1, [r3, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	430b      	orrs	r3, r1
 8002602:	491b      	ldr	r1, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fad3 	bl	8001bb8 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff facf 	bl	8001bb8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e03d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x46a>
 8002634:	e035      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fabc 	bl	8001bb8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff fab8 	bl	8001bb8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e026      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x498>
 8002662:	e01e      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e019      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x500>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0d0      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d910      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4965      	ldr	r1, [pc, #404]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800272e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d040      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e073      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4936      	ldr	r1, [pc, #216]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7ff fa0a 	bl	8001bb8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7ff fa06 	bl	8001bb8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e053      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d210      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4922      	ldr	r1, [pc, #136]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f821 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490a      	ldr	r1, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f968 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
 8002878:	08007500 	.word	0x08007500
 800287c:	20000000 	.word	0x20000000
 8002880:	20000004 	.word	0x20000004

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b490      	push	{r4, r7}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_RCC_GetSysClockFreq+0xac>)
 800288c:	1d3c      	adds	r4, r7, #4
 800288e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002894:	f240 2301 	movw	r3, #513	; 0x201
 8002898:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x40>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x46>
 80028c2:	e02b      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	e02b      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	0c9b      	lsrs	r3, r3, #18
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3328      	adds	r3, #40	; 0x28
 80028d4:	443b      	add	r3, r7
 80028d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	3328      	adds	r3, #40	; 0x28
 80028f2:	443b      	add	r3, r7
 80028f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028fe:	fb03 f202 	mul.w	r2, r3, r2
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e004      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	623b      	str	r3, [r7, #32]
      break;
 800291a:	e002      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb4>)
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002922:	6a3b      	ldr	r3, [r7, #32]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bc90      	pop	{r4, r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	08006ef0 	.word	0x08006ef0
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	003d0900 	.word	0x003d0900

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b02      	ldr	r3, [pc, #8]	; (8002950 <HAL_RCC_GetHCLKFreq+0x10>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff fff2 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08007510 	.word	0x08007510

0800297c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_Delay+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <RCC_Delay+0x38>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002998:	bf00      	nop
  }
  while (Delay --);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <RCC_Delay+0x1c>
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000000 	.word	0x20000000
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a18:	f7ff f8ce 	bl	8001bb8 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	e008      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7ff f8ca 	bl	8001bb8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e06d      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02e      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d027      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7ff f899 	bl	8001bb8 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7ff f895 	bl	8001bb8 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420440 	.word	0x42420440

08002b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08d      	sub	sp, #52	; 0x34
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002b2e:	f107 040c 	add.w	r4, r7, #12
 8002b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b38:	f240 2301 	movw	r3, #513	; 0x201
 8002b3c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f200 80b4 	bhi.w	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002c43 	.word	0x08002c43
 8002b68:	08002ca9 	.word	0x08002ca9
 8002b6c:	08002cc5 	.word	0x08002cc5
 8002b70:	08002c33 	.word	0x08002c33
 8002b74:	08002cc5 	.word	0x08002cc5
 8002b78:	08002cc5 	.word	0x08002cc5
 8002b7c:	08002cc5 	.word	0x08002cc5
 8002b80:	08002c3b 	.word	0x08002c3b
 8002b84:	08002cc5 	.word	0x08002cc5
 8002b88:	08002cc5 	.word	0x08002cc5
 8002b8c:	08002cc5 	.word	0x08002cc5
 8002b90:	08002cc5 	.word	0x08002cc5
 8002b94:	08002cc5 	.word	0x08002cc5
 8002b98:	08002cc5 	.word	0x08002cc5
 8002b9c:	08002cc5 	.word	0x08002cc5
 8002ba0:	08002ba5 	.word	0x08002ba5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8088 	beq.w	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	3330      	adds	r3, #48	; 0x30
 8002bc2:	443b      	add	r3, r7
 8002bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c5b      	lsrs	r3, r3, #17
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	3330      	adds	r3, #48	; 0x30
 8002be0:	443b      	add	r3, r7
 8002be2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bf2:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1a:	d102      	bne.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002c20:	e052      	b.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c30:	e04a      	b.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c32:	f7ff fe27 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002c36:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c38:	e049      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7ff fe23 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002c3e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c40:	e045      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c52:	d108      	bne.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c64:	e01f      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d109      	bne.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002c7e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c84:	e00f      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002c9e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002ca4:	e012      	b.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ca8:	f7ff fe54 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0b9b      	lsrs	r3, r3, #14
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cc2:	e004      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e002      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e000      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002ccc:	bf00      	nop
    }
  }
  return (frequency);
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3734      	adds	r7, #52	; 0x34
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	08006f00 	.word	0x08006f00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	007a1200 	.word	0x007a1200
 8002ce4:	003d0900 	.word	0x003d0900
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab

08002cec <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e084      	b.n	8002e0c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7c5b      	ldrb	r3, [r3, #17]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe fd54 	bl	80017c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 faf4 	bl	800330c <HAL_RTC_WaitForSynchro>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e06b      	b.n	8002e0c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fbad 	bl	8003494 <RTC_EnterInitMode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e060      	b.n	8002e0c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0207 	bic.w	r2, r2, #7
 8002d58:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RTC_Init+0x128>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_RTC_Init+0x128>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RTC_Init+0x128>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4926      	ldr	r1, [pc, #152]	; (8002e14 <HAL_RTC_Init+0x128>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d003      	beq.n	8002d92 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e00e      	b.n	8002db0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff fec6 	bl	8002b24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d98:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2204      	movs	r2, #4
 8002da4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e030      	b.n	8002e0c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 010f 	bic.w	r1, r3, #15
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0c1a      	lsrs	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	b291      	uxth	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb81 	bl	80034e4 <RTC_ExitInitMode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00c      	b.n	8002e0c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40006c00 	.word	0x40006c00

08002e18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_RTC_SetTime+0x20>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e080      	b.n	8002f3e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	7c1b      	ldrb	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_RTC_SetTime+0x30>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e07a      	b.n	8002f3e <HAL_RTC_SetTime+0x126>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002e64:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	460b      	mov	r3, r1
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a5b      	subs	r3, r3, r1
 8002e74:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e76:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e01e      	b.n	8002ec0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fb71 	bl	800356e <RTC_Bcd2ToByte>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002e94:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fb66 	bl	800356e <RTC_Bcd2ToByte>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002eae:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fb5a 	bl	800356e <RTC_Bcd2ToByte>
 8002eba:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ebc:	4423      	add	r3, r4
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa7f 	bl	80033c6 <RTC_WriteTimeCounter>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e02f      	b.n	8002f3e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0205 	bic.w	r2, r2, #5
 8002eec:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa90 	bl	8003414 <RTC_ReadAlarmCounter>
 8002ef4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d018      	beq.n	8002f30 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d214      	bcs.n	8002f30 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002f0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f10:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fa96 	bl	8003446 <RTC_WriteAlarmCounter>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2204      	movs	r2, #4
 8002f24:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e006      	b.n	8002f3e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd90      	pop	{r4, r7, pc}
	...

08002f48 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_RTC_GetTime+0x28>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b5      	b.n	80030e0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0ac      	b.n	80030e0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f9ed 	bl	8003366 <RTC_ReadTimeCounter>
 8002f8c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4a55      	ldr	r2, [pc, #340]	; (80030e8 <HAL_RTC_GetTime+0x1a0>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0adb      	lsrs	r3, r3, #11
 8002f98:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <HAL_RTC_GetTime+0x1a0>)
 8002f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	4a4f      	ldr	r2, [pc, #316]	; (80030ec <HAL_RTC_GetTime+0x1a4>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_RTC_GetTime+0x1a0>)
 8002fc0:	fba2 1203 	umull	r1, r2, r2, r3
 8002fc4:	0ad2      	lsrs	r2, r2, #11
 8002fc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002fca:	fb01 f202 	mul.w	r2, r1, r2
 8002fce:	1a9a      	subs	r2, r3, r2
 8002fd0:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RTC_GetTime+0x1a4>)
 8002fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd6:	0959      	lsrs	r1, r3, #5
 8002fd8:	460b      	mov	r3, r1
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a5b      	subs	r3, r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	1ad1      	subs	r1, r2, r3
 8002fe2:	b2ca      	uxtb	r2, r1
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b17      	cmp	r3, #23
 8002fec:	d955      	bls.n	800309a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <HAL_RTC_GetTime+0x1a8>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002ffa:	6939      	ldr	r1, [r7, #16]
 8002ffc:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <HAL_RTC_GetTime+0x1a8>)
 8002ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8003002:	091a      	lsrs	r2, r3, #4
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1aca      	subs	r2, r1, r3
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f9fd 	bl	8003414 <RTC_ReadAlarmCounter>
 800301a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d008      	beq.n	8003036 <HAL_RTC_GetTime+0xee>
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	d904      	bls.n	8003036 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	e002      	b.n	800303c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_RTC_GetTime+0x1ac>)
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f9ba 	bl	80033c6 <RTC_WriteTimeCounter>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e041      	b.n	80030e0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d00c      	beq.n	800307e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4413      	add	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800306c:	69f9      	ldr	r1, [r7, #28]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f9e9 	bl	8003446 <RTC_WriteAlarmCounter>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e030      	b.n	80030e0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800307e:	69f9      	ldr	r1, [r7, #28]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f9e0 	bl	8003446 <RTC_WriteAlarmCounter>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e027      	b.n	80030e0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa88 	bl	80035a8 <RTC_DateUpdate>
 8003098:	e003      	b.n	80030a2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01a      	beq.n	80030de <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa41 	bl	8003534 <RTC_ByteToBcd2>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fa38 	bl	8003534 <RTC_ByteToBcd2>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	789b      	ldrb	r3, [r3, #2]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa2f 	bl	8003534 <RTC_ByteToBcd2>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	91a2b3c5 	.word	0x91a2b3c5
 80030ec:	88888889 	.word	0x88888889
 80030f0:	aaaaaaab 	.word	0xaaaaaaab
 80030f4:	00015180 	.word	0x00015180

080030f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RTC_SetDate+0x24>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e097      	b.n	8003250 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	7c1b      	ldrb	r3, [r3, #16]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_RTC_SetDate+0x34>
 8003128:	2302      	movs	r3, #2
 800312a:	e091      	b.n	8003250 <HAL_RTC_SetDate+0x158>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2202      	movs	r2, #2
 8003136:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	78da      	ldrb	r2, [r3, #3]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	785a      	ldrb	r2, [r3, #1]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	789a      	ldrb	r2, [r3, #2]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	739a      	strb	r2, [r3, #14]
 8003156:	e01a      	b.n	800318e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa06 	bl	800356e <RTC_Bcd2ToByte>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f9fd 	bl	800356e <RTC_Bcd2ToByte>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	789b      	ldrb	r3, [r3, #2]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f9f4 	bl	800356e <RTC_Bcd2ToByte>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	7bdb      	ldrb	r3, [r3, #15]
 8003192:	4618      	mov	r0, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	7b59      	ldrb	r1, [r3, #13]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	7b9b      	ldrb	r3, [r3, #14]
 800319c:	461a      	mov	r2, r3
 800319e:	f000 fadf 	bl	8003760 <RTC_WeekDayNum>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	7b1a      	ldrb	r2, [r3, #12]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f8d7 	bl	8003366 <RTC_ReadTimeCounter>
 80031b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <HAL_RTC_SetDate+0x160>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0adb      	lsrs	r3, r3, #11
 80031c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b18      	cmp	r3, #24
 80031ca:	d93a      	bls.n	8003242 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4a23      	ldr	r2, [pc, #140]	; (800325c <HAL_RTC_SetDate+0x164>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_RTC_SetDate+0x168>)
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80031e2:	69f9      	ldr	r1, [r7, #28]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f8ee 	bl	80033c6 <RTC_WriteTimeCounter>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2204      	movs	r2, #4
 80031f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e027      	b.n	8003250 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f907 	bl	8003414 <RTC_ReadAlarmCounter>
 8003206:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d018      	beq.n	8003242 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	429a      	cmp	r2, r3
 8003216:	d214      	bcs.n	8003242 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800321e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003222:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003224:	69b9      	ldr	r1, [r7, #24]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f90d 	bl	8003446 <RTC_WriteAlarmCounter>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2204      	movs	r2, #4
 8003236:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e006      	b.n	8003250 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	91a2b3c5 	.word	0x91a2b3c5
 800325c:	aaaaaaab 	.word	0xaaaaaaab
 8003260:	00015180 	.word	0x00015180

08003264 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2100      	movs	r1, #0
 8003276:	460a      	mov	r2, r1
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	460a      	mov	r2, r1
 800327c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_RTC_GetDate+0x26>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e03a      	b.n	8003304 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	2200      	movs	r2, #0
 8003294:	4619      	mov	r1, r3
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fe56 	bl	8002f48 <HAL_RTC_GetTime>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02e      	b.n	8003304 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	7b1a      	ldrb	r2, [r3, #12]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	7bda      	ldrb	r2, [r3, #15]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	7b5a      	ldrb	r2, [r3, #13]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	7b9a      	ldrb	r2, [r3, #14]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01a      	beq.n	8003302 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f92f 	bl	8003534 <RTC_ByteToBcd2>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f926 	bl	8003534 <RTC_ByteToBcd2>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	789b      	ldrb	r3, [r3, #2]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f91d 	bl	8003534 <RTC_ByteToBcd2>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01d      	b.n	800335e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0208 	bic.w	r2, r2, #8
 8003330:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003332:	f7fe fc41 	bl	8001bb8 <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003338:	e009      	b.n	800334e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800333a:	f7fe fc3d 	bl	8001bb8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003348:	d901      	bls.n	800334e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	827b      	strh	r3, [r7, #18]
 8003372:	2300      	movs	r3, #0
 8003374:	823b      	strh	r3, [r7, #16]
 8003376:	2300      	movs	r3, #0
 8003378:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003396:	8a7a      	ldrh	r2, [r7, #18]
 8003398:	8a3b      	ldrh	r3, [r7, #16]
 800339a:	429a      	cmp	r2, r3
 800339c:	d008      	beq.n	80033b0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800339e:	8a3b      	ldrh	r3, [r7, #16]
 80033a0:	041a      	lsls	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e004      	b.n	80033ba <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80033b0:	8a7b      	ldrh	r3, [r7, #18]
 80033b2:	041a      	lsls	r2, r3, #16
 80033b4:	89fb      	ldrh	r3, [r7, #14]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80033ba:	697b      	ldr	r3, [r7, #20]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f85d 	bl	8003494 <RTC_EnterInitMode>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e011      	b.n	800340a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	0c12      	lsrs	r2, r2, #16
 80033ee:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b292      	uxth	r2, r2
 80033f8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f872 	bl	80034e4 <RTC_ExitInitMode>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	81fb      	strh	r3, [r7, #14]
 8003420:	2300      	movs	r3, #0
 8003422:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	041a      	lsls	r2, r3, #16
 8003438:	89bb      	ldrh	r3, [r7, #12]
 800343a:	4313      	orrs	r3, r2
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f81d 	bl	8003494 <RTC_EnterInitMode>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e011      	b.n	800348a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	0c12      	lsrs	r2, r2, #16
 800346e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b292      	uxth	r2, r2
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f832 	bl	80034e4 <RTC_ExitInitMode>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80034a0:	f7fe fb8a 	bl	8001bb8 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034a6:	e009      	b.n	80034bc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034a8:	f7fe fb86 	bl	8001bb8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b6:	d901      	bls.n	80034bc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e00f      	b.n	80034dc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0210 	orr.w	r2, r2, #16
 80034d8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003500:	f7fe fb5a 	bl	8001bb8 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003506:	e009      	b.n	800351c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003508:	f7fe fb56 	bl	8001bb8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003516:	d901      	bls.n	800351c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e007      	b.n	800352c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003542:	e005      	b.n	8003550 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	3b0a      	subs	r3, #10
 800354e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b09      	cmp	r3, #9
 8003554:	d8f6      	bhi.n	8003544 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	b2da      	uxtb	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4313      	orrs	r3, r2
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4413      	add	r3, r2
 800359c:	b2db      	uxtb	r3, r3
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7bdb      	ldrb	r3, [r3, #15]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7b5b      	ldrb	r3, [r3, #13]
 80035cc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7b9b      	ldrb	r3, [r3, #14]
 80035d2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	e06f      	b.n	80036ba <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d011      	beq.n	8003604 <RTC_DateUpdate+0x5c>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d00e      	beq.n	8003604 <RTC_DateUpdate+0x5c>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d00b      	beq.n	8003604 <RTC_DateUpdate+0x5c>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b07      	cmp	r3, #7
 80035f0:	d008      	beq.n	8003604 <RTC_DateUpdate+0x5c>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d005      	beq.n	8003604 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b0a      	cmp	r3, #10
 80035fc:	d002      	beq.n	8003604 <RTC_DateUpdate+0x5c>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d117      	bne.n	8003634 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b1e      	cmp	r3, #30
 8003608:	d803      	bhi.n	8003612 <RTC_DateUpdate+0x6a>
      {
        day++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003610:	e050      	b.n	80036b4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d005      	beq.n	8003624 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3301      	adds	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800361e:	2301      	movs	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003622:	e047      	b.n	80036b4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003624:	2301      	movs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
          year++;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003632:	e03f      	b.n	80036b4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d008      	beq.n	800364c <RTC_DateUpdate+0xa4>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b06      	cmp	r3, #6
 800363e:	d005      	beq.n	800364c <RTC_DateUpdate+0xa4>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d002      	beq.n	800364c <RTC_DateUpdate+0xa4>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b0b      	cmp	r3, #11
 800364a:	d10c      	bne.n	8003666 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b1d      	cmp	r3, #29
 8003650:	d803      	bhi.n	800365a <RTC_DateUpdate+0xb2>
      {
        day++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3301      	adds	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003658:	e02c      	b.n	80036b4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	3301      	adds	r3, #1
 800365e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003664:	e026      	b.n	80036b4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d123      	bne.n	80036b4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b1b      	cmp	r3, #27
 8003670:	d803      	bhi.n	800367a <RTC_DateUpdate+0xd2>
      {
        day++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e01c      	b.n	80036b4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b1c      	cmp	r3, #28
 800367e:	d111      	bne.n	80036a4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	b29b      	uxth	r3, r3
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f839 	bl	80036fc <RTC_IsLeapYear>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e00d      	b.n	80036b4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800369e:	2301      	movs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e007      	b.n	80036b4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b1d      	cmp	r3, #29
 80036a8:	d104      	bne.n	80036b4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3301      	adds	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
        day = 1U;
 80036b0:	2301      	movs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d38b      	bcc.n	80035da <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f000 f83b 	bl	8003760 <RTC_WeekDayNum>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	731a      	strb	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	e01d      	b.n	8003752 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <RTC_IsLeapYear+0x60>)
 800371a:	fba2 1203 	umull	r1, r2, r2, r3
 800371e:	0952      	lsrs	r2, r2, #5
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	fb01 f202 	mul.w	r2, r1, r2
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	4a09      	ldr	r2, [pc, #36]	; (800375c <RTC_IsLeapYear+0x60>)
 8003736:	fba2 1203 	umull	r1, r2, r2, r3
 800373a:	09d2      	lsrs	r2, r2, #7
 800373c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003740:	fb01 f202 	mul.w	r2, r1, r2
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003750:	2300      	movs	r3, #0
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
 800376c:	4613      	mov	r3, r2
 800376e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800377e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d82d      	bhi.n	80037e2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <RTC_WeekDayNum+0xe4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	085a      	lsrs	r2, r3, #1
 800379a:	78bb      	ldrb	r3, [r7, #2]
 800379c:	441a      	add	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	441a      	add	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4926      	ldr	r1, [pc, #152]	; (8003848 <RTC_WeekDayNum+0xe8>)
 80037b0:	fba1 1303 	umull	r1, r3, r1, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	1ad2      	subs	r2, r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	4922      	ldr	r1, [pc, #136]	; (8003848 <RTC_WeekDayNum+0xe8>)
 80037be:	fba1 1303 	umull	r1, r3, r1, r3
 80037c2:	09db      	lsrs	r3, r3, #7
 80037c4:	4413      	add	r3, r2
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	4b20      	ldr	r3, [pc, #128]	; (800384c <RTC_WeekDayNum+0xec>)
 80037ca:	fba3 1302 	umull	r1, r3, r3, r2
 80037ce:	1ad1      	subs	r1, r2, r3
 80037d0:	0849      	lsrs	r1, r1, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	0899      	lsrs	r1, r3, #2
 80037d6:	460b      	mov	r3, r1
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a5b      	subs	r3, r3, r1
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e029      	b.n	8003836 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <RTC_WeekDayNum+0xe4>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	085a      	lsrs	r2, r3, #1
 80037f6:	78bb      	ldrb	r3, [r7, #2]
 80037f8:	441a      	add	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	441a      	add	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4910      	ldr	r1, [pc, #64]	; (8003848 <RTC_WeekDayNum+0xe8>)
 8003808:	fba1 1303 	umull	r1, r3, r1, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <RTC_WeekDayNum+0xe8>)
 8003814:	fba1 1303 	umull	r1, r3, r1, r3
 8003818:	09db      	lsrs	r3, r3, #7
 800381a:	4413      	add	r3, r2
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <RTC_WeekDayNum+0xec>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	1ad1      	subs	r1, r2, r3
 8003826:	0849      	lsrs	r1, r1, #1
 8003828:	440b      	add	r3, r1
 800382a:	0899      	lsrs	r1, r3, #2
 800382c:	460b      	mov	r3, r1
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	b2db      	uxtb	r3, r3
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	38e38e39 	.word	0x38e38e39
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	24924925 	.word	0x24924925

08003850 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_SRAM_Init+0x1c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	d101      	bne.n	8003870 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e038      	b.n	80038e2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7fe f821 	bl	80018cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3308      	adds	r3, #8
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 fb0f 	bl	8003eb8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	f000 fb71 	bl	8003f8c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6858      	ldr	r0, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	f000 fb9c 	bl	8003ff4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	f041 0101 	orr.w	r1, r1, #1
 80038d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e041      	b.n	8003980 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd ff79 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 f949 	bl	8003bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e03c      	b.n	8003a1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_TIM_Base_Start+0x9c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_TIM_Base_Start+0x5c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_TIM_Base_Start+0xa0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_TIM_Base_Start+0x5c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c4:	d00e      	beq.n	80039e4 <HAL_TIM_Base_Start+0x5c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_TIM_Base_Start+0xa4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_TIM_Base_Start+0x5c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIM_Base_Start+0xa8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_Base_Start+0x5c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <HAL_TIM_Base_Start+0xac>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d010      	beq.n	8003a18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a06:	e007      	b.n	8003a18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0b3      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x180>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a88:	d03e      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0xd0>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	f200 8087 	bhi.w	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	f000 8085 	beq.w	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d87f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d01a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xa2>
 8003aa4:	2b70      	cmp	r3, #112	; 0x70
 8003aa6:	d87b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d050      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x116>
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d877      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d03c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xf6>
 8003ab4:	2b50      	cmp	r3, #80	; 0x50
 8003ab6:	d873      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d058      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x136>
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d86f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d064      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d86b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d060      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d867      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d05a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ad8:	e062      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f000 f95a 	bl	8003da2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003afc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	609a      	str	r2, [r3, #8]
      break;
 8003b06:	e04e      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f000 f943 	bl	8003da2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e03b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 f8ba 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2150      	movs	r1, #80	; 0x50
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f911 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e02b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 f8d8 	bl	8003d10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2160      	movs	r1, #96	; 0x60
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f901 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e01b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f89a 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2140      	movs	r1, #64	; 0x40
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f8f1 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 f8e8 	bl	8003d6e <TIM_ITRx_SetConfig>
        break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ba4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <TIM_Base_SetConfig+0xe0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <TIM_Base_SetConfig+0xe4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d00b      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <TIM_Base_SetConfig+0xec>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <TIM_Base_SetConfig+0xf0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <TIM_Base_SetConfig+0xe0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0x82>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a21      	ldr	r2, [pc, #132]	; (8003ca4 <TIM_Base_SetConfig+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0x82>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0x82>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <TIM_Base_SetConfig+0xe8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x82>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <TIM_Base_SetConfig+0xec>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <TIM_Base_SetConfig+0xf0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <TIM_Base_SetConfig+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0xc8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <TIM_Base_SetConfig+0xe4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40000c00 	.word	0x40000c00

08003cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 030a 	bic.w	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 0210 	bic.w	r2, r3, #16
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	031b      	lsls	r3, r3, #12
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f043 0307 	orr.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	021a      	lsls	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e050      	b.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d00e      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a15      	ldr	r2, [pc, #84]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10c      	bne.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00

08003eb8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	f023 0101 	bic.w	r1, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d102      	bne.n	8003ee8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e001      	b.n	8003eec <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003ef8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003efe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003f04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003f0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003f10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003f16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003f1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003f22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003f28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <FSMC_NORSRAM_Init+0xd0>)
 8003f48:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f50:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003f58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	ea02 0103 	and.w	r1, r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4319      	orrs	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	0008fb7f 	.word	0x0008fb7f

08003f8c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	3b02      	subs	r3, #2
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	3201      	adds	r2, #1
 8003fe0:	4319      	orrs	r1, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004008:	d11d      	bne.n	8004046 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004014:	4013      	ands	r3, r2
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	4311      	orrs	r1, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	0212      	lsls	r2, r2, #8
 8004028:	4311      	orrs	r1, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	6992      	ldr	r2, [r2, #24]
 800402e:	4311      	orrs	r1, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68d2      	ldr	r2, [r2, #12]
 8004034:	0412      	lsls	r2, r2, #16
 8004036:	430a      	orrs	r2, r1
 8004038:	ea43 0102 	orr.w	r1, r3, r2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004044:	e005      	b.n	8004052 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800404e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	cff00000 	.word	0xcff00000

08004064 <__errno>:
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <__errno+0x8>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000000c 	.word	0x2000000c

08004070 <__libc_init_array>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	2600      	movs	r6, #0
 8004074:	4d0c      	ldr	r5, [pc, #48]	; (80040a8 <__libc_init_array+0x38>)
 8004076:	4c0d      	ldr	r4, [pc, #52]	; (80040ac <__libc_init_array+0x3c>)
 8004078:	1b64      	subs	r4, r4, r5
 800407a:	10a4      	asrs	r4, r4, #2
 800407c:	42a6      	cmp	r6, r4
 800407e:	d109      	bne.n	8004094 <__libc_init_array+0x24>
 8004080:	f002 fefa 	bl	8006e78 <_init>
 8004084:	2600      	movs	r6, #0
 8004086:	4d0a      	ldr	r5, [pc, #40]	; (80040b0 <__libc_init_array+0x40>)
 8004088:	4c0a      	ldr	r4, [pc, #40]	; (80040b4 <__libc_init_array+0x44>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	42a6      	cmp	r6, r4
 8004090:	d105      	bne.n	800409e <__libc_init_array+0x2e>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	f855 3b04 	ldr.w	r3, [r5], #4
 8004098:	4798      	blx	r3
 800409a:	3601      	adds	r6, #1
 800409c:	e7ee      	b.n	800407c <__libc_init_array+0xc>
 800409e:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a2:	4798      	blx	r3
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7f2      	b.n	800408e <__libc_init_array+0x1e>
 80040a8:	080078f4 	.word	0x080078f4
 80040ac:	080078f4 	.word	0x080078f4
 80040b0:	080078f4 	.word	0x080078f4
 80040b4:	080078f8 	.word	0x080078f8

080040b8 <memset>:
 80040b8:	4603      	mov	r3, r0
 80040ba:	4402      	add	r2, r0
 80040bc:	4293      	cmp	r3, r2
 80040be:	d100      	bne.n	80040c2 <memset+0xa>
 80040c0:	4770      	bx	lr
 80040c2:	f803 1b01 	strb.w	r1, [r3], #1
 80040c6:	e7f9      	b.n	80040bc <memset+0x4>

080040c8 <__cvt>:
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ce:	461f      	mov	r7, r3
 80040d0:	bfbb      	ittet	lt
 80040d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	461f      	movlt	r7, r3
 80040d8:	2300      	movge	r3, #0
 80040da:	232d      	movlt	r3, #45	; 0x2d
 80040dc:	b088      	sub	sp, #32
 80040de:	4614      	mov	r4, r2
 80040e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040e4:	7013      	strb	r3, [r2, #0]
 80040e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80040ec:	f023 0820 	bic.w	r8, r3, #32
 80040f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f4:	d005      	beq.n	8004102 <__cvt+0x3a>
 80040f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040fa:	d100      	bne.n	80040fe <__cvt+0x36>
 80040fc:	3501      	adds	r5, #1
 80040fe:	2302      	movs	r3, #2
 8004100:	e000      	b.n	8004104 <__cvt+0x3c>
 8004102:	2303      	movs	r3, #3
 8004104:	aa07      	add	r2, sp, #28
 8004106:	9204      	str	r2, [sp, #16]
 8004108:	aa06      	add	r2, sp, #24
 800410a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800410e:	e9cd 3500 	strd	r3, r5, [sp]
 8004112:	4622      	mov	r2, r4
 8004114:	463b      	mov	r3, r7
 8004116:	f000 fce3 	bl	8004ae0 <_dtoa_r>
 800411a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800411e:	4606      	mov	r6, r0
 8004120:	d102      	bne.n	8004128 <__cvt+0x60>
 8004122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004124:	07db      	lsls	r3, r3, #31
 8004126:	d522      	bpl.n	800416e <__cvt+0xa6>
 8004128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800412c:	eb06 0905 	add.w	r9, r6, r5
 8004130:	d110      	bne.n	8004154 <__cvt+0x8c>
 8004132:	7833      	ldrb	r3, [r6, #0]
 8004134:	2b30      	cmp	r3, #48	; 0x30
 8004136:	d10a      	bne.n	800414e <__cvt+0x86>
 8004138:	2200      	movs	r2, #0
 800413a:	2300      	movs	r3, #0
 800413c:	4620      	mov	r0, r4
 800413e:	4639      	mov	r1, r7
 8004140:	f7fc fc9e 	bl	8000a80 <__aeabi_dcmpeq>
 8004144:	b918      	cbnz	r0, 800414e <__cvt+0x86>
 8004146:	f1c5 0501 	rsb	r5, r5, #1
 800414a:	f8ca 5000 	str.w	r5, [sl]
 800414e:	f8da 3000 	ldr.w	r3, [sl]
 8004152:	4499      	add	r9, r3
 8004154:	2200      	movs	r2, #0
 8004156:	2300      	movs	r3, #0
 8004158:	4620      	mov	r0, r4
 800415a:	4639      	mov	r1, r7
 800415c:	f7fc fc90 	bl	8000a80 <__aeabi_dcmpeq>
 8004160:	b108      	cbz	r0, 8004166 <__cvt+0x9e>
 8004162:	f8cd 901c 	str.w	r9, [sp, #28]
 8004166:	2230      	movs	r2, #48	; 0x30
 8004168:	9b07      	ldr	r3, [sp, #28]
 800416a:	454b      	cmp	r3, r9
 800416c:	d307      	bcc.n	800417e <__cvt+0xb6>
 800416e:	4630      	mov	r0, r6
 8004170:	9b07      	ldr	r3, [sp, #28]
 8004172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004174:	1b9b      	subs	r3, r3, r6
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	b008      	add	sp, #32
 800417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	9107      	str	r1, [sp, #28]
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e7f0      	b.n	8004168 <__cvt+0xa0>

08004186 <__exponent>:
 8004186:	4603      	mov	r3, r0
 8004188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800418a:	2900      	cmp	r1, #0
 800418c:	f803 2b02 	strb.w	r2, [r3], #2
 8004190:	bfb6      	itet	lt
 8004192:	222d      	movlt	r2, #45	; 0x2d
 8004194:	222b      	movge	r2, #43	; 0x2b
 8004196:	4249      	neglt	r1, r1
 8004198:	2909      	cmp	r1, #9
 800419a:	7042      	strb	r2, [r0, #1]
 800419c:	dd2b      	ble.n	80041f6 <__exponent+0x70>
 800419e:	f10d 0407 	add.w	r4, sp, #7
 80041a2:	46a4      	mov	ip, r4
 80041a4:	270a      	movs	r7, #10
 80041a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80041aa:	460a      	mov	r2, r1
 80041ac:	46a6      	mov	lr, r4
 80041ae:	fb07 1516 	mls	r5, r7, r6, r1
 80041b2:	2a63      	cmp	r2, #99	; 0x63
 80041b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80041b8:	4631      	mov	r1, r6
 80041ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80041be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041c2:	dcf0      	bgt.n	80041a6 <__exponent+0x20>
 80041c4:	3130      	adds	r1, #48	; 0x30
 80041c6:	f1ae 0502 	sub.w	r5, lr, #2
 80041ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041ce:	4629      	mov	r1, r5
 80041d0:	1c44      	adds	r4, r0, #1
 80041d2:	4561      	cmp	r1, ip
 80041d4:	d30a      	bcc.n	80041ec <__exponent+0x66>
 80041d6:	f10d 0209 	add.w	r2, sp, #9
 80041da:	eba2 020e 	sub.w	r2, r2, lr
 80041de:	4565      	cmp	r5, ip
 80041e0:	bf88      	it	hi
 80041e2:	2200      	movhi	r2, #0
 80041e4:	4413      	add	r3, r2
 80041e6:	1a18      	subs	r0, r3, r0
 80041e8:	b003      	add	sp, #12
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041f4:	e7ed      	b.n	80041d2 <__exponent+0x4c>
 80041f6:	2330      	movs	r3, #48	; 0x30
 80041f8:	3130      	adds	r1, #48	; 0x30
 80041fa:	7083      	strb	r3, [r0, #2]
 80041fc:	70c1      	strb	r1, [r0, #3]
 80041fe:	1d03      	adds	r3, r0, #4
 8004200:	e7f1      	b.n	80041e6 <__exponent+0x60>
	...

08004204 <_printf_float>:
 8004204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004208:	b091      	sub	sp, #68	; 0x44
 800420a:	460c      	mov	r4, r1
 800420c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004210:	4616      	mov	r6, r2
 8004212:	461f      	mov	r7, r3
 8004214:	4605      	mov	r5, r0
 8004216:	f001 fa51 	bl	80056bc <_localeconv_r>
 800421a:	6803      	ldr	r3, [r0, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	f7fc f802 	bl	8000228 <strlen>
 8004224:	2300      	movs	r3, #0
 8004226:	930e      	str	r3, [sp, #56]	; 0x38
 8004228:	f8d8 3000 	ldr.w	r3, [r8]
 800422c:	900a      	str	r0, [sp, #40]	; 0x28
 800422e:	3307      	adds	r3, #7
 8004230:	f023 0307 	bic.w	r3, r3, #7
 8004234:	f103 0208 	add.w	r2, r3, #8
 8004238:	f894 9018 	ldrb.w	r9, [r4, #24]
 800423c:	f8d4 b000 	ldr.w	fp, [r4]
 8004240:	f8c8 2000 	str.w	r2, [r8]
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800424c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004250:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004254:	930b      	str	r3, [sp, #44]	; 0x2c
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	4640      	mov	r0, r8
 800425c:	4b9c      	ldr	r3, [pc, #624]	; (80044d0 <_printf_float+0x2cc>)
 800425e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004260:	f7fc fc40 	bl	8000ae4 <__aeabi_dcmpun>
 8004264:	bb70      	cbnz	r0, 80042c4 <_printf_float+0xc0>
 8004266:	f04f 32ff 	mov.w	r2, #4294967295
 800426a:	4640      	mov	r0, r8
 800426c:	4b98      	ldr	r3, [pc, #608]	; (80044d0 <_printf_float+0x2cc>)
 800426e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004270:	f7fc fc1a 	bl	8000aa8 <__aeabi_dcmple>
 8004274:	bb30      	cbnz	r0, 80042c4 <_printf_float+0xc0>
 8004276:	2200      	movs	r2, #0
 8004278:	2300      	movs	r3, #0
 800427a:	4640      	mov	r0, r8
 800427c:	4651      	mov	r1, sl
 800427e:	f7fc fc09 	bl	8000a94 <__aeabi_dcmplt>
 8004282:	b110      	cbz	r0, 800428a <_printf_float+0x86>
 8004284:	232d      	movs	r3, #45	; 0x2d
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428a:	4b92      	ldr	r3, [pc, #584]	; (80044d4 <_printf_float+0x2d0>)
 800428c:	4892      	ldr	r0, [pc, #584]	; (80044d8 <_printf_float+0x2d4>)
 800428e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004292:	bf94      	ite	ls
 8004294:	4698      	movls	r8, r3
 8004296:	4680      	movhi	r8, r0
 8004298:	2303      	movs	r3, #3
 800429a:	f04f 0a00 	mov.w	sl, #0
 800429e:	6123      	str	r3, [r4, #16]
 80042a0:	f02b 0304 	bic.w	r3, fp, #4
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	4633      	mov	r3, r6
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	9700      	str	r7, [sp, #0]
 80042ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80042b0:	f000 f9d4 	bl	800465c <_printf_common>
 80042b4:	3001      	adds	r0, #1
 80042b6:	f040 8090 	bne.w	80043da <_printf_float+0x1d6>
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295
 80042be:	b011      	add	sp, #68	; 0x44
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c4:	4642      	mov	r2, r8
 80042c6:	4653      	mov	r3, sl
 80042c8:	4640      	mov	r0, r8
 80042ca:	4651      	mov	r1, sl
 80042cc:	f7fc fc0a 	bl	8000ae4 <__aeabi_dcmpun>
 80042d0:	b148      	cbz	r0, 80042e6 <_printf_float+0xe2>
 80042d2:	f1ba 0f00 	cmp.w	sl, #0
 80042d6:	bfb8      	it	lt
 80042d8:	232d      	movlt	r3, #45	; 0x2d
 80042da:	4880      	ldr	r0, [pc, #512]	; (80044dc <_printf_float+0x2d8>)
 80042dc:	bfb8      	it	lt
 80042de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042e2:	4b7f      	ldr	r3, [pc, #508]	; (80044e0 <_printf_float+0x2dc>)
 80042e4:	e7d3      	b.n	800428e <_printf_float+0x8a>
 80042e6:	6863      	ldr	r3, [r4, #4]
 80042e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	d142      	bne.n	8004376 <_printf_float+0x172>
 80042f0:	2306      	movs	r3, #6
 80042f2:	6063      	str	r3, [r4, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	9206      	str	r2, [sp, #24]
 80042f8:	aa0e      	add	r2, sp, #56	; 0x38
 80042fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042fe:	aa0d      	add	r2, sp, #52	; 0x34
 8004300:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004304:	9203      	str	r2, [sp, #12]
 8004306:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800430a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	4642      	mov	r2, r8
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	4653      	mov	r3, sl
 800431a:	910b      	str	r1, [sp, #44]	; 0x2c
 800431c:	f7ff fed4 	bl	80040c8 <__cvt>
 8004320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004322:	4680      	mov	r8, r0
 8004324:	2947      	cmp	r1, #71	; 0x47
 8004326:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004328:	d108      	bne.n	800433c <_printf_float+0x138>
 800432a:	1cc8      	adds	r0, r1, #3
 800432c:	db02      	blt.n	8004334 <_printf_float+0x130>
 800432e:	6863      	ldr	r3, [r4, #4]
 8004330:	4299      	cmp	r1, r3
 8004332:	dd40      	ble.n	80043b6 <_printf_float+0x1b2>
 8004334:	f1a9 0902 	sub.w	r9, r9, #2
 8004338:	fa5f f989 	uxtb.w	r9, r9
 800433c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004340:	d81f      	bhi.n	8004382 <_printf_float+0x17e>
 8004342:	464a      	mov	r2, r9
 8004344:	3901      	subs	r1, #1
 8004346:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800434a:	910d      	str	r1, [sp, #52]	; 0x34
 800434c:	f7ff ff1b 	bl	8004186 <__exponent>
 8004350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004352:	4682      	mov	sl, r0
 8004354:	1813      	adds	r3, r2, r0
 8004356:	2a01      	cmp	r2, #1
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	dc02      	bgt.n	8004362 <_printf_float+0x15e>
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	07d2      	lsls	r2, r2, #31
 8004360:	d501      	bpl.n	8004366 <_printf_float+0x162>
 8004362:	3301      	adds	r3, #1
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800436a:	2b00      	cmp	r3, #0
 800436c:	d09b      	beq.n	80042a6 <_printf_float+0xa2>
 800436e:	232d      	movs	r3, #45	; 0x2d
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004374:	e797      	b.n	80042a6 <_printf_float+0xa2>
 8004376:	2947      	cmp	r1, #71	; 0x47
 8004378:	d1bc      	bne.n	80042f4 <_printf_float+0xf0>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ba      	bne.n	80042f4 <_printf_float+0xf0>
 800437e:	2301      	movs	r3, #1
 8004380:	e7b7      	b.n	80042f2 <_printf_float+0xee>
 8004382:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004386:	d118      	bne.n	80043ba <_printf_float+0x1b6>
 8004388:	2900      	cmp	r1, #0
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	dd0b      	ble.n	80043a6 <_printf_float+0x1a2>
 800438e:	6121      	str	r1, [r4, #16]
 8004390:	b913      	cbnz	r3, 8004398 <_printf_float+0x194>
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	07d0      	lsls	r0, r2, #31
 8004396:	d502      	bpl.n	800439e <_printf_float+0x19a>
 8004398:	3301      	adds	r3, #1
 800439a:	440b      	add	r3, r1
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	f04f 0a00 	mov.w	sl, #0
 80043a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043a4:	e7df      	b.n	8004366 <_printf_float+0x162>
 80043a6:	b913      	cbnz	r3, 80043ae <_printf_float+0x1aa>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	07d2      	lsls	r2, r2, #31
 80043ac:	d501      	bpl.n	80043b2 <_printf_float+0x1ae>
 80043ae:	3302      	adds	r3, #2
 80043b0:	e7f4      	b.n	800439c <_printf_float+0x198>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e7f2      	b.n	800439c <_printf_float+0x198>
 80043b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043bc:	4299      	cmp	r1, r3
 80043be:	db05      	blt.n	80043cc <_printf_float+0x1c8>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	6121      	str	r1, [r4, #16]
 80043c4:	07d8      	lsls	r0, r3, #31
 80043c6:	d5ea      	bpl.n	800439e <_printf_float+0x19a>
 80043c8:	1c4b      	adds	r3, r1, #1
 80043ca:	e7e7      	b.n	800439c <_printf_float+0x198>
 80043cc:	2900      	cmp	r1, #0
 80043ce:	bfcc      	ite	gt
 80043d0:	2201      	movgt	r2, #1
 80043d2:	f1c1 0202 	rsble	r2, r1, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	e7e0      	b.n	800439c <_printf_float+0x198>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	055a      	lsls	r2, r3, #21
 80043de:	d407      	bmi.n	80043f0 <_printf_float+0x1ec>
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	4642      	mov	r2, r8
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	d12b      	bne.n	8004446 <_printf_float+0x242>
 80043ee:	e764      	b.n	80042ba <_printf_float+0xb6>
 80043f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043f4:	f240 80dd 	bls.w	80045b2 <_printf_float+0x3ae>
 80043f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043fc:	2200      	movs	r2, #0
 80043fe:	2300      	movs	r3, #0
 8004400:	f7fc fb3e 	bl	8000a80 <__aeabi_dcmpeq>
 8004404:	2800      	cmp	r0, #0
 8004406:	d033      	beq.n	8004470 <_printf_float+0x26c>
 8004408:	2301      	movs	r3, #1
 800440a:	4631      	mov	r1, r6
 800440c:	4628      	mov	r0, r5
 800440e:	4a35      	ldr	r2, [pc, #212]	; (80044e4 <_printf_float+0x2e0>)
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f af51 	beq.w	80042ba <_printf_float+0xb6>
 8004418:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800441c:	429a      	cmp	r2, r3
 800441e:	db02      	blt.n	8004426 <_printf_float+0x222>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	07d8      	lsls	r0, r3, #31
 8004424:	d50f      	bpl.n	8004446 <_printf_float+0x242>
 8004426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f af42 	beq.w	80042ba <_printf_float+0xb6>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	f104 091a 	add.w	r9, r4, #26
 800443e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004440:	3b01      	subs	r3, #1
 8004442:	4543      	cmp	r3, r8
 8004444:	dc09      	bgt.n	800445a <_printf_float+0x256>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	079b      	lsls	r3, r3, #30
 800444a:	f100 8102 	bmi.w	8004652 <_printf_float+0x44e>
 800444e:	68e0      	ldr	r0, [r4, #12]
 8004450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004452:	4298      	cmp	r0, r3
 8004454:	bfb8      	it	lt
 8004456:	4618      	movlt	r0, r3
 8004458:	e731      	b.n	80042be <_printf_float+0xba>
 800445a:	2301      	movs	r3, #1
 800445c:	464a      	mov	r2, r9
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f af28 	beq.w	80042ba <_printf_float+0xb6>
 800446a:	f108 0801 	add.w	r8, r8, #1
 800446e:	e7e6      	b.n	800443e <_printf_float+0x23a>
 8004470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004472:	2b00      	cmp	r3, #0
 8004474:	dc38      	bgt.n	80044e8 <_printf_float+0x2e4>
 8004476:	2301      	movs	r3, #1
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <_printf_float+0x2e0>)
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f af1a 	beq.w	80042ba <_printf_float+0xb6>
 8004486:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800448a:	4313      	orrs	r3, r2
 800448c:	d102      	bne.n	8004494 <_printf_float+0x290>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	07d9      	lsls	r1, r3, #31
 8004492:	d5d8      	bpl.n	8004446 <_printf_float+0x242>
 8004494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	f43f af0b 	beq.w	80042ba <_printf_float+0xb6>
 80044a4:	f04f 0900 	mov.w	r9, #0
 80044a8:	f104 0a1a 	add.w	sl, r4, #26
 80044ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ae:	425b      	negs	r3, r3
 80044b0:	454b      	cmp	r3, r9
 80044b2:	dc01      	bgt.n	80044b8 <_printf_float+0x2b4>
 80044b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b6:	e794      	b.n	80043e2 <_printf_float+0x1de>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4652      	mov	r2, sl
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	f43f aef9 	beq.w	80042ba <_printf_float+0xb6>
 80044c8:	f109 0901 	add.w	r9, r9, #1
 80044cc:	e7ee      	b.n	80044ac <_printf_float+0x2a8>
 80044ce:	bf00      	nop
 80044d0:	7fefffff 	.word	0x7fefffff
 80044d4:	0800751c 	.word	0x0800751c
 80044d8:	08007520 	.word	0x08007520
 80044dc:	08007528 	.word	0x08007528
 80044e0:	08007524 	.word	0x08007524
 80044e4:	0800752c 	.word	0x0800752c
 80044e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bfa8      	it	ge
 80044f0:	461a      	movge	r2, r3
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	4691      	mov	r9, r2
 80044f6:	dc37      	bgt.n	8004568 <_printf_float+0x364>
 80044f8:	f04f 0b00 	mov.w	fp, #0
 80044fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004500:	f104 021a 	add.w	r2, r4, #26
 8004504:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004508:	ebaa 0309 	sub.w	r3, sl, r9
 800450c:	455b      	cmp	r3, fp
 800450e:	dc33      	bgt.n	8004578 <_printf_float+0x374>
 8004510:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004514:	429a      	cmp	r2, r3
 8004516:	db3b      	blt.n	8004590 <_printf_float+0x38c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	d438      	bmi.n	8004590 <_printf_float+0x38c>
 800451e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004520:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004522:	eba3 020a 	sub.w	r2, r3, sl
 8004526:	eba3 0901 	sub.w	r9, r3, r1
 800452a:	4591      	cmp	r9, r2
 800452c:	bfa8      	it	ge
 800452e:	4691      	movge	r9, r2
 8004530:	f1b9 0f00 	cmp.w	r9, #0
 8004534:	dc34      	bgt.n	80045a0 <_printf_float+0x39c>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800453e:	f104 0a1a 	add.w	sl, r4, #26
 8004542:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	eba3 0309 	sub.w	r3, r3, r9
 800454c:	4543      	cmp	r3, r8
 800454e:	f77f af7a 	ble.w	8004446 <_printf_float+0x242>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4631      	mov	r1, r6
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	f43f aeac 	beq.w	80042ba <_printf_float+0xb6>
 8004562:	f108 0801 	add.w	r8, r8, #1
 8004566:	e7ec      	b.n	8004542 <_printf_float+0x33e>
 8004568:	4613      	mov	r3, r2
 800456a:	4631      	mov	r1, r6
 800456c:	4642      	mov	r2, r8
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	d1c0      	bne.n	80044f8 <_printf_float+0x2f4>
 8004576:	e6a0      	b.n	80042ba <_printf_float+0xb6>
 8004578:	2301      	movs	r3, #1
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	f43f ae99 	beq.w	80042ba <_printf_float+0xb6>
 8004588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800458a:	f10b 0b01 	add.w	fp, fp, #1
 800458e:	e7b9      	b.n	8004504 <_printf_float+0x300>
 8004590:	4631      	mov	r1, r6
 8004592:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	d1bf      	bne.n	800451e <_printf_float+0x31a>
 800459e:	e68c      	b.n	80042ba <_printf_float+0xb6>
 80045a0:	464b      	mov	r3, r9
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	eb08 020a 	add.w	r2, r8, sl
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1c2      	bne.n	8004536 <_printf_float+0x332>
 80045b0:	e683      	b.n	80042ba <_printf_float+0xb6>
 80045b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045b4:	2a01      	cmp	r2, #1
 80045b6:	dc01      	bgt.n	80045bc <_printf_float+0x3b8>
 80045b8:	07db      	lsls	r3, r3, #31
 80045ba:	d537      	bpl.n	800462c <_printf_float+0x428>
 80045bc:	2301      	movs	r3, #1
 80045be:	4642      	mov	r2, r8
 80045c0:	4631      	mov	r1, r6
 80045c2:	4628      	mov	r0, r5
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f ae77 	beq.w	80042ba <_printf_float+0xb6>
 80045cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f ae6f 	beq.w	80042ba <_printf_float+0xb6>
 80045dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f7fc fa4c 	bl	8000a80 <__aeabi_dcmpeq>
 80045e8:	b9d8      	cbnz	r0, 8004622 <_printf_float+0x41e>
 80045ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045ec:	f108 0201 	add.w	r2, r8, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	d10e      	bne.n	800461a <_printf_float+0x416>
 80045fc:	e65d      	b.n	80042ba <_printf_float+0xb6>
 80045fe:	2301      	movs	r3, #1
 8004600:	464a      	mov	r2, r9
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae56 	beq.w	80042ba <_printf_float+0xb6>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004614:	3b01      	subs	r3, #1
 8004616:	4543      	cmp	r3, r8
 8004618:	dcf1      	bgt.n	80045fe <_printf_float+0x3fa>
 800461a:	4653      	mov	r3, sl
 800461c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004620:	e6e0      	b.n	80043e4 <_printf_float+0x1e0>
 8004622:	f04f 0800 	mov.w	r8, #0
 8004626:	f104 091a 	add.w	r9, r4, #26
 800462a:	e7f2      	b.n	8004612 <_printf_float+0x40e>
 800462c:	2301      	movs	r3, #1
 800462e:	4642      	mov	r2, r8
 8004630:	e7df      	b.n	80045f2 <_printf_float+0x3ee>
 8004632:	2301      	movs	r3, #1
 8004634:	464a      	mov	r2, r9
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	47b8      	blx	r7
 800463c:	3001      	adds	r0, #1
 800463e:	f43f ae3c 	beq.w	80042ba <_printf_float+0xb6>
 8004642:	f108 0801 	add.w	r8, r8, #1
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800464a:	1a5b      	subs	r3, r3, r1
 800464c:	4543      	cmp	r3, r8
 800464e:	dcf0      	bgt.n	8004632 <_printf_float+0x42e>
 8004650:	e6fd      	b.n	800444e <_printf_float+0x24a>
 8004652:	f04f 0800 	mov.w	r8, #0
 8004656:	f104 0919 	add.w	r9, r4, #25
 800465a:	e7f4      	b.n	8004646 <_printf_float+0x442>

0800465c <_printf_common>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	4616      	mov	r6, r2
 8004662:	4699      	mov	r9, r3
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	690b      	ldr	r3, [r1, #16]
 8004668:	4607      	mov	r7, r0
 800466a:	4293      	cmp	r3, r2
 800466c:	bfb8      	it	lt
 800466e:	4613      	movlt	r3, r2
 8004670:	6033      	str	r3, [r6, #0]
 8004672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004676:	460c      	mov	r4, r1
 8004678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800467c:	b10a      	cbz	r2, 8004682 <_printf_common+0x26>
 800467e:	3301      	adds	r3, #1
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	0699      	lsls	r1, r3, #26
 8004686:	bf42      	ittt	mi
 8004688:	6833      	ldrmi	r3, [r6, #0]
 800468a:	3302      	addmi	r3, #2
 800468c:	6033      	strmi	r3, [r6, #0]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	f015 0506 	ands.w	r5, r5, #6
 8004694:	d106      	bne.n	80046a4 <_printf_common+0x48>
 8004696:	f104 0a19 	add.w	sl, r4, #25
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	6832      	ldr	r2, [r6, #0]
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dc28      	bgt.n	80046f6 <_printf_common+0x9a>
 80046a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a8:	1e13      	subs	r3, r2, #0
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	bf18      	it	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	0692      	lsls	r2, r2, #26
 80046b2:	d42d      	bmi.n	8004710 <_printf_common+0xb4>
 80046b4:	4649      	mov	r1, r9
 80046b6:	4638      	mov	r0, r7
 80046b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d020      	beq.n	8004704 <_printf_common+0xa8>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	68e5      	ldr	r5, [r4, #12]
 80046c6:	f003 0306 	and.w	r3, r3, #6
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	bf18      	it	ne
 80046ce:	2500      	movne	r5, #0
 80046d0:	6832      	ldr	r2, [r6, #0]
 80046d2:	f04f 0600 	mov.w	r6, #0
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	bf08      	it	eq
 80046da:	1aad      	subeq	r5, r5, r2
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	bf08      	it	eq
 80046e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bfc4      	itt	gt
 80046e8:	1a9b      	subgt	r3, r3, r2
 80046ea:	18ed      	addgt	r5, r5, r3
 80046ec:	341a      	adds	r4, #26
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	d11a      	bne.n	8004728 <_printf_common+0xcc>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e008      	b.n	8004708 <_printf_common+0xac>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4649      	mov	r1, r9
 80046fc:	4638      	mov	r0, r7
 80046fe:	47c0      	blx	r8
 8004700:	3001      	adds	r0, #1
 8004702:	d103      	bne.n	800470c <_printf_common+0xb0>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	3501      	adds	r5, #1
 800470e:	e7c4      	b.n	800469a <_printf_common+0x3e>
 8004710:	2030      	movs	r0, #48	; 0x30
 8004712:	18e1      	adds	r1, r4, r3
 8004714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800471e:	4422      	add	r2, r4
 8004720:	3302      	adds	r3, #2
 8004722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004726:	e7c5      	b.n	80046b4 <_printf_common+0x58>
 8004728:	2301      	movs	r3, #1
 800472a:	4622      	mov	r2, r4
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa8>
 8004736:	3601      	adds	r6, #1
 8004738:	e7d9      	b.n	80046ee <_printf_common+0x92>
	...

0800473c <_printf_i>:
 800473c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	7e0f      	ldrb	r7, [r1, #24]
 8004742:	4691      	mov	r9, r2
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4680      	mov	r8, r0
 8004748:	460c      	mov	r4, r1
 800474a:	469a      	mov	sl, r3
 800474c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800474e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004752:	d807      	bhi.n	8004764 <_printf_i+0x28>
 8004754:	2f62      	cmp	r7, #98	; 0x62
 8004756:	d80a      	bhi.n	800476e <_printf_i+0x32>
 8004758:	2f00      	cmp	r7, #0
 800475a:	f000 80d9 	beq.w	8004910 <_printf_i+0x1d4>
 800475e:	2f58      	cmp	r7, #88	; 0x58
 8004760:	f000 80a4 	beq.w	80048ac <_printf_i+0x170>
 8004764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800476c:	e03a      	b.n	80047e4 <_printf_i+0xa8>
 800476e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004772:	2b15      	cmp	r3, #21
 8004774:	d8f6      	bhi.n	8004764 <_printf_i+0x28>
 8004776:	a101      	add	r1, pc, #4	; (adr r1, 800477c <_printf_i+0x40>)
 8004778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047e9 	.word	0x080047e9
 8004784:	08004765 	.word	0x08004765
 8004788:	08004765 	.word	0x08004765
 800478c:	08004765 	.word	0x08004765
 8004790:	08004765 	.word	0x08004765
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004765 	.word	0x08004765
 800479c:	08004765 	.word	0x08004765
 80047a0:	08004765 	.word	0x08004765
 80047a4:	08004765 	.word	0x08004765
 80047a8:	080048f7 	.word	0x080048f7
 80047ac:	08004819 	.word	0x08004819
 80047b0:	080048d9 	.word	0x080048d9
 80047b4:	08004765 	.word	0x08004765
 80047b8:	08004765 	.word	0x08004765
 80047bc:	08004919 	.word	0x08004919
 80047c0:	08004765 	.word	0x08004765
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004765 	.word	0x08004765
 80047cc:	08004765 	.word	0x08004765
 80047d0:	080048e1 	.word	0x080048e1
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	602a      	str	r2, [r5, #0]
 80047dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0a4      	b.n	8004932 <_printf_i+0x1f6>
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	6829      	ldr	r1, [r5, #0]
 80047ec:	0606      	lsls	r6, r0, #24
 80047ee:	f101 0304 	add.w	r3, r1, #4
 80047f2:	d50a      	bpl.n	800480a <_printf_i+0xce>
 80047f4:	680e      	ldr	r6, [r1, #0]
 80047f6:	602b      	str	r3, [r5, #0]
 80047f8:	2e00      	cmp	r6, #0
 80047fa:	da03      	bge.n	8004804 <_printf_i+0xc8>
 80047fc:	232d      	movs	r3, #45	; 0x2d
 80047fe:	4276      	negs	r6, r6
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	230a      	movs	r3, #10
 8004806:	485e      	ldr	r0, [pc, #376]	; (8004980 <_printf_i+0x244>)
 8004808:	e019      	b.n	800483e <_printf_i+0x102>
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	bf18      	it	ne
 8004814:	b236      	sxthne	r6, r6
 8004816:	e7ef      	b.n	80047f8 <_printf_i+0xbc>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	1d19      	adds	r1, r3, #4
 800481e:	6029      	str	r1, [r5, #0]
 8004820:	0601      	lsls	r1, r0, #24
 8004822:	d501      	bpl.n	8004828 <_printf_i+0xec>
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	e002      	b.n	800482e <_printf_i+0xf2>
 8004828:	0646      	lsls	r6, r0, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xe8>
 800482c:	881e      	ldrh	r6, [r3, #0]
 800482e:	2f6f      	cmp	r7, #111	; 0x6f
 8004830:	bf0c      	ite	eq
 8004832:	2308      	moveq	r3, #8
 8004834:	230a      	movne	r3, #10
 8004836:	4852      	ldr	r0, [pc, #328]	; (8004980 <_printf_i+0x244>)
 8004838:	2100      	movs	r1, #0
 800483a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483e:	6865      	ldr	r5, [r4, #4]
 8004840:	2d00      	cmp	r5, #0
 8004842:	bfa8      	it	ge
 8004844:	6821      	ldrge	r1, [r4, #0]
 8004846:	60a5      	str	r5, [r4, #8]
 8004848:	bfa4      	itt	ge
 800484a:	f021 0104 	bicge.w	r1, r1, #4
 800484e:	6021      	strge	r1, [r4, #0]
 8004850:	b90e      	cbnz	r6, 8004856 <_printf_i+0x11a>
 8004852:	2d00      	cmp	r5, #0
 8004854:	d04d      	beq.n	80048f2 <_printf_i+0x1b6>
 8004856:	4615      	mov	r5, r2
 8004858:	fbb6 f1f3 	udiv	r1, r6, r3
 800485c:	fb03 6711 	mls	r7, r3, r1, r6
 8004860:	5dc7      	ldrb	r7, [r0, r7]
 8004862:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004866:	4637      	mov	r7, r6
 8004868:	42bb      	cmp	r3, r7
 800486a:	460e      	mov	r6, r1
 800486c:	d9f4      	bls.n	8004858 <_printf_i+0x11c>
 800486e:	2b08      	cmp	r3, #8
 8004870:	d10b      	bne.n	800488a <_printf_i+0x14e>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	07de      	lsls	r6, r3, #31
 8004876:	d508      	bpl.n	800488a <_printf_i+0x14e>
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	6861      	ldr	r1, [r4, #4]
 800487c:	4299      	cmp	r1, r3
 800487e:	bfde      	ittt	le
 8004880:	2330      	movle	r3, #48	; 0x30
 8004882:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004886:	f105 35ff 	addle.w	r5, r5, #4294967295
 800488a:	1b52      	subs	r2, r2, r5
 800488c:	6122      	str	r2, [r4, #16]
 800488e:	464b      	mov	r3, r9
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f8cd a000 	str.w	sl, [sp]
 8004898:	aa03      	add	r2, sp, #12
 800489a:	f7ff fedf 	bl	800465c <_printf_common>
 800489e:	3001      	adds	r0, #1
 80048a0:	d14c      	bne.n	800493c <_printf_i+0x200>
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295
 80048a6:	b004      	add	sp, #16
 80048a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ac:	4834      	ldr	r0, [pc, #208]	; (8004980 <_printf_i+0x244>)
 80048ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048b2:	6829      	ldr	r1, [r5, #0]
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ba:	6029      	str	r1, [r5, #0]
 80048bc:	061d      	lsls	r5, r3, #24
 80048be:	d514      	bpl.n	80048ea <_printf_i+0x1ae>
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	bf44      	itt	mi
 80048c4:	f043 0320 	orrmi.w	r3, r3, #32
 80048c8:	6023      	strmi	r3, [r4, #0]
 80048ca:	b91e      	cbnz	r6, 80048d4 <_printf_i+0x198>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	f023 0320 	bic.w	r3, r3, #32
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	e7af      	b.n	8004838 <_printf_i+0xfc>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f043 0320 	orr.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	2378      	movs	r3, #120	; 0x78
 80048e2:	4828      	ldr	r0, [pc, #160]	; (8004984 <_printf_i+0x248>)
 80048e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e8:	e7e3      	b.n	80048b2 <_printf_i+0x176>
 80048ea:	0659      	lsls	r1, r3, #25
 80048ec:	bf48      	it	mi
 80048ee:	b2b6      	uxthmi	r6, r6
 80048f0:	e7e6      	b.n	80048c0 <_printf_i+0x184>
 80048f2:	4615      	mov	r5, r2
 80048f4:	e7bb      	b.n	800486e <_printf_i+0x132>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	6826      	ldr	r6, [r4, #0]
 80048fa:	1d18      	adds	r0, r3, #4
 80048fc:	6961      	ldr	r1, [r4, #20]
 80048fe:	6028      	str	r0, [r5, #0]
 8004900:	0635      	lsls	r5, r6, #24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	d501      	bpl.n	800490a <_printf_i+0x1ce>
 8004906:	6019      	str	r1, [r3, #0]
 8004908:	e002      	b.n	8004910 <_printf_i+0x1d4>
 800490a:	0670      	lsls	r0, r6, #25
 800490c:	d5fb      	bpl.n	8004906 <_printf_i+0x1ca>
 800490e:	8019      	strh	r1, [r3, #0]
 8004910:	2300      	movs	r3, #0
 8004912:	4615      	mov	r5, r2
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e7ba      	b.n	800488e <_printf_i+0x152>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	2100      	movs	r1, #0
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	602a      	str	r2, [r5, #0]
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	6862      	ldr	r2, [r4, #4]
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fed5 	bl	80056d4 <memchr>
 800492a:	b108      	cbz	r0, 8004930 <_printf_i+0x1f4>
 800492c:	1b40      	subs	r0, r0, r5
 800492e:	6060      	str	r0, [r4, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	2300      	movs	r3, #0
 8004936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493a:	e7a8      	b.n	800488e <_printf_i+0x152>
 800493c:	462a      	mov	r2, r5
 800493e:	4649      	mov	r1, r9
 8004940:	4640      	mov	r0, r8
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	47d0      	blx	sl
 8004946:	3001      	adds	r0, #1
 8004948:	d0ab      	beq.n	80048a2 <_printf_i+0x166>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	079b      	lsls	r3, r3, #30
 800494e:	d413      	bmi.n	8004978 <_printf_i+0x23c>
 8004950:	68e0      	ldr	r0, [r4, #12]
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	4298      	cmp	r0, r3
 8004956:	bfb8      	it	lt
 8004958:	4618      	movlt	r0, r3
 800495a:	e7a4      	b.n	80048a6 <_printf_i+0x16a>
 800495c:	2301      	movs	r3, #1
 800495e:	4632      	mov	r2, r6
 8004960:	4649      	mov	r1, r9
 8004962:	4640      	mov	r0, r8
 8004964:	47d0      	blx	sl
 8004966:	3001      	adds	r0, #1
 8004968:	d09b      	beq.n	80048a2 <_printf_i+0x166>
 800496a:	3501      	adds	r5, #1
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	9903      	ldr	r1, [sp, #12]
 8004970:	1a5b      	subs	r3, r3, r1
 8004972:	42ab      	cmp	r3, r5
 8004974:	dcf2      	bgt.n	800495c <_printf_i+0x220>
 8004976:	e7eb      	b.n	8004950 <_printf_i+0x214>
 8004978:	2500      	movs	r5, #0
 800497a:	f104 0619 	add.w	r6, r4, #25
 800497e:	e7f5      	b.n	800496c <_printf_i+0x230>
 8004980:	0800752e 	.word	0x0800752e
 8004984:	0800753f 	.word	0x0800753f

08004988 <siprintf>:
 8004988:	b40e      	push	{r1, r2, r3}
 800498a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	9107      	str	r1, [sp, #28]
 800499a:	9104      	str	r1, [sp, #16]
 800499c:	4808      	ldr	r0, [pc, #32]	; (80049c0 <siprintf+0x38>)
 800499e:	4909      	ldr	r1, [pc, #36]	; (80049c4 <siprintf+0x3c>)
 80049a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	6800      	ldr	r0, [r0, #0]
 80049a8:	a902      	add	r1, sp, #8
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	f001 fb7c 	bl	80060a8 <_svfiprintf_r>
 80049b0:	2200      	movs	r2, #0
 80049b2:	9b02      	ldr	r3, [sp, #8]
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	b01c      	add	sp, #112	; 0x70
 80049b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049bc:	b003      	add	sp, #12
 80049be:	4770      	bx	lr
 80049c0:	2000000c 	.word	0x2000000c
 80049c4:	ffff0208 	.word	0xffff0208

080049c8 <quorem>:
 80049c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	6903      	ldr	r3, [r0, #16]
 80049ce:	690c      	ldr	r4, [r1, #16]
 80049d0:	4607      	mov	r7, r0
 80049d2:	42a3      	cmp	r3, r4
 80049d4:	f2c0 8082 	blt.w	8004adc <quorem+0x114>
 80049d8:	3c01      	subs	r4, #1
 80049da:	f100 0514 	add.w	r5, r0, #20
 80049de:	f101 0814 	add.w	r8, r1, #20
 80049e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049f0:	3301      	adds	r3, #1
 80049f2:	429a      	cmp	r2, r3
 80049f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80049f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a00:	d331      	bcc.n	8004a66 <quorem+0x9e>
 8004a02:	f04f 0e00 	mov.w	lr, #0
 8004a06:	4640      	mov	r0, r8
 8004a08:	46ac      	mov	ip, r5
 8004a0a:	46f2      	mov	sl, lr
 8004a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a10:	b293      	uxth	r3, r2
 8004a12:	fb06 e303 	mla	r3, r6, r3, lr
 8004a16:	0c12      	lsrs	r2, r2, #16
 8004a18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	fb06 e202 	mla	r2, r6, r2, lr
 8004a22:	ebaa 0303 	sub.w	r3, sl, r3
 8004a26:	f8dc a000 	ldr.w	sl, [ip]
 8004a2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a2e:	fa1f fa8a 	uxth.w	sl, sl
 8004a32:	4453      	add	r3, sl
 8004a34:	f8dc a000 	ldr.w	sl, [ip]
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a48:	4581      	cmp	r9, r0
 8004a4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a4e:	f84c 3b04 	str.w	r3, [ip], #4
 8004a52:	d2db      	bcs.n	8004a0c <quorem+0x44>
 8004a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a58:	b92b      	cbnz	r3, 8004a66 <quorem+0x9e>
 8004a5a:	9b01      	ldr	r3, [sp, #4]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	d32f      	bcc.n	8004ac4 <quorem+0xfc>
 8004a64:	613c      	str	r4, [r7, #16]
 8004a66:	4638      	mov	r0, r7
 8004a68:	f001 f8ce 	bl	8005c08 <__mcmp>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	db25      	blt.n	8004abc <quorem+0xf4>
 8004a70:	4628      	mov	r0, r5
 8004a72:	f04f 0c00 	mov.w	ip, #0
 8004a76:	3601      	adds	r6, #1
 8004a78:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8004a80:	b28b      	uxth	r3, r1
 8004a82:	ebac 0303 	sub.w	r3, ip, r3
 8004a86:	fa1f f28e 	uxth.w	r2, lr
 8004a8a:	4413      	add	r3, r2
 8004a8c:	0c0a      	lsrs	r2, r1, #16
 8004a8e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a9c:	45c1      	cmp	r9, r8
 8004a9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004aa2:	f840 3b04 	str.w	r3, [r0], #4
 8004aa6:	d2e7      	bcs.n	8004a78 <quorem+0xb0>
 8004aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ab0:	b922      	cbnz	r2, 8004abc <quorem+0xf4>
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	429d      	cmp	r5, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	d30a      	bcc.n	8004ad0 <quorem+0x108>
 8004aba:	613c      	str	r4, [r7, #16]
 8004abc:	4630      	mov	r0, r6
 8004abe:	b003      	add	sp, #12
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d1cb      	bne.n	8004a64 <quorem+0x9c>
 8004acc:	3c01      	subs	r4, #1
 8004ace:	e7c6      	b.n	8004a5e <quorem+0x96>
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	d1f0      	bne.n	8004aba <quorem+0xf2>
 8004ad8:	3c01      	subs	r4, #1
 8004ada:	e7eb      	b.n	8004ab4 <quorem+0xec>
 8004adc:	2000      	movs	r0, #0
 8004ade:	e7ee      	b.n	8004abe <quorem+0xf6>

08004ae0 <_dtoa_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	461f      	mov	r7, r3
 8004ae8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004aea:	b099      	sub	sp, #100	; 0x64
 8004aec:	4605      	mov	r5, r0
 8004aee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004af2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004af6:	b974      	cbnz	r4, 8004b16 <_dtoa_r+0x36>
 8004af8:	2010      	movs	r0, #16
 8004afa:	f000 fde3 	bl	80056c4 <malloc>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6268      	str	r0, [r5, #36]	; 0x24
 8004b02:	b920      	cbnz	r0, 8004b0e <_dtoa_r+0x2e>
 8004b04:	21ea      	movs	r1, #234	; 0xea
 8004b06:	4ba8      	ldr	r3, [pc, #672]	; (8004da8 <_dtoa_r+0x2c8>)
 8004b08:	48a8      	ldr	r0, [pc, #672]	; (8004dac <_dtoa_r+0x2cc>)
 8004b0a:	f001 fbdd 	bl	80062c8 <__assert_func>
 8004b0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b12:	6004      	str	r4, [r0, #0]
 8004b14:	60c4      	str	r4, [r0, #12]
 8004b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	b151      	cbz	r1, 8004b32 <_dtoa_r+0x52>
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4093      	lsls	r3, r2
 8004b22:	604a      	str	r2, [r1, #4]
 8004b24:	608b      	str	r3, [r1, #8]
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fe30 	bl	800578c <_Bfree>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	1e3b      	subs	r3, r7, #0
 8004b34:	bfaf      	iteee	ge
 8004b36:	2300      	movge	r3, #0
 8004b38:	2201      	movlt	r2, #1
 8004b3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b3e:	9305      	strlt	r3, [sp, #20]
 8004b40:	bfa8      	it	ge
 8004b42:	f8c8 3000 	strge.w	r3, [r8]
 8004b46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b4a:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <_dtoa_r+0x2d0>)
 8004b4c:	bfb8      	it	lt
 8004b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b52:	ea33 0309 	bics.w	r3, r3, r9
 8004b56:	d119      	bne.n	8004b8c <_dtoa_r+0xac>
 8004b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b64:	4333      	orrs	r3, r6
 8004b66:	f000 857f 	beq.w	8005668 <_dtoa_r+0xb88>
 8004b6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b6c:	b953      	cbnz	r3, 8004b84 <_dtoa_r+0xa4>
 8004b6e:	4b91      	ldr	r3, [pc, #580]	; (8004db4 <_dtoa_r+0x2d4>)
 8004b70:	e022      	b.n	8004bb8 <_dtoa_r+0xd8>
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <_dtoa_r+0x2d8>)
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	3308      	adds	r3, #8
 8004b78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	9803      	ldr	r0, [sp, #12]
 8004b7e:	b019      	add	sp, #100	; 0x64
 8004b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b84:	4b8b      	ldr	r3, [pc, #556]	; (8004db4 <_dtoa_r+0x2d4>)
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	3303      	adds	r3, #3
 8004b8a:	e7f5      	b.n	8004b78 <_dtoa_r+0x98>
 8004b8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ff70 	bl	8000a80 <__aeabi_dcmpeq>
 8004ba0:	4680      	mov	r8, r0
 8004ba2:	b158      	cbz	r0, 8004bbc <_dtoa_r+0xdc>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8558 	beq.w	8005662 <_dtoa_r+0xb82>
 8004bb2:	4882      	ldr	r0, [pc, #520]	; (8004dbc <_dtoa_r+0x2dc>)
 8004bb4:	6018      	str	r0, [r3, #0]
 8004bb6:	1e43      	subs	r3, r0, #1
 8004bb8:	9303      	str	r3, [sp, #12]
 8004bba:	e7df      	b.n	8004b7c <_dtoa_r+0x9c>
 8004bbc:	ab16      	add	r3, sp, #88	; 0x58
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	ab17      	add	r3, sp, #92	; 0x5c
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004bca:	f001 f8c5 	bl	8005d58 <__d2b>
 8004bce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004bd2:	4683      	mov	fp, r0
 8004bd4:	2c00      	cmp	r4, #0
 8004bd6:	d07f      	beq.n	8004cd8 <_dtoa_r+0x1f8>
 8004bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004bea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004bee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <_dtoa_r+0x2e0>)
 8004bf6:	f7fb fb23 	bl	8000240 <__aeabi_dsub>
 8004bfa:	a365      	add	r3, pc, #404	; (adr r3, 8004d90 <_dtoa_r+0x2b0>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fcd6 	bl	80005b0 <__aeabi_dmul>
 8004c04:	a364      	add	r3, pc, #400	; (adr r3, 8004d98 <_dtoa_r+0x2b8>)
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f7fb fb1b 	bl	8000244 <__adddf3>
 8004c0e:	4606      	mov	r6, r0
 8004c10:	4620      	mov	r0, r4
 8004c12:	460f      	mov	r7, r1
 8004c14:	f7fb fc62 	bl	80004dc <__aeabi_i2d>
 8004c18:	a361      	add	r3, pc, #388	; (adr r3, 8004da0 <_dtoa_r+0x2c0>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fcc7 	bl	80005b0 <__aeabi_dmul>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4630      	mov	r0, r6
 8004c28:	4639      	mov	r1, r7
 8004c2a:	f7fb fb0b 	bl	8000244 <__adddf3>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	460f      	mov	r7, r1
 8004c32:	f7fb ff6d 	bl	8000b10 <__aeabi_d2iz>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4682      	mov	sl, r0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	4639      	mov	r1, r7
 8004c40:	f7fb ff28 	bl	8000a94 <__aeabi_dcmplt>
 8004c44:	b148      	cbz	r0, 8004c5a <_dtoa_r+0x17a>
 8004c46:	4650      	mov	r0, sl
 8004c48:	f7fb fc48 	bl	80004dc <__aeabi_i2d>
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	463b      	mov	r3, r7
 8004c50:	f7fb ff16 	bl	8000a80 <__aeabi_dcmpeq>
 8004c54:	b908      	cbnz	r0, 8004c5a <_dtoa_r+0x17a>
 8004c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c5a:	f1ba 0f16 	cmp.w	sl, #22
 8004c5e:	d858      	bhi.n	8004d12 <_dtoa_r+0x232>
 8004c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c64:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <_dtoa_r+0x2e4>)
 8004c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb ff11 	bl	8000a94 <__aeabi_dcmplt>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d04f      	beq.n	8004d16 <_dtoa_r+0x236>
 8004c76:	2300      	movs	r3, #0
 8004c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c80:	1b1c      	subs	r4, r3, r4
 8004c82:	1e63      	subs	r3, r4, #1
 8004c84:	9309      	str	r3, [sp, #36]	; 0x24
 8004c86:	bf49      	itett	mi
 8004c88:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c8c:	2300      	movpl	r3, #0
 8004c8e:	9306      	strmi	r3, [sp, #24]
 8004c90:	2300      	movmi	r3, #0
 8004c92:	bf54      	ite	pl
 8004c94:	9306      	strpl	r3, [sp, #24]
 8004c96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c98:	f1ba 0f00 	cmp.w	sl, #0
 8004c9c:	db3d      	blt.n	8004d1a <_dtoa_r+0x23a>
 8004c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ca4:	4453      	add	r3, sl
 8004ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca8:	2300      	movs	r3, #0
 8004caa:	930a      	str	r3, [sp, #40]	; 0x28
 8004cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	f200 808c 	bhi.w	8004dcc <_dtoa_r+0x2ec>
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	bfc4      	itt	gt
 8004cb8:	3b04      	subgt	r3, #4
 8004cba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cbe:	bfc8      	it	gt
 8004cc0:	2400      	movgt	r4, #0
 8004cc2:	f1a3 0302 	sub.w	r3, r3, #2
 8004cc6:	bfd8      	it	le
 8004cc8:	2401      	movle	r4, #1
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	f200 808a 	bhi.w	8004de4 <_dtoa_r+0x304>
 8004cd0:	e8df f003 	tbb	[pc, r3]
 8004cd4:	5b4d4f2d 	.word	0x5b4d4f2d
 8004cd8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004cdc:	441c      	add	r4, r3
 8004cde:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	bfc3      	ittte	gt
 8004ce6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004cee:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cf2:	f1c3 0320 	rsble	r3, r3, #32
 8004cf6:	bfc6      	itte	gt
 8004cf8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cfc:	4318      	orrgt	r0, r3
 8004cfe:	fa06 f003 	lslle.w	r0, r6, r3
 8004d02:	f7fb fbdb 	bl	80004bc <__aeabi_ui2d>
 8004d06:	2301      	movs	r3, #1
 8004d08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004d0c:	3c01      	subs	r4, #1
 8004d0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d10:	e76f      	b.n	8004bf2 <_dtoa_r+0x112>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e7b2      	b.n	8004c7c <_dtoa_r+0x19c>
 8004d16:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d18:	e7b1      	b.n	8004c7e <_dtoa_r+0x19e>
 8004d1a:	9b06      	ldr	r3, [sp, #24]
 8004d1c:	eba3 030a 	sub.w	r3, r3, sl
 8004d20:	9306      	str	r3, [sp, #24]
 8004d22:	f1ca 0300 	rsb	r3, sl, #0
 8004d26:	930a      	str	r3, [sp, #40]	; 0x28
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d2c:	e7be      	b.n	8004cac <_dtoa_r+0x1cc>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dc58      	bgt.n	8004dea <_dtoa_r+0x30a>
 8004d38:	f04f 0901 	mov.w	r9, #1
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004d42:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004d46:	2200      	movs	r2, #0
 8004d48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d4a:	6042      	str	r2, [r0, #4]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	f102 0614 	add.w	r6, r2, #20
 8004d52:	429e      	cmp	r6, r3
 8004d54:	6841      	ldr	r1, [r0, #4]
 8004d56:	d94e      	bls.n	8004df6 <_dtoa_r+0x316>
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 fcd7 	bl	800570c <_Balloc>
 8004d5e:	9003      	str	r0, [sp, #12]
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d14c      	bne.n	8004dfe <_dtoa_r+0x31e>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <_dtoa_r+0x2e8>)
 8004d6c:	e6cc      	b.n	8004b08 <_dtoa_r+0x28>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e7de      	b.n	8004d30 <_dtoa_r+0x250>
 8004d72:	2300      	movs	r3, #0
 8004d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d78:	eb0a 0903 	add.w	r9, sl, r3
 8004d7c:	f109 0301 	add.w	r3, r9, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	9308      	str	r3, [sp, #32]
 8004d84:	bfb8      	it	lt
 8004d86:	2301      	movlt	r3, #1
 8004d88:	e7dd      	b.n	8004d46 <_dtoa_r+0x266>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7f2      	b.n	8004d74 <_dtoa_r+0x294>
 8004d8e:	bf00      	nop
 8004d90:	636f4361 	.word	0x636f4361
 8004d94:	3fd287a7 	.word	0x3fd287a7
 8004d98:	8b60c8b3 	.word	0x8b60c8b3
 8004d9c:	3fc68a28 	.word	0x3fc68a28
 8004da0:	509f79fb 	.word	0x509f79fb
 8004da4:	3fd34413 	.word	0x3fd34413
 8004da8:	0800755d 	.word	0x0800755d
 8004dac:	08007574 	.word	0x08007574
 8004db0:	7ff00000 	.word	0x7ff00000
 8004db4:	08007559 	.word	0x08007559
 8004db8:	08007550 	.word	0x08007550
 8004dbc:	0800752d 	.word	0x0800752d
 8004dc0:	3ff80000 	.word	0x3ff80000
 8004dc4:	08007668 	.word	0x08007668
 8004dc8:	080075cf 	.word	0x080075cf
 8004dcc:	2401      	movs	r4, #1
 8004dce:	2300      	movs	r3, #0
 8004dd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004dd2:	9322      	str	r3, [sp, #136]	; 0x88
 8004dd4:	f04f 39ff 	mov.w	r9, #4294967295
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2312      	movs	r3, #18
 8004ddc:	f8cd 9020 	str.w	r9, [sp, #32]
 8004de0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004de2:	e7b0      	b.n	8004d46 <_dtoa_r+0x266>
 8004de4:	2301      	movs	r3, #1
 8004de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de8:	e7f4      	b.n	8004dd4 <_dtoa_r+0x2f4>
 8004dea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004dee:	464b      	mov	r3, r9
 8004df0:	f8cd 9020 	str.w	r9, [sp, #32]
 8004df4:	e7a7      	b.n	8004d46 <_dtoa_r+0x266>
 8004df6:	3101      	adds	r1, #1
 8004df8:	6041      	str	r1, [r0, #4]
 8004dfa:	0052      	lsls	r2, r2, #1
 8004dfc:	e7a7      	b.n	8004d4e <_dtoa_r+0x26e>
 8004dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e00:	9a03      	ldr	r2, [sp, #12]
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	9b08      	ldr	r3, [sp, #32]
 8004e06:	2b0e      	cmp	r3, #14
 8004e08:	f200 80a8 	bhi.w	8004f5c <_dtoa_r+0x47c>
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	f000 80a5 	beq.w	8004f5c <_dtoa_r+0x47c>
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	dd34      	ble.n	8004e82 <_dtoa_r+0x3a2>
 8004e18:	4a9a      	ldr	r2, [pc, #616]	; (8005084 <_dtoa_r+0x5a4>)
 8004e1a:	f00a 030f 	and.w	r3, sl, #15
 8004e1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e22:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e2e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004e32:	d016      	beq.n	8004e62 <_dtoa_r+0x382>
 8004e34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e38:	4b93      	ldr	r3, [pc, #588]	; (8005088 <_dtoa_r+0x5a8>)
 8004e3a:	2703      	movs	r7, #3
 8004e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e40:	f7fb fce0 	bl	8000804 <__aeabi_ddiv>
 8004e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e48:	f004 040f 	and.w	r4, r4, #15
 8004e4c:	4e8e      	ldr	r6, [pc, #568]	; (8005088 <_dtoa_r+0x5a8>)
 8004e4e:	b954      	cbnz	r4, 8004e66 <_dtoa_r+0x386>
 8004e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e58:	f7fb fcd4 	bl	8000804 <__aeabi_ddiv>
 8004e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e60:	e029      	b.n	8004eb6 <_dtoa_r+0x3d6>
 8004e62:	2702      	movs	r7, #2
 8004e64:	e7f2      	b.n	8004e4c <_dtoa_r+0x36c>
 8004e66:	07e1      	lsls	r1, r4, #31
 8004e68:	d508      	bpl.n	8004e7c <_dtoa_r+0x39c>
 8004e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e72:	f7fb fb9d 	bl	80005b0 <__aeabi_dmul>
 8004e76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e7a:	3701      	adds	r7, #1
 8004e7c:	1064      	asrs	r4, r4, #1
 8004e7e:	3608      	adds	r6, #8
 8004e80:	e7e5      	b.n	8004e4e <_dtoa_r+0x36e>
 8004e82:	f000 80a5 	beq.w	8004fd0 <_dtoa_r+0x4f0>
 8004e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e8a:	f1ca 0400 	rsb	r4, sl, #0
 8004e8e:	4b7d      	ldr	r3, [pc, #500]	; (8005084 <_dtoa_r+0x5a4>)
 8004e90:	f004 020f 	and.w	r2, r4, #15
 8004e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb fb88 	bl	80005b0 <__aeabi_dmul>
 8004ea0:	2702      	movs	r7, #2
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea8:	4e77      	ldr	r6, [pc, #476]	; (8005088 <_dtoa_r+0x5a8>)
 8004eaa:	1124      	asrs	r4, r4, #4
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	f040 8084 	bne.w	8004fba <_dtoa_r+0x4da>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1d2      	bne.n	8004e5c <_dtoa_r+0x37c>
 8004eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808b 	beq.w	8004fd4 <_dtoa_r+0x4f4>
 8004ebe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4b6f      	ldr	r3, [pc, #444]	; (800508c <_dtoa_r+0x5ac>)
 8004ece:	f7fb fde1 	bl	8000a94 <__aeabi_dcmplt>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d07e      	beq.n	8004fd4 <_dtoa_r+0x4f4>
 8004ed6:	9b08      	ldr	r3, [sp, #32]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d07b      	beq.n	8004fd4 <_dtoa_r+0x4f4>
 8004edc:	f1b9 0f00 	cmp.w	r9, #0
 8004ee0:	dd38      	ble.n	8004f54 <_dtoa_r+0x474>
 8004ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4b69      	ldr	r3, [pc, #420]	; (8005090 <_dtoa_r+0x5b0>)
 8004eea:	f7fb fb61 	bl	80005b0 <__aeabi_dmul>
 8004eee:	464c      	mov	r4, r9
 8004ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004ef8:	3701      	adds	r7, #1
 8004efa:	4638      	mov	r0, r7
 8004efc:	f7fb faee 	bl	80004dc <__aeabi_i2d>
 8004f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f04:	f7fb fb54 	bl	80005b0 <__aeabi_dmul>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4b62      	ldr	r3, [pc, #392]	; (8005094 <_dtoa_r+0x5b4>)
 8004f0c:	f7fb f99a 	bl	8000244 <__adddf3>
 8004f10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f18:	9611      	str	r6, [sp, #68]	; 0x44
 8004f1a:	2c00      	cmp	r4, #0
 8004f1c:	d15d      	bne.n	8004fda <_dtoa_r+0x4fa>
 8004f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f22:	2200      	movs	r2, #0
 8004f24:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <_dtoa_r+0x5b8>)
 8004f26:	f7fb f98b 	bl	8000240 <__aeabi_dsub>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f32:	4633      	mov	r3, r6
 8004f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f36:	f7fb fdcb 	bl	8000ad0 <__aeabi_dcmpgt>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f040 829c 	bne.w	8005478 <_dtoa_r+0x998>
 8004f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f4a:	f7fb fda3 	bl	8000a94 <__aeabi_dcmplt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f040 8290 	bne.w	8005474 <_dtoa_r+0x994>
 8004f54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f2c0 8152 	blt.w	8005208 <_dtoa_r+0x728>
 8004f64:	f1ba 0f0e 	cmp.w	sl, #14
 8004f68:	f300 814e 	bgt.w	8005208 <_dtoa_r+0x728>
 8004f6c:	4b45      	ldr	r3, [pc, #276]	; (8005084 <_dtoa_r+0x5a4>)
 8004f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f280 80db 	bge.w	8005138 <_dtoa_r+0x658>
 8004f82:	9b08      	ldr	r3, [sp, #32]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f300 80d7 	bgt.w	8005138 <_dtoa_r+0x658>
 8004f8a:	f040 8272 	bne.w	8005472 <_dtoa_r+0x992>
 8004f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f92:	2200      	movs	r2, #0
 8004f94:	4b40      	ldr	r3, [pc, #256]	; (8005098 <_dtoa_r+0x5b8>)
 8004f96:	f7fb fb0b 	bl	80005b0 <__aeabi_dmul>
 8004f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f9e:	f7fb fd8d 	bl	8000abc <__aeabi_dcmpge>
 8004fa2:	9c08      	ldr	r4, [sp, #32]
 8004fa4:	4626      	mov	r6, r4
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f040 8248 	bne.w	800543c <_dtoa_r+0x95c>
 8004fac:	2331      	movs	r3, #49	; 0x31
 8004fae:	9f03      	ldr	r7, [sp, #12]
 8004fb0:	f10a 0a01 	add.w	sl, sl, #1
 8004fb4:	f807 3b01 	strb.w	r3, [r7], #1
 8004fb8:	e244      	b.n	8005444 <_dtoa_r+0x964>
 8004fba:	07e2      	lsls	r2, r4, #31
 8004fbc:	d505      	bpl.n	8004fca <_dtoa_r+0x4ea>
 8004fbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fc2:	f7fb faf5 	bl	80005b0 <__aeabi_dmul>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	3701      	adds	r7, #1
 8004fca:	1064      	asrs	r4, r4, #1
 8004fcc:	3608      	adds	r6, #8
 8004fce:	e76d      	b.n	8004eac <_dtoa_r+0x3cc>
 8004fd0:	2702      	movs	r7, #2
 8004fd2:	e770      	b.n	8004eb6 <_dtoa_r+0x3d6>
 8004fd4:	46d0      	mov	r8, sl
 8004fd6:	9c08      	ldr	r4, [sp, #32]
 8004fd8:	e78f      	b.n	8004efa <_dtoa_r+0x41a>
 8004fda:	9903      	ldr	r1, [sp, #12]
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <_dtoa_r+0x5a4>)
 8004fde:	4421      	add	r1, r4
 8004fe0:	9112      	str	r1, [sp, #72]	; 0x48
 8004fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fe8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d055      	beq.n	80050a0 <_dtoa_r+0x5c0>
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	4929      	ldr	r1, [pc, #164]	; (800509c <_dtoa_r+0x5bc>)
 8004ff8:	f7fb fc04 	bl	8000804 <__aeabi_ddiv>
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	4632      	mov	r2, r6
 8005000:	f7fb f91e 	bl	8000240 <__aeabi_dsub>
 8005004:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005008:	9f03      	ldr	r7, [sp, #12]
 800500a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800500e:	f7fb fd7f 	bl	8000b10 <__aeabi_d2iz>
 8005012:	4604      	mov	r4, r0
 8005014:	f7fb fa62 	bl	80004dc <__aeabi_i2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005020:	f7fb f90e 	bl	8000240 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	3430      	adds	r4, #48	; 0x30
 800502a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005032:	f807 4b01 	strb.w	r4, [r7], #1
 8005036:	f7fb fd2d 	bl	8000a94 <__aeabi_dcmplt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d174      	bne.n	8005128 <_dtoa_r+0x648>
 800503e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005042:	2000      	movs	r0, #0
 8005044:	4911      	ldr	r1, [pc, #68]	; (800508c <_dtoa_r+0x5ac>)
 8005046:	f7fb f8fb 	bl	8000240 <__aeabi_dsub>
 800504a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800504e:	f7fb fd21 	bl	8000a94 <__aeabi_dcmplt>
 8005052:	2800      	cmp	r0, #0
 8005054:	f040 80b7 	bne.w	80051c6 <_dtoa_r+0x6e6>
 8005058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800505a:	429f      	cmp	r7, r3
 800505c:	f43f af7a 	beq.w	8004f54 <_dtoa_r+0x474>
 8005060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005064:	2200      	movs	r2, #0
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <_dtoa_r+0x5b0>)
 8005068:	f7fb faa2 	bl	80005b0 <__aeabi_dmul>
 800506c:	2200      	movs	r2, #0
 800506e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <_dtoa_r+0x5b0>)
 8005078:	f7fb fa9a 	bl	80005b0 <__aeabi_dmul>
 800507c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005080:	e7c3      	b.n	800500a <_dtoa_r+0x52a>
 8005082:	bf00      	nop
 8005084:	08007668 	.word	0x08007668
 8005088:	08007640 	.word	0x08007640
 800508c:	3ff00000 	.word	0x3ff00000
 8005090:	40240000 	.word	0x40240000
 8005094:	401c0000 	.word	0x401c0000
 8005098:	40140000 	.word	0x40140000
 800509c:	3fe00000 	.word	0x3fe00000
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb fa84 	bl	80005b0 <__aeabi_dmul>
 80050a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050ae:	9c03      	ldr	r4, [sp, #12]
 80050b0:	9314      	str	r3, [sp, #80]	; 0x50
 80050b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b6:	f7fb fd2b 	bl	8000b10 <__aeabi_d2iz>
 80050ba:	9015      	str	r0, [sp, #84]	; 0x54
 80050bc:	f7fb fa0e 	bl	80004dc <__aeabi_i2d>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c8:	f7fb f8ba 	bl	8000240 <__aeabi_dsub>
 80050cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ce:	4606      	mov	r6, r0
 80050d0:	3330      	adds	r3, #48	; 0x30
 80050d2:	f804 3b01 	strb.w	r3, [r4], #1
 80050d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050d8:	460f      	mov	r7, r1
 80050da:	429c      	cmp	r4, r3
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	d124      	bne.n	800512c <_dtoa_r+0x64c>
 80050e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050e6:	4bb0      	ldr	r3, [pc, #704]	; (80053a8 <_dtoa_r+0x8c8>)
 80050e8:	f7fb f8ac 	bl	8000244 <__adddf3>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4630      	mov	r0, r6
 80050f2:	4639      	mov	r1, r7
 80050f4:	f7fb fcec 	bl	8000ad0 <__aeabi_dcmpgt>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d163      	bne.n	80051c4 <_dtoa_r+0x6e4>
 80050fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005100:	2000      	movs	r0, #0
 8005102:	49a9      	ldr	r1, [pc, #676]	; (80053a8 <_dtoa_r+0x8c8>)
 8005104:	f7fb f89c 	bl	8000240 <__aeabi_dsub>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	f7fb fcc0 	bl	8000a94 <__aeabi_dcmplt>
 8005114:	2800      	cmp	r0, #0
 8005116:	f43f af1d 	beq.w	8004f54 <_dtoa_r+0x474>
 800511a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800511c:	1e7b      	subs	r3, r7, #1
 800511e:	9314      	str	r3, [sp, #80]	; 0x50
 8005120:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005124:	2b30      	cmp	r3, #48	; 0x30
 8005126:	d0f8      	beq.n	800511a <_dtoa_r+0x63a>
 8005128:	46c2      	mov	sl, r8
 800512a:	e03b      	b.n	80051a4 <_dtoa_r+0x6c4>
 800512c:	4b9f      	ldr	r3, [pc, #636]	; (80053ac <_dtoa_r+0x8cc>)
 800512e:	f7fb fa3f 	bl	80005b0 <__aeabi_dmul>
 8005132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005136:	e7bc      	b.n	80050b2 <_dtoa_r+0x5d2>
 8005138:	9f03      	ldr	r7, [sp, #12]
 800513a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800513e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb fb5d 	bl	8000804 <__aeabi_ddiv>
 800514a:	f7fb fce1 	bl	8000b10 <__aeabi_d2iz>
 800514e:	4604      	mov	r4, r0
 8005150:	f7fb f9c4 	bl	80004dc <__aeabi_i2d>
 8005154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005158:	f7fb fa2a 	bl	80005b0 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb f86c 	bl	8000240 <__aeabi_dsub>
 8005168:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800516c:	f807 6b01 	strb.w	r6, [r7], #1
 8005170:	9e03      	ldr	r6, [sp, #12]
 8005172:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005176:	1bbe      	subs	r6, r7, r6
 8005178:	45b4      	cmp	ip, r6
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	d136      	bne.n	80051ee <_dtoa_r+0x70e>
 8005180:	f7fb f860 	bl	8000244 <__adddf3>
 8005184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
 800518c:	f7fb fca0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005190:	bb58      	cbnz	r0, 80051ea <_dtoa_r+0x70a>
 8005192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb fc71 	bl	8000a80 <__aeabi_dcmpeq>
 800519e:	b108      	cbz	r0, 80051a4 <_dtoa_r+0x6c4>
 80051a0:	07e1      	lsls	r1, r4, #31
 80051a2:	d422      	bmi.n	80051ea <_dtoa_r+0x70a>
 80051a4:	4628      	mov	r0, r5
 80051a6:	4659      	mov	r1, fp
 80051a8:	f000 faf0 	bl	800578c <_Bfree>
 80051ac:	2300      	movs	r3, #0
 80051ae:	703b      	strb	r3, [r7, #0]
 80051b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80051b2:	f10a 0001 	add.w	r0, sl, #1
 80051b6:	6018      	str	r0, [r3, #0]
 80051b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f43f acde 	beq.w	8004b7c <_dtoa_r+0x9c>
 80051c0:	601f      	str	r7, [r3, #0]
 80051c2:	e4db      	b.n	8004b7c <_dtoa_r+0x9c>
 80051c4:	4627      	mov	r7, r4
 80051c6:	463b      	mov	r3, r7
 80051c8:	461f      	mov	r7, r3
 80051ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ce:	2a39      	cmp	r2, #57	; 0x39
 80051d0:	d107      	bne.n	80051e2 <_dtoa_r+0x702>
 80051d2:	9a03      	ldr	r2, [sp, #12]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1f7      	bne.n	80051c8 <_dtoa_r+0x6e8>
 80051d8:	2230      	movs	r2, #48	; 0x30
 80051da:	9903      	ldr	r1, [sp, #12]
 80051dc:	f108 0801 	add.w	r8, r8, #1
 80051e0:	700a      	strb	r2, [r1, #0]
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	3201      	adds	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e79e      	b.n	8005128 <_dtoa_r+0x648>
 80051ea:	46d0      	mov	r8, sl
 80051ec:	e7eb      	b.n	80051c6 <_dtoa_r+0x6e6>
 80051ee:	2200      	movs	r2, #0
 80051f0:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <_dtoa_r+0x8cc>)
 80051f2:	f7fb f9dd 	bl	80005b0 <__aeabi_dmul>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	4680      	mov	r8, r0
 80051fc:	4689      	mov	r9, r1
 80051fe:	f7fb fc3f 	bl	8000a80 <__aeabi_dcmpeq>
 8005202:	2800      	cmp	r0, #0
 8005204:	d09b      	beq.n	800513e <_dtoa_r+0x65e>
 8005206:	e7cd      	b.n	80051a4 <_dtoa_r+0x6c4>
 8005208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800520a:	2a00      	cmp	r2, #0
 800520c:	f000 80d0 	beq.w	80053b0 <_dtoa_r+0x8d0>
 8005210:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005212:	2a01      	cmp	r2, #1
 8005214:	f300 80ae 	bgt.w	8005374 <_dtoa_r+0x894>
 8005218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800521a:	2a00      	cmp	r2, #0
 800521c:	f000 80a6 	beq.w	800536c <_dtoa_r+0x88c>
 8005220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005226:	9f06      	ldr	r7, [sp, #24]
 8005228:	9a06      	ldr	r2, [sp, #24]
 800522a:	2101      	movs	r1, #1
 800522c:	441a      	add	r2, r3
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005232:	4628      	mov	r0, r5
 8005234:	441a      	add	r2, r3
 8005236:	9209      	str	r2, [sp, #36]	; 0x24
 8005238:	f000 fb5e 	bl	80058f8 <__i2b>
 800523c:	4606      	mov	r6, r0
 800523e:	2f00      	cmp	r7, #0
 8005240:	dd0c      	ble.n	800525c <_dtoa_r+0x77c>
 8005242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	dd09      	ble.n	800525c <_dtoa_r+0x77c>
 8005248:	42bb      	cmp	r3, r7
 800524a:	bfa8      	it	ge
 800524c:	463b      	movge	r3, r7
 800524e:	9a06      	ldr	r2, [sp, #24]
 8005250:	1aff      	subs	r7, r7, r3
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	9206      	str	r2, [sp, #24]
 8005256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	9309      	str	r3, [sp, #36]	; 0x24
 800525c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525e:	b1f3      	cbz	r3, 800529e <_dtoa_r+0x7be>
 8005260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80a8 	beq.w	80053b8 <_dtoa_r+0x8d8>
 8005268:	2c00      	cmp	r4, #0
 800526a:	dd10      	ble.n	800528e <_dtoa_r+0x7ae>
 800526c:	4631      	mov	r1, r6
 800526e:	4622      	mov	r2, r4
 8005270:	4628      	mov	r0, r5
 8005272:	f000 fbff 	bl	8005a74 <__pow5mult>
 8005276:	465a      	mov	r2, fp
 8005278:	4601      	mov	r1, r0
 800527a:	4606      	mov	r6, r0
 800527c:	4628      	mov	r0, r5
 800527e:	f000 fb51 	bl	8005924 <__multiply>
 8005282:	4680      	mov	r8, r0
 8005284:	4659      	mov	r1, fp
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fa80 	bl	800578c <_Bfree>
 800528c:	46c3      	mov	fp, r8
 800528e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005290:	1b1a      	subs	r2, r3, r4
 8005292:	d004      	beq.n	800529e <_dtoa_r+0x7be>
 8005294:	4659      	mov	r1, fp
 8005296:	4628      	mov	r0, r5
 8005298:	f000 fbec 	bl	8005a74 <__pow5mult>
 800529c:	4683      	mov	fp, r0
 800529e:	2101      	movs	r1, #1
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 fb29 	bl	80058f8 <__i2b>
 80052a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a8:	4604      	mov	r4, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f340 8086 	ble.w	80053bc <_dtoa_r+0x8dc>
 80052b0:	461a      	mov	r2, r3
 80052b2:	4601      	mov	r1, r0
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 fbdd 	bl	8005a74 <__pow5mult>
 80052ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052bc:	4604      	mov	r4, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	dd7f      	ble.n	80053c2 <_dtoa_r+0x8e2>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052cc:	6918      	ldr	r0, [r3, #16]
 80052ce:	f000 fac5 	bl	800585c <__hi0bits>
 80052d2:	f1c0 0020 	rsb	r0, r0, #32
 80052d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d8:	4418      	add	r0, r3
 80052da:	f010 001f 	ands.w	r0, r0, #31
 80052de:	f000 8092 	beq.w	8005406 <_dtoa_r+0x926>
 80052e2:	f1c0 0320 	rsb	r3, r0, #32
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	f340 808a 	ble.w	8005400 <_dtoa_r+0x920>
 80052ec:	f1c0 001c 	rsb	r0, r0, #28
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	4407      	add	r7, r0
 80052f4:	4403      	add	r3, r0
 80052f6:	9306      	str	r3, [sp, #24]
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	4403      	add	r3, r0
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	9b06      	ldr	r3, [sp, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dd05      	ble.n	8005310 <_dtoa_r+0x830>
 8005304:	4659      	mov	r1, fp
 8005306:	461a      	mov	r2, r3
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fc0d 	bl	8005b28 <__lshift>
 800530e:	4683      	mov	fp, r0
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	dd05      	ble.n	8005322 <_dtoa_r+0x842>
 8005316:	4621      	mov	r1, r4
 8005318:	461a      	mov	r2, r3
 800531a:	4628      	mov	r0, r5
 800531c:	f000 fc04 	bl	8005b28 <__lshift>
 8005320:	4604      	mov	r4, r0
 8005322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d070      	beq.n	800540a <_dtoa_r+0x92a>
 8005328:	4621      	mov	r1, r4
 800532a:	4658      	mov	r0, fp
 800532c:	f000 fc6c 	bl	8005c08 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	da6a      	bge.n	800540a <_dtoa_r+0x92a>
 8005334:	2300      	movs	r3, #0
 8005336:	4659      	mov	r1, fp
 8005338:	220a      	movs	r2, #10
 800533a:	4628      	mov	r0, r5
 800533c:	f000 fa48 	bl	80057d0 <__multadd>
 8005340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005342:	4683      	mov	fp, r0
 8005344:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8194 	beq.w	8005676 <_dtoa_r+0xb96>
 800534e:	4631      	mov	r1, r6
 8005350:	2300      	movs	r3, #0
 8005352:	220a      	movs	r2, #10
 8005354:	4628      	mov	r0, r5
 8005356:	f000 fa3b 	bl	80057d0 <__multadd>
 800535a:	f1b9 0f00 	cmp.w	r9, #0
 800535e:	4606      	mov	r6, r0
 8005360:	f300 8093 	bgt.w	800548a <_dtoa_r+0x9aa>
 8005364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005366:	2b02      	cmp	r3, #2
 8005368:	dc57      	bgt.n	800541a <_dtoa_r+0x93a>
 800536a:	e08e      	b.n	800548a <_dtoa_r+0x9aa>
 800536c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800536e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005372:	e757      	b.n	8005224 <_dtoa_r+0x744>
 8005374:	9b08      	ldr	r3, [sp, #32]
 8005376:	1e5c      	subs	r4, r3, #1
 8005378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537a:	42a3      	cmp	r3, r4
 800537c:	bfb7      	itett	lt
 800537e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005380:	1b1c      	subge	r4, r3, r4
 8005382:	1ae2      	sublt	r2, r4, r3
 8005384:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005386:	bfbe      	ittt	lt
 8005388:	940a      	strlt	r4, [sp, #40]	; 0x28
 800538a:	189b      	addlt	r3, r3, r2
 800538c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	bfb8      	it	lt
 8005392:	2400      	movlt	r4, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfbb      	ittet	lt
 8005398:	9b06      	ldrlt	r3, [sp, #24]
 800539a:	9a08      	ldrlt	r2, [sp, #32]
 800539c:	9f06      	ldrge	r7, [sp, #24]
 800539e:	1a9f      	sublt	r7, r3, r2
 80053a0:	bfac      	ite	ge
 80053a2:	9b08      	ldrge	r3, [sp, #32]
 80053a4:	2300      	movlt	r3, #0
 80053a6:	e73f      	b.n	8005228 <_dtoa_r+0x748>
 80053a8:	3fe00000 	.word	0x3fe00000
 80053ac:	40240000 	.word	0x40240000
 80053b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053b2:	9f06      	ldr	r7, [sp, #24]
 80053b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80053b6:	e742      	b.n	800523e <_dtoa_r+0x75e>
 80053b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ba:	e76b      	b.n	8005294 <_dtoa_r+0x7b4>
 80053bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053be:	2b01      	cmp	r3, #1
 80053c0:	dc19      	bgt.n	80053f6 <_dtoa_r+0x916>
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	b9bb      	cbnz	r3, 80053f6 <_dtoa_r+0x916>
 80053c6:	9b05      	ldr	r3, [sp, #20]
 80053c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053cc:	b99b      	cbnz	r3, 80053f6 <_dtoa_r+0x916>
 80053ce:	9b05      	ldr	r3, [sp, #20]
 80053d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d4:	0d1b      	lsrs	r3, r3, #20
 80053d6:	051b      	lsls	r3, r3, #20
 80053d8:	b183      	cbz	r3, 80053fc <_dtoa_r+0x91c>
 80053da:	f04f 0801 	mov.w	r8, #1
 80053de:	9b06      	ldr	r3, [sp, #24]
 80053e0:	3301      	adds	r3, #1
 80053e2:	9306      	str	r3, [sp, #24]
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	3301      	adds	r3, #1
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af6a 	bne.w	80052c6 <_dtoa_r+0x7e6>
 80053f2:	2001      	movs	r0, #1
 80053f4:	e76f      	b.n	80052d6 <_dtoa_r+0x7f6>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	e7f6      	b.n	80053ea <_dtoa_r+0x90a>
 80053fc:	4698      	mov	r8, r3
 80053fe:	e7f4      	b.n	80053ea <_dtoa_r+0x90a>
 8005400:	f43f af7d 	beq.w	80052fe <_dtoa_r+0x81e>
 8005404:	4618      	mov	r0, r3
 8005406:	301c      	adds	r0, #28
 8005408:	e772      	b.n	80052f0 <_dtoa_r+0x810>
 800540a:	9b08      	ldr	r3, [sp, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	dc36      	bgt.n	800547e <_dtoa_r+0x99e>
 8005410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005412:	2b02      	cmp	r3, #2
 8005414:	dd33      	ble.n	800547e <_dtoa_r+0x99e>
 8005416:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	d10d      	bne.n	800543c <_dtoa_r+0x95c>
 8005420:	4621      	mov	r1, r4
 8005422:	464b      	mov	r3, r9
 8005424:	2205      	movs	r2, #5
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f9d2 	bl	80057d0 <__multadd>
 800542c:	4601      	mov	r1, r0
 800542e:	4604      	mov	r4, r0
 8005430:	4658      	mov	r0, fp
 8005432:	f000 fbe9 	bl	8005c08 <__mcmp>
 8005436:	2800      	cmp	r0, #0
 8005438:	f73f adb8 	bgt.w	8004fac <_dtoa_r+0x4cc>
 800543c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800543e:	9f03      	ldr	r7, [sp, #12]
 8005440:	ea6f 0a03 	mvn.w	sl, r3
 8005444:	f04f 0800 	mov.w	r8, #0
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f99e 	bl	800578c <_Bfree>
 8005450:	2e00      	cmp	r6, #0
 8005452:	f43f aea7 	beq.w	80051a4 <_dtoa_r+0x6c4>
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	d005      	beq.n	8005468 <_dtoa_r+0x988>
 800545c:	45b0      	cmp	r8, r6
 800545e:	d003      	beq.n	8005468 <_dtoa_r+0x988>
 8005460:	4641      	mov	r1, r8
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f992 	bl	800578c <_Bfree>
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f98e 	bl	800578c <_Bfree>
 8005470:	e698      	b.n	80051a4 <_dtoa_r+0x6c4>
 8005472:	2400      	movs	r4, #0
 8005474:	4626      	mov	r6, r4
 8005476:	e7e1      	b.n	800543c <_dtoa_r+0x95c>
 8005478:	46c2      	mov	sl, r8
 800547a:	4626      	mov	r6, r4
 800547c:	e596      	b.n	8004fac <_dtoa_r+0x4cc>
 800547e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80fd 	beq.w	8005684 <_dtoa_r+0xba4>
 800548a:	2f00      	cmp	r7, #0
 800548c:	dd05      	ble.n	800549a <_dtoa_r+0x9ba>
 800548e:	4631      	mov	r1, r6
 8005490:	463a      	mov	r2, r7
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fb48 	bl	8005b28 <__lshift>
 8005498:	4606      	mov	r6, r0
 800549a:	f1b8 0f00 	cmp.w	r8, #0
 800549e:	d05c      	beq.n	800555a <_dtoa_r+0xa7a>
 80054a0:	4628      	mov	r0, r5
 80054a2:	6871      	ldr	r1, [r6, #4]
 80054a4:	f000 f932 	bl	800570c <_Balloc>
 80054a8:	4607      	mov	r7, r0
 80054aa:	b928      	cbnz	r0, 80054b8 <_dtoa_r+0x9d8>
 80054ac:	4602      	mov	r2, r0
 80054ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054b2:	4b7f      	ldr	r3, [pc, #508]	; (80056b0 <_dtoa_r+0xbd0>)
 80054b4:	f7ff bb28 	b.w	8004b08 <_dtoa_r+0x28>
 80054b8:	6932      	ldr	r2, [r6, #16]
 80054ba:	f106 010c 	add.w	r1, r6, #12
 80054be:	3202      	adds	r2, #2
 80054c0:	0092      	lsls	r2, r2, #2
 80054c2:	300c      	adds	r0, #12
 80054c4:	f000 f914 	bl	80056f0 <memcpy>
 80054c8:	2201      	movs	r2, #1
 80054ca:	4639      	mov	r1, r7
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fb2b 	bl	8005b28 <__lshift>
 80054d2:	46b0      	mov	r8, r6
 80054d4:	4606      	mov	r6, r0
 80054d6:	9b03      	ldr	r3, [sp, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	444b      	add	r3, r9
 80054e0:	930a      	str	r3, [sp, #40]	; 0x28
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	4621      	mov	r1, r4
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4658      	mov	r0, fp
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	f7ff fa68 	bl	80049c8 <quorem>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4641      	mov	r1, r8
 80054fc:	3330      	adds	r3, #48	; 0x30
 80054fe:	9006      	str	r0, [sp, #24]
 8005500:	4658      	mov	r0, fp
 8005502:	930b      	str	r3, [sp, #44]	; 0x2c
 8005504:	f000 fb80 	bl	8005c08 <__mcmp>
 8005508:	4632      	mov	r2, r6
 800550a:	4681      	mov	r9, r0
 800550c:	4621      	mov	r1, r4
 800550e:	4628      	mov	r0, r5
 8005510:	f000 fb96 	bl	8005c40 <__mdiff>
 8005514:	68c2      	ldr	r2, [r0, #12]
 8005516:	4607      	mov	r7, r0
 8005518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551a:	bb02      	cbnz	r2, 800555e <_dtoa_r+0xa7e>
 800551c:	4601      	mov	r1, r0
 800551e:	4658      	mov	r0, fp
 8005520:	f000 fb72 	bl	8005c08 <__mcmp>
 8005524:	4602      	mov	r2, r0
 8005526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005528:	4639      	mov	r1, r7
 800552a:	4628      	mov	r0, r5
 800552c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005530:	f000 f92c 	bl	800578c <_Bfree>
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005538:	9f08      	ldr	r7, [sp, #32]
 800553a:	ea43 0102 	orr.w	r1, r3, r2
 800553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005540:	430b      	orrs	r3, r1
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	d10d      	bne.n	8005562 <_dtoa_r+0xa82>
 8005546:	2b39      	cmp	r3, #57	; 0x39
 8005548:	d029      	beq.n	800559e <_dtoa_r+0xabe>
 800554a:	f1b9 0f00 	cmp.w	r9, #0
 800554e:	dd01      	ble.n	8005554 <_dtoa_r+0xa74>
 8005550:	9b06      	ldr	r3, [sp, #24]
 8005552:	3331      	adds	r3, #49	; 0x31
 8005554:	9a04      	ldr	r2, [sp, #16]
 8005556:	7013      	strb	r3, [r2, #0]
 8005558:	e776      	b.n	8005448 <_dtoa_r+0x968>
 800555a:	4630      	mov	r0, r6
 800555c:	e7b9      	b.n	80054d2 <_dtoa_r+0x9f2>
 800555e:	2201      	movs	r2, #1
 8005560:	e7e2      	b.n	8005528 <_dtoa_r+0xa48>
 8005562:	f1b9 0f00 	cmp.w	r9, #0
 8005566:	db06      	blt.n	8005576 <_dtoa_r+0xa96>
 8005568:	9922      	ldr	r1, [sp, #136]	; 0x88
 800556a:	ea41 0909 	orr.w	r9, r1, r9
 800556e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005570:	ea59 0101 	orrs.w	r1, r9, r1
 8005574:	d120      	bne.n	80055b8 <_dtoa_r+0xad8>
 8005576:	2a00      	cmp	r2, #0
 8005578:	ddec      	ble.n	8005554 <_dtoa_r+0xa74>
 800557a:	4659      	mov	r1, fp
 800557c:	2201      	movs	r2, #1
 800557e:	4628      	mov	r0, r5
 8005580:	9308      	str	r3, [sp, #32]
 8005582:	f000 fad1 	bl	8005b28 <__lshift>
 8005586:	4621      	mov	r1, r4
 8005588:	4683      	mov	fp, r0
 800558a:	f000 fb3d 	bl	8005c08 <__mcmp>
 800558e:	2800      	cmp	r0, #0
 8005590:	9b08      	ldr	r3, [sp, #32]
 8005592:	dc02      	bgt.n	800559a <_dtoa_r+0xaba>
 8005594:	d1de      	bne.n	8005554 <_dtoa_r+0xa74>
 8005596:	07da      	lsls	r2, r3, #31
 8005598:	d5dc      	bpl.n	8005554 <_dtoa_r+0xa74>
 800559a:	2b39      	cmp	r3, #57	; 0x39
 800559c:	d1d8      	bne.n	8005550 <_dtoa_r+0xa70>
 800559e:	2339      	movs	r3, #57	; 0x39
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	7013      	strb	r3, [r2, #0]
 80055a4:	463b      	mov	r3, r7
 80055a6:	461f      	mov	r7, r3
 80055a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	2a39      	cmp	r2, #57	; 0x39
 80055b0:	d050      	beq.n	8005654 <_dtoa_r+0xb74>
 80055b2:	3201      	adds	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e747      	b.n	8005448 <_dtoa_r+0x968>
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	dd03      	ble.n	80055c4 <_dtoa_r+0xae4>
 80055bc:	2b39      	cmp	r3, #57	; 0x39
 80055be:	d0ee      	beq.n	800559e <_dtoa_r+0xabe>
 80055c0:	3301      	adds	r3, #1
 80055c2:	e7c7      	b.n	8005554 <_dtoa_r+0xa74>
 80055c4:	9a08      	ldr	r2, [sp, #32]
 80055c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055cc:	428a      	cmp	r2, r1
 80055ce:	d02a      	beq.n	8005626 <_dtoa_r+0xb46>
 80055d0:	4659      	mov	r1, fp
 80055d2:	2300      	movs	r3, #0
 80055d4:	220a      	movs	r2, #10
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f8fa 	bl	80057d0 <__multadd>
 80055dc:	45b0      	cmp	r8, r6
 80055de:	4683      	mov	fp, r0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	f04f 020a 	mov.w	r2, #10
 80055e8:	4641      	mov	r1, r8
 80055ea:	4628      	mov	r0, r5
 80055ec:	d107      	bne.n	80055fe <_dtoa_r+0xb1e>
 80055ee:	f000 f8ef 	bl	80057d0 <__multadd>
 80055f2:	4680      	mov	r8, r0
 80055f4:	4606      	mov	r6, r0
 80055f6:	9b08      	ldr	r3, [sp, #32]
 80055f8:	3301      	adds	r3, #1
 80055fa:	9308      	str	r3, [sp, #32]
 80055fc:	e775      	b.n	80054ea <_dtoa_r+0xa0a>
 80055fe:	f000 f8e7 	bl	80057d0 <__multadd>
 8005602:	4631      	mov	r1, r6
 8005604:	4680      	mov	r8, r0
 8005606:	2300      	movs	r3, #0
 8005608:	220a      	movs	r2, #10
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f8e0 	bl	80057d0 <__multadd>
 8005610:	4606      	mov	r6, r0
 8005612:	e7f0      	b.n	80055f6 <_dtoa_r+0xb16>
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	bfcc      	ite	gt
 800561a:	464f      	movgt	r7, r9
 800561c:	2701      	movle	r7, #1
 800561e:	f04f 0800 	mov.w	r8, #0
 8005622:	9a03      	ldr	r2, [sp, #12]
 8005624:	4417      	add	r7, r2
 8005626:	4659      	mov	r1, fp
 8005628:	2201      	movs	r2, #1
 800562a:	4628      	mov	r0, r5
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	f000 fa7b 	bl	8005b28 <__lshift>
 8005632:	4621      	mov	r1, r4
 8005634:	4683      	mov	fp, r0
 8005636:	f000 fae7 	bl	8005c08 <__mcmp>
 800563a:	2800      	cmp	r0, #0
 800563c:	dcb2      	bgt.n	80055a4 <_dtoa_r+0xac4>
 800563e:	d102      	bne.n	8005646 <_dtoa_r+0xb66>
 8005640:	9b08      	ldr	r3, [sp, #32]
 8005642:	07db      	lsls	r3, r3, #31
 8005644:	d4ae      	bmi.n	80055a4 <_dtoa_r+0xac4>
 8005646:	463b      	mov	r3, r7
 8005648:	461f      	mov	r7, r3
 800564a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800564e:	2a30      	cmp	r2, #48	; 0x30
 8005650:	d0fa      	beq.n	8005648 <_dtoa_r+0xb68>
 8005652:	e6f9      	b.n	8005448 <_dtoa_r+0x968>
 8005654:	9a03      	ldr	r2, [sp, #12]
 8005656:	429a      	cmp	r2, r3
 8005658:	d1a5      	bne.n	80055a6 <_dtoa_r+0xac6>
 800565a:	2331      	movs	r3, #49	; 0x31
 800565c:	f10a 0a01 	add.w	sl, sl, #1
 8005660:	e779      	b.n	8005556 <_dtoa_r+0xa76>
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <_dtoa_r+0xbd4>)
 8005664:	f7ff baa8 	b.w	8004bb8 <_dtoa_r+0xd8>
 8005668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800566a:	2b00      	cmp	r3, #0
 800566c:	f47f aa81 	bne.w	8004b72 <_dtoa_r+0x92>
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <_dtoa_r+0xbd8>)
 8005672:	f7ff baa1 	b.w	8004bb8 <_dtoa_r+0xd8>
 8005676:	f1b9 0f00 	cmp.w	r9, #0
 800567a:	dc03      	bgt.n	8005684 <_dtoa_r+0xba4>
 800567c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800567e:	2b02      	cmp	r3, #2
 8005680:	f73f aecb 	bgt.w	800541a <_dtoa_r+0x93a>
 8005684:	9f03      	ldr	r7, [sp, #12]
 8005686:	4621      	mov	r1, r4
 8005688:	4658      	mov	r0, fp
 800568a:	f7ff f99d 	bl	80049c8 <quorem>
 800568e:	9a03      	ldr	r2, [sp, #12]
 8005690:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005694:	f807 3b01 	strb.w	r3, [r7], #1
 8005698:	1aba      	subs	r2, r7, r2
 800569a:	4591      	cmp	r9, r2
 800569c:	ddba      	ble.n	8005614 <_dtoa_r+0xb34>
 800569e:	4659      	mov	r1, fp
 80056a0:	2300      	movs	r3, #0
 80056a2:	220a      	movs	r2, #10
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 f893 	bl	80057d0 <__multadd>
 80056aa:	4683      	mov	fp, r0
 80056ac:	e7eb      	b.n	8005686 <_dtoa_r+0xba6>
 80056ae:	bf00      	nop
 80056b0:	080075cf 	.word	0x080075cf
 80056b4:	0800752c 	.word	0x0800752c
 80056b8:	08007550 	.word	0x08007550

080056bc <_localeconv_r>:
 80056bc:	4800      	ldr	r0, [pc, #0]	; (80056c0 <_localeconv_r+0x4>)
 80056be:	4770      	bx	lr
 80056c0:	20000160 	.word	0x20000160

080056c4 <malloc>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <malloc+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 bc1d 	b.w	8005f08 <_malloc_r>
 80056ce:	bf00      	nop
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <memchr>:
 80056d4:	4603      	mov	r3, r0
 80056d6:	b510      	push	{r4, lr}
 80056d8:	b2c9      	uxtb	r1, r1
 80056da:	4402      	add	r2, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	d101      	bne.n	80056e6 <memchr+0x12>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e003      	b.n	80056ee <memchr+0x1a>
 80056e6:	7804      	ldrb	r4, [r0, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	428c      	cmp	r4, r1
 80056ec:	d1f6      	bne.n	80056dc <memchr+0x8>
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <memcpy>:
 80056f0:	440a      	add	r2, r1
 80056f2:	4291      	cmp	r1, r2
 80056f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056f8:	d100      	bne.n	80056fc <memcpy+0xc>
 80056fa:	4770      	bx	lr
 80056fc:	b510      	push	{r4, lr}
 80056fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005702:	4291      	cmp	r1, r2
 8005704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005708:	d1f9      	bne.n	80056fe <memcpy+0xe>
 800570a:	bd10      	pop	{r4, pc}

0800570c <_Balloc>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	b976      	cbnz	r6, 8005734 <_Balloc+0x28>
 8005716:	2010      	movs	r0, #16
 8005718:	f7ff ffd4 	bl	80056c4 <malloc>
 800571c:	4602      	mov	r2, r0
 800571e:	6260      	str	r0, [r4, #36]	; 0x24
 8005720:	b920      	cbnz	r0, 800572c <_Balloc+0x20>
 8005722:	2166      	movs	r1, #102	; 0x66
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <_Balloc+0x78>)
 8005726:	4818      	ldr	r0, [pc, #96]	; (8005788 <_Balloc+0x7c>)
 8005728:	f000 fdce 	bl	80062c8 <__assert_func>
 800572c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005730:	6006      	str	r6, [r0, #0]
 8005732:	60c6      	str	r6, [r0, #12]
 8005734:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005736:	68f3      	ldr	r3, [r6, #12]
 8005738:	b183      	cbz	r3, 800575c <_Balloc+0x50>
 800573a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005742:	b9b8      	cbnz	r0, 8005774 <_Balloc+0x68>
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f605 	lsl.w	r6, r1, r5
 800574a:	1d72      	adds	r2, r6, #5
 800574c:	4620      	mov	r0, r4
 800574e:	0092      	lsls	r2, r2, #2
 8005750:	f000 fb5e 	bl	8005e10 <_calloc_r>
 8005754:	b160      	cbz	r0, 8005770 <_Balloc+0x64>
 8005756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800575a:	e00e      	b.n	800577a <_Balloc+0x6e>
 800575c:	2221      	movs	r2, #33	; 0x21
 800575e:	2104      	movs	r1, #4
 8005760:	4620      	mov	r0, r4
 8005762:	f000 fb55 	bl	8005e10 <_calloc_r>
 8005766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005768:	60f0      	str	r0, [r6, #12]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e4      	bne.n	800573a <_Balloc+0x2e>
 8005770:	2000      	movs	r0, #0
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800577a:	2300      	movs	r3, #0
 800577c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005780:	e7f7      	b.n	8005772 <_Balloc+0x66>
 8005782:	bf00      	nop
 8005784:	0800755d 	.word	0x0800755d
 8005788:	080075e0 	.word	0x080075e0

0800578c <_Bfree>:
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005790:	4605      	mov	r5, r0
 8005792:	460c      	mov	r4, r1
 8005794:	b976      	cbnz	r6, 80057b4 <_Bfree+0x28>
 8005796:	2010      	movs	r0, #16
 8005798:	f7ff ff94 	bl	80056c4 <malloc>
 800579c:	4602      	mov	r2, r0
 800579e:	6268      	str	r0, [r5, #36]	; 0x24
 80057a0:	b920      	cbnz	r0, 80057ac <_Bfree+0x20>
 80057a2:	218a      	movs	r1, #138	; 0x8a
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <_Bfree+0x3c>)
 80057a6:	4809      	ldr	r0, [pc, #36]	; (80057cc <_Bfree+0x40>)
 80057a8:	f000 fd8e 	bl	80062c8 <__assert_func>
 80057ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057b0:	6006      	str	r6, [r0, #0]
 80057b2:	60c6      	str	r6, [r0, #12]
 80057b4:	b13c      	cbz	r4, 80057c6 <_Bfree+0x3a>
 80057b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057b8:	6862      	ldr	r2, [r4, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057c0:	6021      	str	r1, [r4, #0]
 80057c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	0800755d 	.word	0x0800755d
 80057cc:	080075e0 	.word	0x080075e0

080057d0 <__multadd>:
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	461e      	mov	r6, r3
 80057da:	2000      	movs	r0, #0
 80057dc:	690d      	ldr	r5, [r1, #16]
 80057de:	f101 0c14 	add.w	ip, r1, #20
 80057e2:	f8dc 3000 	ldr.w	r3, [ip]
 80057e6:	3001      	adds	r0, #1
 80057e8:	b299      	uxth	r1, r3
 80057ea:	fb02 6101 	mla	r1, r2, r1, r6
 80057ee:	0c1e      	lsrs	r6, r3, #16
 80057f0:	0c0b      	lsrs	r3, r1, #16
 80057f2:	fb02 3306 	mla	r3, r2, r6, r3
 80057f6:	b289      	uxth	r1, r1
 80057f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057fc:	4285      	cmp	r5, r0
 80057fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005802:	f84c 1b04 	str.w	r1, [ip], #4
 8005806:	dcec      	bgt.n	80057e2 <__multadd+0x12>
 8005808:	b30e      	cbz	r6, 800584e <__multadd+0x7e>
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc19      	bgt.n	8005844 <__multadd+0x74>
 8005810:	6861      	ldr	r1, [r4, #4]
 8005812:	4638      	mov	r0, r7
 8005814:	3101      	adds	r1, #1
 8005816:	f7ff ff79 	bl	800570c <_Balloc>
 800581a:	4680      	mov	r8, r0
 800581c:	b928      	cbnz	r0, 800582a <__multadd+0x5a>
 800581e:	4602      	mov	r2, r0
 8005820:	21b5      	movs	r1, #181	; 0xb5
 8005822:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <__multadd+0x84>)
 8005824:	480c      	ldr	r0, [pc, #48]	; (8005858 <__multadd+0x88>)
 8005826:	f000 fd4f 	bl	80062c8 <__assert_func>
 800582a:	6922      	ldr	r2, [r4, #16]
 800582c:	f104 010c 	add.w	r1, r4, #12
 8005830:	3202      	adds	r2, #2
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	300c      	adds	r0, #12
 8005836:	f7ff ff5b 	bl	80056f0 <memcpy>
 800583a:	4621      	mov	r1, r4
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff ffa5 	bl	800578c <_Bfree>
 8005842:	4644      	mov	r4, r8
 8005844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005848:	3501      	adds	r5, #1
 800584a:	615e      	str	r6, [r3, #20]
 800584c:	6125      	str	r5, [r4, #16]
 800584e:	4620      	mov	r0, r4
 8005850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005854:	080075cf 	.word	0x080075cf
 8005858:	080075e0 	.word	0x080075e0

0800585c <__hi0bits>:
 800585c:	0c02      	lsrs	r2, r0, #16
 800585e:	0412      	lsls	r2, r2, #16
 8005860:	4603      	mov	r3, r0
 8005862:	b9ca      	cbnz	r2, 8005898 <__hi0bits+0x3c>
 8005864:	0403      	lsls	r3, r0, #16
 8005866:	2010      	movs	r0, #16
 8005868:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800586c:	bf04      	itt	eq
 800586e:	021b      	lsleq	r3, r3, #8
 8005870:	3008      	addeq	r0, #8
 8005872:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005876:	bf04      	itt	eq
 8005878:	011b      	lsleq	r3, r3, #4
 800587a:	3004      	addeq	r0, #4
 800587c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005880:	bf04      	itt	eq
 8005882:	009b      	lsleq	r3, r3, #2
 8005884:	3002      	addeq	r0, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	db05      	blt.n	8005896 <__hi0bits+0x3a>
 800588a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800588e:	f100 0001 	add.w	r0, r0, #1
 8005892:	bf08      	it	eq
 8005894:	2020      	moveq	r0, #32
 8005896:	4770      	bx	lr
 8005898:	2000      	movs	r0, #0
 800589a:	e7e5      	b.n	8005868 <__hi0bits+0xc>

0800589c <__lo0bits>:
 800589c:	6803      	ldr	r3, [r0, #0]
 800589e:	4602      	mov	r2, r0
 80058a0:	f013 0007 	ands.w	r0, r3, #7
 80058a4:	d00b      	beq.n	80058be <__lo0bits+0x22>
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	d421      	bmi.n	80058ee <__lo0bits+0x52>
 80058aa:	0798      	lsls	r0, r3, #30
 80058ac:	bf49      	itett	mi
 80058ae:	085b      	lsrmi	r3, r3, #1
 80058b0:	089b      	lsrpl	r3, r3, #2
 80058b2:	2001      	movmi	r0, #1
 80058b4:	6013      	strmi	r3, [r2, #0]
 80058b6:	bf5c      	itt	pl
 80058b8:	2002      	movpl	r0, #2
 80058ba:	6013      	strpl	r3, [r2, #0]
 80058bc:	4770      	bx	lr
 80058be:	b299      	uxth	r1, r3
 80058c0:	b909      	cbnz	r1, 80058c6 <__lo0bits+0x2a>
 80058c2:	2010      	movs	r0, #16
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	b2d9      	uxtb	r1, r3
 80058c8:	b909      	cbnz	r1, 80058ce <__lo0bits+0x32>
 80058ca:	3008      	adds	r0, #8
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	0719      	lsls	r1, r3, #28
 80058d0:	bf04      	itt	eq
 80058d2:	091b      	lsreq	r3, r3, #4
 80058d4:	3004      	addeq	r0, #4
 80058d6:	0799      	lsls	r1, r3, #30
 80058d8:	bf04      	itt	eq
 80058da:	089b      	lsreq	r3, r3, #2
 80058dc:	3002      	addeq	r0, #2
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d403      	bmi.n	80058ea <__lo0bits+0x4e>
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f100 0001 	add.w	r0, r0, #1
 80058e8:	d003      	beq.n	80058f2 <__lo0bits+0x56>
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4770      	bx	lr
 80058ee:	2000      	movs	r0, #0
 80058f0:	4770      	bx	lr
 80058f2:	2020      	movs	r0, #32
 80058f4:	4770      	bx	lr
	...

080058f8 <__i2b>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	460c      	mov	r4, r1
 80058fc:	2101      	movs	r1, #1
 80058fe:	f7ff ff05 	bl	800570c <_Balloc>
 8005902:	4602      	mov	r2, r0
 8005904:	b928      	cbnz	r0, 8005912 <__i2b+0x1a>
 8005906:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <__i2b+0x24>)
 800590c:	4804      	ldr	r0, [pc, #16]	; (8005920 <__i2b+0x28>)
 800590e:	f000 fcdb 	bl	80062c8 <__assert_func>
 8005912:	2301      	movs	r3, #1
 8005914:	6144      	str	r4, [r0, #20]
 8005916:	6103      	str	r3, [r0, #16]
 8005918:	bd10      	pop	{r4, pc}
 800591a:	bf00      	nop
 800591c:	080075cf 	.word	0x080075cf
 8005920:	080075e0 	.word	0x080075e0

08005924 <__multiply>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4691      	mov	r9, r2
 800592a:	690a      	ldr	r2, [r1, #16]
 800592c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005930:	460c      	mov	r4, r1
 8005932:	429a      	cmp	r2, r3
 8005934:	bfbe      	ittt	lt
 8005936:	460b      	movlt	r3, r1
 8005938:	464c      	movlt	r4, r9
 800593a:	4699      	movlt	r9, r3
 800593c:	6927      	ldr	r7, [r4, #16]
 800593e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	eb07 060a 	add.w	r6, r7, sl
 800594a:	42b3      	cmp	r3, r6
 800594c:	b085      	sub	sp, #20
 800594e:	bfb8      	it	lt
 8005950:	3101      	addlt	r1, #1
 8005952:	f7ff fedb 	bl	800570c <_Balloc>
 8005956:	b930      	cbnz	r0, 8005966 <__multiply+0x42>
 8005958:	4602      	mov	r2, r0
 800595a:	f240 115d 	movw	r1, #349	; 0x15d
 800595e:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <__multiply+0x148>)
 8005960:	4843      	ldr	r0, [pc, #268]	; (8005a70 <__multiply+0x14c>)
 8005962:	f000 fcb1 	bl	80062c8 <__assert_func>
 8005966:	f100 0514 	add.w	r5, r0, #20
 800596a:	462b      	mov	r3, r5
 800596c:	2200      	movs	r2, #0
 800596e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005972:	4543      	cmp	r3, r8
 8005974:	d321      	bcc.n	80059ba <__multiply+0x96>
 8005976:	f104 0314 	add.w	r3, r4, #20
 800597a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800597e:	f109 0314 	add.w	r3, r9, #20
 8005982:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005986:	9202      	str	r2, [sp, #8]
 8005988:	1b3a      	subs	r2, r7, r4
 800598a:	3a15      	subs	r2, #21
 800598c:	f022 0203 	bic.w	r2, r2, #3
 8005990:	3204      	adds	r2, #4
 8005992:	f104 0115 	add.w	r1, r4, #21
 8005996:	428f      	cmp	r7, r1
 8005998:	bf38      	it	cc
 800599a:	2204      	movcc	r2, #4
 800599c:	9201      	str	r2, [sp, #4]
 800599e:	9a02      	ldr	r2, [sp, #8]
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d80c      	bhi.n	80059c0 <__multiply+0x9c>
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	dd03      	ble.n	80059b2 <__multiply+0x8e>
 80059aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d059      	beq.n	8005a66 <__multiply+0x142>
 80059b2:	6106      	str	r6, [r0, #16]
 80059b4:	b005      	add	sp, #20
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	f843 2b04 	str.w	r2, [r3], #4
 80059be:	e7d8      	b.n	8005972 <__multiply+0x4e>
 80059c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80059c4:	f1ba 0f00 	cmp.w	sl, #0
 80059c8:	d023      	beq.n	8005a12 <__multiply+0xee>
 80059ca:	46a9      	mov	r9, r5
 80059cc:	f04f 0c00 	mov.w	ip, #0
 80059d0:	f104 0e14 	add.w	lr, r4, #20
 80059d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80059d8:	f8d9 1000 	ldr.w	r1, [r9]
 80059dc:	fa1f fb82 	uxth.w	fp, r2
 80059e0:	b289      	uxth	r1, r1
 80059e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80059e6:	4461      	add	r1, ip
 80059e8:	f8d9 c000 	ldr.w	ip, [r9]
 80059ec:	0c12      	lsrs	r2, r2, #16
 80059ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059f2:	fb0a c202 	mla	r2, sl, r2, ip
 80059f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059fa:	b289      	uxth	r1, r1
 80059fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a00:	4577      	cmp	r7, lr
 8005a02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a06:	f849 1b04 	str.w	r1, [r9], #4
 8005a0a:	d8e3      	bhi.n	80059d4 <__multiply+0xb0>
 8005a0c:	9a01      	ldr	r2, [sp, #4]
 8005a0e:	f845 c002 	str.w	ip, [r5, r2]
 8005a12:	9a03      	ldr	r2, [sp, #12]
 8005a14:	3304      	adds	r3, #4
 8005a16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	d020      	beq.n	8005a62 <__multiply+0x13e>
 8005a20:	46ae      	mov	lr, r5
 8005a22:	f04f 0a00 	mov.w	sl, #0
 8005a26:	6829      	ldr	r1, [r5, #0]
 8005a28:	f104 0c14 	add.w	ip, r4, #20
 8005a2c:	f8bc b000 	ldrh.w	fp, [ip]
 8005a30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a34:	b289      	uxth	r1, r1
 8005a36:	fb09 220b 	mla	r2, r9, fp, r2
 8005a3a:	4492      	add	sl, r2
 8005a3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005a40:	f84e 1b04 	str.w	r1, [lr], #4
 8005a44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005a48:	f8be 1000 	ldrh.w	r1, [lr]
 8005a4c:	0c12      	lsrs	r2, r2, #16
 8005a4e:	fb09 1102 	mla	r1, r9, r2, r1
 8005a52:	4567      	cmp	r7, ip
 8005a54:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a5c:	d8e6      	bhi.n	8005a2c <__multiply+0x108>
 8005a5e:	9a01      	ldr	r2, [sp, #4]
 8005a60:	50a9      	str	r1, [r5, r2]
 8005a62:	3504      	adds	r5, #4
 8005a64:	e79b      	b.n	800599e <__multiply+0x7a>
 8005a66:	3e01      	subs	r6, #1
 8005a68:	e79d      	b.n	80059a6 <__multiply+0x82>
 8005a6a:	bf00      	nop
 8005a6c:	080075cf 	.word	0x080075cf
 8005a70:	080075e0 	.word	0x080075e0

08005a74 <__pow5mult>:
 8005a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	4615      	mov	r5, r2
 8005a7a:	f012 0203 	ands.w	r2, r2, #3
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	d007      	beq.n	8005a94 <__pow5mult+0x20>
 8005a84:	4c25      	ldr	r4, [pc, #148]	; (8005b1c <__pow5mult+0xa8>)
 8005a86:	3a01      	subs	r2, #1
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a8e:	f7ff fe9f 	bl	80057d0 <__multadd>
 8005a92:	4607      	mov	r7, r0
 8005a94:	10ad      	asrs	r5, r5, #2
 8005a96:	d03d      	beq.n	8005b14 <__pow5mult+0xa0>
 8005a98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a9a:	b97c      	cbnz	r4, 8005abc <__pow5mult+0x48>
 8005a9c:	2010      	movs	r0, #16
 8005a9e:	f7ff fe11 	bl	80056c4 <malloc>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6270      	str	r0, [r6, #36]	; 0x24
 8005aa6:	b928      	cbnz	r0, 8005ab4 <__pow5mult+0x40>
 8005aa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005aac:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <__pow5mult+0xac>)
 8005aae:	481d      	ldr	r0, [pc, #116]	; (8005b24 <__pow5mult+0xb0>)
 8005ab0:	f000 fc0a 	bl	80062c8 <__assert_func>
 8005ab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab8:	6004      	str	r4, [r0, #0]
 8005aba:	60c4      	str	r4, [r0, #12]
 8005abc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ac4:	b94c      	cbnz	r4, 8005ada <__pow5mult+0x66>
 8005ac6:	f240 2171 	movw	r1, #625	; 0x271
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ff14 	bl	80058f8 <__i2b>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ad8:	6003      	str	r3, [r0, #0]
 8005ada:	f04f 0900 	mov.w	r9, #0
 8005ade:	07eb      	lsls	r3, r5, #31
 8005ae0:	d50a      	bpl.n	8005af8 <__pow5mult+0x84>
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f7ff ff1c 	bl	8005924 <__multiply>
 8005aec:	4680      	mov	r8, r0
 8005aee:	4639      	mov	r1, r7
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff fe4b 	bl	800578c <_Bfree>
 8005af6:	4647      	mov	r7, r8
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	d00b      	beq.n	8005b14 <__pow5mult+0xa0>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	b938      	cbnz	r0, 8005b10 <__pow5mult+0x9c>
 8005b00:	4622      	mov	r2, r4
 8005b02:	4621      	mov	r1, r4
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff ff0d 	bl	8005924 <__multiply>
 8005b0a:	6020      	str	r0, [r4, #0]
 8005b0c:	f8c0 9000 	str.w	r9, [r0]
 8005b10:	4604      	mov	r4, r0
 8005b12:	e7e4      	b.n	8005ade <__pow5mult+0x6a>
 8005b14:	4638      	mov	r0, r7
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08007730 	.word	0x08007730
 8005b20:	0800755d 	.word	0x0800755d
 8005b24:	080075e0 	.word	0x080075e0

08005b28 <__lshift>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4691      	mov	r9, r2
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6849      	ldr	r1, [r1, #4]
 8005b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b3a:	68a3      	ldr	r3, [r4, #8]
 8005b3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b40:	f108 0601 	add.w	r6, r8, #1
 8005b44:	42b3      	cmp	r3, r6
 8005b46:	db0b      	blt.n	8005b60 <__lshift+0x38>
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f7ff fddf 	bl	800570c <_Balloc>
 8005b4e:	4605      	mov	r5, r0
 8005b50:	b948      	cbnz	r0, 8005b66 <__lshift+0x3e>
 8005b52:	4602      	mov	r2, r0
 8005b54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <__lshift+0xd8>)
 8005b5a:	482a      	ldr	r0, [pc, #168]	; (8005c04 <__lshift+0xdc>)
 8005b5c:	f000 fbb4 	bl	80062c8 <__assert_func>
 8005b60:	3101      	adds	r1, #1
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	e7ee      	b.n	8005b44 <__lshift+0x1c>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f100 0114 	add.w	r1, r0, #20
 8005b6c:	f100 0210 	add.w	r2, r0, #16
 8005b70:	4618      	mov	r0, r3
 8005b72:	4553      	cmp	r3, sl
 8005b74:	db37      	blt.n	8005be6 <__lshift+0xbe>
 8005b76:	6920      	ldr	r0, [r4, #16]
 8005b78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b7c:	f104 0314 	add.w	r3, r4, #20
 8005b80:	f019 091f 	ands.w	r9, r9, #31
 8005b84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b8c:	d02f      	beq.n	8005bee <__lshift+0xc6>
 8005b8e:	468a      	mov	sl, r1
 8005b90:	f04f 0c00 	mov.w	ip, #0
 8005b94:	f1c9 0e20 	rsb	lr, r9, #32
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	fa02 f209 	lsl.w	r2, r2, r9
 8005b9e:	ea42 020c 	orr.w	r2, r2, ip
 8005ba2:	f84a 2b04 	str.w	r2, [sl], #4
 8005ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005baa:	4298      	cmp	r0, r3
 8005bac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005bb0:	d8f2      	bhi.n	8005b98 <__lshift+0x70>
 8005bb2:	1b03      	subs	r3, r0, r4
 8005bb4:	3b15      	subs	r3, #21
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	3304      	adds	r3, #4
 8005bbc:	f104 0215 	add.w	r2, r4, #21
 8005bc0:	4290      	cmp	r0, r2
 8005bc2:	bf38      	it	cc
 8005bc4:	2304      	movcc	r3, #4
 8005bc6:	f841 c003 	str.w	ip, [r1, r3]
 8005bca:	f1bc 0f00 	cmp.w	ip, #0
 8005bce:	d001      	beq.n	8005bd4 <__lshift+0xac>
 8005bd0:	f108 0602 	add.w	r6, r8, #2
 8005bd4:	3e01      	subs	r6, #1
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	4621      	mov	r1, r4
 8005bda:	612e      	str	r6, [r5, #16]
 8005bdc:	f7ff fdd6 	bl	800578c <_Bfree>
 8005be0:	4628      	mov	r0, r5
 8005be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005bea:	3301      	adds	r3, #1
 8005bec:	e7c1      	b.n	8005b72 <__lshift+0x4a>
 8005bee:	3904      	subs	r1, #4
 8005bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf4:	4298      	cmp	r0, r3
 8005bf6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bfa:	d8f9      	bhi.n	8005bf0 <__lshift+0xc8>
 8005bfc:	e7ea      	b.n	8005bd4 <__lshift+0xac>
 8005bfe:	bf00      	nop
 8005c00:	080075cf 	.word	0x080075cf
 8005c04:	080075e0 	.word	0x080075e0

08005c08 <__mcmp>:
 8005c08:	4603      	mov	r3, r0
 8005c0a:	690a      	ldr	r2, [r1, #16]
 8005c0c:	6900      	ldr	r0, [r0, #16]
 8005c0e:	b530      	push	{r4, r5, lr}
 8005c10:	1a80      	subs	r0, r0, r2
 8005c12:	d10d      	bne.n	8005c30 <__mcmp+0x28>
 8005c14:	3314      	adds	r3, #20
 8005c16:	3114      	adds	r1, #20
 8005c18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c28:	4295      	cmp	r5, r2
 8005c2a:	d002      	beq.n	8005c32 <__mcmp+0x2a>
 8005c2c:	d304      	bcc.n	8005c38 <__mcmp+0x30>
 8005c2e:	2001      	movs	r0, #1
 8005c30:	bd30      	pop	{r4, r5, pc}
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	d3f4      	bcc.n	8005c20 <__mcmp+0x18>
 8005c36:	e7fb      	b.n	8005c30 <__mcmp+0x28>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e7f8      	b.n	8005c30 <__mcmp+0x28>
	...

08005c40 <__mdiff>:
 8005c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	460d      	mov	r5, r1
 8005c46:	4607      	mov	r7, r0
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	f7ff ffdb 	bl	8005c08 <__mcmp>
 8005c52:	1e06      	subs	r6, r0, #0
 8005c54:	d111      	bne.n	8005c7a <__mdiff+0x3a>
 8005c56:	4631      	mov	r1, r6
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f7ff fd57 	bl	800570c <_Balloc>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	b928      	cbnz	r0, 8005c6e <__mdiff+0x2e>
 8005c62:	f240 2132 	movw	r1, #562	; 0x232
 8005c66:	4b3a      	ldr	r3, [pc, #232]	; (8005d50 <__mdiff+0x110>)
 8005c68:	483a      	ldr	r0, [pc, #232]	; (8005d54 <__mdiff+0x114>)
 8005c6a:	f000 fb2d 	bl	80062c8 <__assert_func>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c74:	4610      	mov	r0, r2
 8005c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	bfa4      	itt	ge
 8005c7c:	4623      	movge	r3, r4
 8005c7e:	462c      	movge	r4, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	6861      	ldr	r1, [r4, #4]
 8005c84:	bfa6      	itte	ge
 8005c86:	461d      	movge	r5, r3
 8005c88:	2600      	movge	r6, #0
 8005c8a:	2601      	movlt	r6, #1
 8005c8c:	f7ff fd3e 	bl	800570c <_Balloc>
 8005c90:	4602      	mov	r2, r0
 8005c92:	b918      	cbnz	r0, 8005c9c <__mdiff+0x5c>
 8005c94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <__mdiff+0x110>)
 8005c9a:	e7e5      	b.n	8005c68 <__mdiff+0x28>
 8005c9c:	f102 0814 	add.w	r8, r2, #20
 8005ca0:	46c2      	mov	sl, r8
 8005ca2:	f04f 0c00 	mov.w	ip, #0
 8005ca6:	6927      	ldr	r7, [r4, #16]
 8005ca8:	60c6      	str	r6, [r0, #12]
 8005caa:	692e      	ldr	r6, [r5, #16]
 8005cac:	f104 0014 	add.w	r0, r4, #20
 8005cb0:	f105 0914 	add.w	r9, r5, #20
 8005cb4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005cb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005cbc:	3410      	adds	r4, #16
 8005cbe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005cc2:	f859 3b04 	ldr.w	r3, [r9], #4
 8005cc6:	fa1f f18b 	uxth.w	r1, fp
 8005cca:	448c      	add	ip, r1
 8005ccc:	b299      	uxth	r1, r3
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	ebac 0101 	sub.w	r1, ip, r1
 8005cd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005cd8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005cdc:	b289      	uxth	r1, r1
 8005cde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ce2:	454e      	cmp	r6, r9
 8005ce4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ce8:	f84a 3b04 	str.w	r3, [sl], #4
 8005cec:	d8e7      	bhi.n	8005cbe <__mdiff+0x7e>
 8005cee:	1b73      	subs	r3, r6, r5
 8005cf0:	3b15      	subs	r3, #21
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	3515      	adds	r5, #21
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	42ae      	cmp	r6, r5
 8005cfc:	bf38      	it	cc
 8005cfe:	2304      	movcc	r3, #4
 8005d00:	4418      	add	r0, r3
 8005d02:	4443      	add	r3, r8
 8005d04:	461e      	mov	r6, r3
 8005d06:	4605      	mov	r5, r0
 8005d08:	4575      	cmp	r5, lr
 8005d0a:	d30e      	bcc.n	8005d2a <__mdiff+0xea>
 8005d0c:	f10e 0103 	add.w	r1, lr, #3
 8005d10:	1a09      	subs	r1, r1, r0
 8005d12:	f021 0103 	bic.w	r1, r1, #3
 8005d16:	3803      	subs	r0, #3
 8005d18:	4586      	cmp	lr, r0
 8005d1a:	bf38      	it	cc
 8005d1c:	2100      	movcc	r1, #0
 8005d1e:	4419      	add	r1, r3
 8005d20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005d24:	b18b      	cbz	r3, 8005d4a <__mdiff+0x10a>
 8005d26:	6117      	str	r7, [r2, #16]
 8005d28:	e7a4      	b.n	8005c74 <__mdiff+0x34>
 8005d2a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005d2e:	fa1f f188 	uxth.w	r1, r8
 8005d32:	4461      	add	r1, ip
 8005d34:	140c      	asrs	r4, r1, #16
 8005d36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d3a:	b289      	uxth	r1, r1
 8005d3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d40:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005d44:	f846 1b04 	str.w	r1, [r6], #4
 8005d48:	e7de      	b.n	8005d08 <__mdiff+0xc8>
 8005d4a:	3f01      	subs	r7, #1
 8005d4c:	e7e8      	b.n	8005d20 <__mdiff+0xe0>
 8005d4e:	bf00      	nop
 8005d50:	080075cf 	.word	0x080075cf
 8005d54:	080075e0 	.word	0x080075e0

08005d58 <__d2b>:
 8005d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005d62:	4690      	mov	r8, r2
 8005d64:	461d      	mov	r5, r3
 8005d66:	f7ff fcd1 	bl	800570c <_Balloc>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	b930      	cbnz	r0, 8005d7c <__d2b+0x24>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	f240 310a 	movw	r1, #778	; 0x30a
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <__d2b+0xb0>)
 8005d76:	4825      	ldr	r0, [pc, #148]	; (8005e0c <__d2b+0xb4>)
 8005d78:	f000 faa6 	bl	80062c8 <__assert_func>
 8005d7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d84:	bb2d      	cbnz	r5, 8005dd2 <__d2b+0x7a>
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f1b8 0300 	subs.w	r3, r8, #0
 8005d8c:	d026      	beq.n	8005ddc <__d2b+0x84>
 8005d8e:	4668      	mov	r0, sp
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	f7ff fd83 	bl	800589c <__lo0bits>
 8005d96:	9900      	ldr	r1, [sp, #0]
 8005d98:	b1f0      	cbz	r0, 8005dd8 <__d2b+0x80>
 8005d9a:	9a01      	ldr	r2, [sp, #4]
 8005d9c:	f1c0 0320 	rsb	r3, r0, #32
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	430b      	orrs	r3, r1
 8005da6:	40c2      	lsrs	r2, r0
 8005da8:	6163      	str	r3, [r4, #20]
 8005daa:	9201      	str	r2, [sp, #4]
 8005dac:	9b01      	ldr	r3, [sp, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf14      	ite	ne
 8005db2:	2102      	movne	r1, #2
 8005db4:	2101      	moveq	r1, #1
 8005db6:	61a3      	str	r3, [r4, #24]
 8005db8:	6121      	str	r1, [r4, #16]
 8005dba:	b1c5      	cbz	r5, 8005dee <__d2b+0x96>
 8005dbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005dc0:	4405      	add	r5, r0
 8005dc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005dc6:	603d      	str	r5, [r7, #0]
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	b002      	add	sp, #8
 8005dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dd6:	e7d6      	b.n	8005d86 <__d2b+0x2e>
 8005dd8:	6161      	str	r1, [r4, #20]
 8005dda:	e7e7      	b.n	8005dac <__d2b+0x54>
 8005ddc:	a801      	add	r0, sp, #4
 8005dde:	f7ff fd5d 	bl	800589c <__lo0bits>
 8005de2:	2101      	movs	r1, #1
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	6121      	str	r1, [r4, #16]
 8005de8:	6163      	str	r3, [r4, #20]
 8005dea:	3020      	adds	r0, #32
 8005dec:	e7e5      	b.n	8005dba <__d2b+0x62>
 8005dee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005df2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005df6:	6038      	str	r0, [r7, #0]
 8005df8:	6918      	ldr	r0, [r3, #16]
 8005dfa:	f7ff fd2f 	bl	800585c <__hi0bits>
 8005dfe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005e02:	6031      	str	r1, [r6, #0]
 8005e04:	e7e1      	b.n	8005dca <__d2b+0x72>
 8005e06:	bf00      	nop
 8005e08:	080075cf 	.word	0x080075cf
 8005e0c:	080075e0 	.word	0x080075e0

08005e10 <_calloc_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	fba1 5402 	umull	r5, r4, r1, r2
 8005e16:	b934      	cbnz	r4, 8005e26 <_calloc_r+0x16>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f000 f875 	bl	8005f08 <_malloc_r>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <_calloc_r+0x1e>
 8005e22:	4630      	mov	r0, r6
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	220c      	movs	r2, #12
 8005e28:	2600      	movs	r6, #0
 8005e2a:	6002      	str	r2, [r0, #0]
 8005e2c:	e7f9      	b.n	8005e22 <_calloc_r+0x12>
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4621      	mov	r1, r4
 8005e32:	f7fe f941 	bl	80040b8 <memset>
 8005e36:	e7f4      	b.n	8005e22 <_calloc_r+0x12>

08005e38 <_free_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d040      	beq.n	8005ec2 <_free_r+0x8a>
 8005e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e44:	1f0c      	subs	r4, r1, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfb8      	it	lt
 8005e4a:	18e4      	addlt	r4, r4, r3
 8005e4c:	f000 fa98 	bl	8006380 <__malloc_lock>
 8005e50:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <_free_r+0x8c>)
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	b933      	cbnz	r3, 8005e64 <_free_r+0x2c>
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	6014      	str	r4, [r2, #0]
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e60:	f000 ba94 	b.w	800638c <__malloc_unlock>
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d908      	bls.n	8005e7a <_free_r+0x42>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	1821      	adds	r1, r4, r0
 8005e6c:	428b      	cmp	r3, r1
 8005e6e:	bf01      	itttt	eq
 8005e70:	6819      	ldreq	r1, [r3, #0]
 8005e72:	685b      	ldreq	r3, [r3, #4]
 8005e74:	1809      	addeq	r1, r1, r0
 8005e76:	6021      	streq	r1, [r4, #0]
 8005e78:	e7ed      	b.n	8005e56 <_free_r+0x1e>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x4c>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x42>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1850      	adds	r0, r2, r1
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x6c>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	4401      	add	r1, r0
 8005e90:	1850      	adds	r0, r2, r1
 8005e92:	4283      	cmp	r3, r0
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	d1e0      	bne.n	8005e5a <_free_r+0x22>
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4401      	add	r1, r0
 8005e9e:	6011      	str	r1, [r2, #0]
 8005ea0:	6053      	str	r3, [r2, #4]
 8005ea2:	e7da      	b.n	8005e5a <_free_r+0x22>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x74>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	e7d6      	b.n	8005e5a <_free_r+0x22>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	1821      	adds	r1, r4, r0
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf01      	itttt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	1809      	addeq	r1, r1, r0
 8005eba:	6021      	streq	r1, [r4, #0]
 8005ebc:	6063      	str	r3, [r4, #4]
 8005ebe:	6054      	str	r4, [r2, #4]
 8005ec0:	e7cb      	b.n	8005e5a <_free_r+0x22>
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	200002f0 	.word	0x200002f0

08005ec8 <sbrk_aligned>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4e0e      	ldr	r6, [pc, #56]	; (8005f04 <sbrk_aligned+0x3c>)
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6831      	ldr	r1, [r6, #0]
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	b911      	cbnz	r1, 8005eda <sbrk_aligned+0x12>
 8005ed4:	f000 f9e8 	bl	80062a8 <_sbrk_r>
 8005ed8:	6030      	str	r0, [r6, #0]
 8005eda:	4621      	mov	r1, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 f9e3 	bl	80062a8 <_sbrk_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	d00a      	beq.n	8005efc <sbrk_aligned+0x34>
 8005ee6:	1cc4      	adds	r4, r0, #3
 8005ee8:	f024 0403 	bic.w	r4, r4, #3
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d007      	beq.n	8005f00 <sbrk_aligned+0x38>
 8005ef0:	1a21      	subs	r1, r4, r0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f9d8 	bl	80062a8 <_sbrk_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d101      	bne.n	8005f00 <sbrk_aligned+0x38>
 8005efc:	f04f 34ff 	mov.w	r4, #4294967295
 8005f00:	4620      	mov	r0, r4
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	200002f4 	.word	0x200002f4

08005f08 <_malloc_r>:
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	1ccd      	adds	r5, r1, #3
 8005f0e:	f025 0503 	bic.w	r5, r5, #3
 8005f12:	3508      	adds	r5, #8
 8005f14:	2d0c      	cmp	r5, #12
 8005f16:	bf38      	it	cc
 8005f18:	250c      	movcc	r5, #12
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	db01      	blt.n	8005f24 <_malloc_r+0x1c>
 8005f20:	42a9      	cmp	r1, r5
 8005f22:	d905      	bls.n	8005f30 <_malloc_r+0x28>
 8005f24:	230c      	movs	r3, #12
 8005f26:	2600      	movs	r6, #0
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f30:	4e2e      	ldr	r6, [pc, #184]	; (8005fec <_malloc_r+0xe4>)
 8005f32:	f000 fa25 	bl	8006380 <__malloc_lock>
 8005f36:	6833      	ldr	r3, [r6, #0]
 8005f38:	461c      	mov	r4, r3
 8005f3a:	bb34      	cbnz	r4, 8005f8a <_malloc_r+0x82>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff ffc2 	bl	8005ec8 <sbrk_aligned>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	4604      	mov	r4, r0
 8005f48:	d14d      	bne.n	8005fe6 <_malloc_r+0xde>
 8005f4a:	6834      	ldr	r4, [r6, #0]
 8005f4c:	4626      	mov	r6, r4
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d140      	bne.n	8005fd4 <_malloc_r+0xcc>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	4631      	mov	r1, r6
 8005f56:	4638      	mov	r0, r7
 8005f58:	eb04 0803 	add.w	r8, r4, r3
 8005f5c:	f000 f9a4 	bl	80062a8 <_sbrk_r>
 8005f60:	4580      	cmp	r8, r0
 8005f62:	d13a      	bne.n	8005fda <_malloc_r+0xd2>
 8005f64:	6821      	ldr	r1, [r4, #0]
 8005f66:	3503      	adds	r5, #3
 8005f68:	1a6d      	subs	r5, r5, r1
 8005f6a:	f025 0503 	bic.w	r5, r5, #3
 8005f6e:	3508      	adds	r5, #8
 8005f70:	2d0c      	cmp	r5, #12
 8005f72:	bf38      	it	cc
 8005f74:	250c      	movcc	r5, #12
 8005f76:	4638      	mov	r0, r7
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7ff ffa5 	bl	8005ec8 <sbrk_aligned>
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d02b      	beq.n	8005fda <_malloc_r+0xd2>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	442b      	add	r3, r5
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	e00e      	b.n	8005fa8 <_malloc_r+0xa0>
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	1b52      	subs	r2, r2, r5
 8005f8e:	d41e      	bmi.n	8005fce <_malloc_r+0xc6>
 8005f90:	2a0b      	cmp	r2, #11
 8005f92:	d916      	bls.n	8005fc2 <_malloc_r+0xba>
 8005f94:	1961      	adds	r1, r4, r5
 8005f96:	42a3      	cmp	r3, r4
 8005f98:	6025      	str	r5, [r4, #0]
 8005f9a:	bf18      	it	ne
 8005f9c:	6059      	strne	r1, [r3, #4]
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	bf08      	it	eq
 8005fa2:	6031      	streq	r1, [r6, #0]
 8005fa4:	5162      	str	r2, [r4, r5]
 8005fa6:	604b      	str	r3, [r1, #4]
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f104 060b 	add.w	r6, r4, #11
 8005fae:	f000 f9ed 	bl	800638c <__malloc_unlock>
 8005fb2:	f026 0607 	bic.w	r6, r6, #7
 8005fb6:	1d23      	adds	r3, r4, #4
 8005fb8:	1af2      	subs	r2, r6, r3
 8005fba:	d0b6      	beq.n	8005f2a <_malloc_r+0x22>
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	50a3      	str	r3, [r4, r2]
 8005fc0:	e7b3      	b.n	8005f2a <_malloc_r+0x22>
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	bf0c      	ite	eq
 8005fc8:	6032      	streq	r2, [r6, #0]
 8005fca:	605a      	strne	r2, [r3, #4]
 8005fcc:	e7ec      	b.n	8005fa8 <_malloc_r+0xa0>
 8005fce:	4623      	mov	r3, r4
 8005fd0:	6864      	ldr	r4, [r4, #4]
 8005fd2:	e7b2      	b.n	8005f3a <_malloc_r+0x32>
 8005fd4:	4634      	mov	r4, r6
 8005fd6:	6876      	ldr	r6, [r6, #4]
 8005fd8:	e7b9      	b.n	8005f4e <_malloc_r+0x46>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	4638      	mov	r0, r7
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	f000 f9d4 	bl	800638c <__malloc_unlock>
 8005fe4:	e7a1      	b.n	8005f2a <_malloc_r+0x22>
 8005fe6:	6025      	str	r5, [r4, #0]
 8005fe8:	e7de      	b.n	8005fa8 <_malloc_r+0xa0>
 8005fea:	bf00      	nop
 8005fec:	200002f0 	.word	0x200002f0

08005ff0 <__ssputs_r>:
 8005ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	688e      	ldr	r6, [r1, #8]
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	429e      	cmp	r6, r3
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4690      	mov	r8, r2
 8005ffe:	461f      	mov	r7, r3
 8006000:	d838      	bhi.n	8006074 <__ssputs_r+0x84>
 8006002:	898a      	ldrh	r2, [r1, #12]
 8006004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006008:	d032      	beq.n	8006070 <__ssputs_r+0x80>
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	6909      	ldr	r1, [r1, #16]
 800600e:	3301      	adds	r3, #1
 8006010:	eba5 0901 	sub.w	r9, r5, r1
 8006014:	6965      	ldr	r5, [r4, #20]
 8006016:	444b      	add	r3, r9
 8006018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800601c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006020:	106d      	asrs	r5, r5, #1
 8006022:	429d      	cmp	r5, r3
 8006024:	bf38      	it	cc
 8006026:	461d      	movcc	r5, r3
 8006028:	0553      	lsls	r3, r2, #21
 800602a:	d531      	bpl.n	8006090 <__ssputs_r+0xa0>
 800602c:	4629      	mov	r1, r5
 800602e:	f7ff ff6b 	bl	8005f08 <_malloc_r>
 8006032:	4606      	mov	r6, r0
 8006034:	b950      	cbnz	r0, 800604c <__ssputs_r+0x5c>
 8006036:	230c      	movs	r3, #12
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	f8ca 3000 	str.w	r3, [sl]
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	464a      	mov	r2, r9
 800604e:	6921      	ldr	r1, [r4, #16]
 8006050:	f7ff fb4e 	bl	80056f0 <memcpy>
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	6126      	str	r6, [r4, #16]
 8006062:	444e      	add	r6, r9
 8006064:	6026      	str	r6, [r4, #0]
 8006066:	463e      	mov	r6, r7
 8006068:	6165      	str	r5, [r4, #20]
 800606a:	eba5 0509 	sub.w	r5, r5, r9
 800606e:	60a5      	str	r5, [r4, #8]
 8006070:	42be      	cmp	r6, r7
 8006072:	d900      	bls.n	8006076 <__ssputs_r+0x86>
 8006074:	463e      	mov	r6, r7
 8006076:	4632      	mov	r2, r6
 8006078:	4641      	mov	r1, r8
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	f000 f966 	bl	800634c <memmove>
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	2000      	movs	r0, #0
 8006084:	1b9b      	subs	r3, r3, r6
 8006086:	60a3      	str	r3, [r4, #8]
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	4433      	add	r3, r6
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	e7db      	b.n	8006048 <__ssputs_r+0x58>
 8006090:	462a      	mov	r2, r5
 8006092:	f000 f981 	bl	8006398 <_realloc_r>
 8006096:	4606      	mov	r6, r0
 8006098:	2800      	cmp	r0, #0
 800609a:	d1e1      	bne.n	8006060 <__ssputs_r+0x70>
 800609c:	4650      	mov	r0, sl
 800609e:	6921      	ldr	r1, [r4, #16]
 80060a0:	f7ff feca 	bl	8005e38 <_free_r>
 80060a4:	e7c7      	b.n	8006036 <__ssputs_r+0x46>
	...

080060a8 <_svfiprintf_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4698      	mov	r8, r3
 80060ae:	898b      	ldrh	r3, [r1, #12]
 80060b0:	4607      	mov	r7, r0
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	460d      	mov	r5, r1
 80060b6:	4614      	mov	r4, r2
 80060b8:	b09d      	sub	sp, #116	; 0x74
 80060ba:	d50e      	bpl.n	80060da <_svfiprintf_r+0x32>
 80060bc:	690b      	ldr	r3, [r1, #16]
 80060be:	b963      	cbnz	r3, 80060da <_svfiprintf_r+0x32>
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	f7ff ff21 	bl	8005f08 <_malloc_r>
 80060c6:	6028      	str	r0, [r5, #0]
 80060c8:	6128      	str	r0, [r5, #16]
 80060ca:	b920      	cbnz	r0, 80060d6 <_svfiprintf_r+0x2e>
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e0d1      	b.n	800627a <_svfiprintf_r+0x1d2>
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	616b      	str	r3, [r5, #20]
 80060da:	2300      	movs	r3, #0
 80060dc:	9309      	str	r3, [sp, #36]	; 0x24
 80060de:	2320      	movs	r3, #32
 80060e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060e4:	2330      	movs	r3, #48	; 0x30
 80060e6:	f04f 0901 	mov.w	r9, #1
 80060ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006294 <_svfiprintf_r+0x1ec>
 80060f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060f6:	4623      	mov	r3, r4
 80060f8:	469a      	mov	sl, r3
 80060fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fe:	b10a      	cbz	r2, 8006104 <_svfiprintf_r+0x5c>
 8006100:	2a25      	cmp	r2, #37	; 0x25
 8006102:	d1f9      	bne.n	80060f8 <_svfiprintf_r+0x50>
 8006104:	ebba 0b04 	subs.w	fp, sl, r4
 8006108:	d00b      	beq.n	8006122 <_svfiprintf_r+0x7a>
 800610a:	465b      	mov	r3, fp
 800610c:	4622      	mov	r2, r4
 800610e:	4629      	mov	r1, r5
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff ff6d 	bl	8005ff0 <__ssputs_r>
 8006116:	3001      	adds	r0, #1
 8006118:	f000 80aa 	beq.w	8006270 <_svfiprintf_r+0x1c8>
 800611c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800611e:	445a      	add	r2, fp
 8006120:	9209      	str	r2, [sp, #36]	; 0x24
 8006122:	f89a 3000 	ldrb.w	r3, [sl]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80a2 	beq.w	8006270 <_svfiprintf_r+0x1c8>
 800612c:	2300      	movs	r3, #0
 800612e:	f04f 32ff 	mov.w	r2, #4294967295
 8006132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006136:	f10a 0a01 	add.w	sl, sl, #1
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	9307      	str	r3, [sp, #28]
 800613e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006142:	931a      	str	r3, [sp, #104]	; 0x68
 8006144:	4654      	mov	r4, sl
 8006146:	2205      	movs	r2, #5
 8006148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614c:	4851      	ldr	r0, [pc, #324]	; (8006294 <_svfiprintf_r+0x1ec>)
 800614e:	f7ff fac1 	bl	80056d4 <memchr>
 8006152:	9a04      	ldr	r2, [sp, #16]
 8006154:	b9d8      	cbnz	r0, 800618e <_svfiprintf_r+0xe6>
 8006156:	06d0      	lsls	r0, r2, #27
 8006158:	bf44      	itt	mi
 800615a:	2320      	movmi	r3, #32
 800615c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006160:	0711      	lsls	r1, r2, #28
 8006162:	bf44      	itt	mi
 8006164:	232b      	movmi	r3, #43	; 0x2b
 8006166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800616a:	f89a 3000 	ldrb.w	r3, [sl]
 800616e:	2b2a      	cmp	r3, #42	; 0x2a
 8006170:	d015      	beq.n	800619e <_svfiprintf_r+0xf6>
 8006172:	4654      	mov	r4, sl
 8006174:	2000      	movs	r0, #0
 8006176:	f04f 0c0a 	mov.w	ip, #10
 800617a:	9a07      	ldr	r2, [sp, #28]
 800617c:	4621      	mov	r1, r4
 800617e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006182:	3b30      	subs	r3, #48	; 0x30
 8006184:	2b09      	cmp	r3, #9
 8006186:	d94e      	bls.n	8006226 <_svfiprintf_r+0x17e>
 8006188:	b1b0      	cbz	r0, 80061b8 <_svfiprintf_r+0x110>
 800618a:	9207      	str	r2, [sp, #28]
 800618c:	e014      	b.n	80061b8 <_svfiprintf_r+0x110>
 800618e:	eba0 0308 	sub.w	r3, r0, r8
 8006192:	fa09 f303 	lsl.w	r3, r9, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	46a2      	mov	sl, r4
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	e7d2      	b.n	8006144 <_svfiprintf_r+0x9c>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9103      	str	r1, [sp, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfbb      	ittet	lt
 80061aa:	425b      	neglt	r3, r3
 80061ac:	f042 0202 	orrlt.w	r2, r2, #2
 80061b0:	9307      	strge	r3, [sp, #28]
 80061b2:	9307      	strlt	r3, [sp, #28]
 80061b4:	bfb8      	it	lt
 80061b6:	9204      	strlt	r2, [sp, #16]
 80061b8:	7823      	ldrb	r3, [r4, #0]
 80061ba:	2b2e      	cmp	r3, #46	; 0x2e
 80061bc:	d10c      	bne.n	80061d8 <_svfiprintf_r+0x130>
 80061be:	7863      	ldrb	r3, [r4, #1]
 80061c0:	2b2a      	cmp	r3, #42	; 0x2a
 80061c2:	d135      	bne.n	8006230 <_svfiprintf_r+0x188>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	3402      	adds	r4, #2
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	9203      	str	r2, [sp, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfb8      	it	lt
 80061d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d6:	9305      	str	r3, [sp, #20]
 80061d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006298 <_svfiprintf_r+0x1f0>
 80061dc:	2203      	movs	r2, #3
 80061de:	4650      	mov	r0, sl
 80061e0:	7821      	ldrb	r1, [r4, #0]
 80061e2:	f7ff fa77 	bl	80056d4 <memchr>
 80061e6:	b140      	cbz	r0, 80061fa <_svfiprintf_r+0x152>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	eba0 000a 	sub.w	r0, r0, sl
 80061ee:	fa03 f000 	lsl.w	r0, r3, r0
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	3401      	adds	r4, #1
 80061f6:	4303      	orrs	r3, r0
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fe:	2206      	movs	r2, #6
 8006200:	4826      	ldr	r0, [pc, #152]	; (800629c <_svfiprintf_r+0x1f4>)
 8006202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006206:	f7ff fa65 	bl	80056d4 <memchr>
 800620a:	2800      	cmp	r0, #0
 800620c:	d038      	beq.n	8006280 <_svfiprintf_r+0x1d8>
 800620e:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <_svfiprintf_r+0x1f8>)
 8006210:	bb1b      	cbnz	r3, 800625a <_svfiprintf_r+0x1b2>
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	3307      	adds	r3, #7
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	3308      	adds	r3, #8
 800621c:	9303      	str	r3, [sp, #12]
 800621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006220:	4433      	add	r3, r6
 8006222:	9309      	str	r3, [sp, #36]	; 0x24
 8006224:	e767      	b.n	80060f6 <_svfiprintf_r+0x4e>
 8006226:	460c      	mov	r4, r1
 8006228:	2001      	movs	r0, #1
 800622a:	fb0c 3202 	mla	r2, ip, r2, r3
 800622e:	e7a5      	b.n	800617c <_svfiprintf_r+0xd4>
 8006230:	2300      	movs	r3, #0
 8006232:	f04f 0c0a 	mov.w	ip, #10
 8006236:	4619      	mov	r1, r3
 8006238:	3401      	adds	r4, #1
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	4620      	mov	r0, r4
 800623e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006242:	3a30      	subs	r2, #48	; 0x30
 8006244:	2a09      	cmp	r2, #9
 8006246:	d903      	bls.n	8006250 <_svfiprintf_r+0x1a8>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0c5      	beq.n	80061d8 <_svfiprintf_r+0x130>
 800624c:	9105      	str	r1, [sp, #20]
 800624e:	e7c3      	b.n	80061d8 <_svfiprintf_r+0x130>
 8006250:	4604      	mov	r4, r0
 8006252:	2301      	movs	r3, #1
 8006254:	fb0c 2101 	mla	r1, ip, r1, r2
 8006258:	e7f0      	b.n	800623c <_svfiprintf_r+0x194>
 800625a:	ab03      	add	r3, sp, #12
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462a      	mov	r2, r5
 8006260:	4638      	mov	r0, r7
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <_svfiprintf_r+0x1fc>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	f7fd ffcd 	bl	8004204 <_printf_float>
 800626a:	1c42      	adds	r2, r0, #1
 800626c:	4606      	mov	r6, r0
 800626e:	d1d6      	bne.n	800621e <_svfiprintf_r+0x176>
 8006270:	89ab      	ldrh	r3, [r5, #12]
 8006272:	065b      	lsls	r3, r3, #25
 8006274:	f53f af2c 	bmi.w	80060d0 <_svfiprintf_r+0x28>
 8006278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800627a:	b01d      	add	sp, #116	; 0x74
 800627c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006280:	ab03      	add	r3, sp, #12
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	462a      	mov	r2, r5
 8006286:	4638      	mov	r0, r7
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <_svfiprintf_r+0x1fc>)
 800628a:	a904      	add	r1, sp, #16
 800628c:	f7fe fa56 	bl	800473c <_printf_i>
 8006290:	e7eb      	b.n	800626a <_svfiprintf_r+0x1c2>
 8006292:	bf00      	nop
 8006294:	0800773c 	.word	0x0800773c
 8006298:	08007742 	.word	0x08007742
 800629c:	08007746 	.word	0x08007746
 80062a0:	08004205 	.word	0x08004205
 80062a4:	08005ff1 	.word	0x08005ff1

080062a8 <_sbrk_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	2300      	movs	r3, #0
 80062ac:	4d05      	ldr	r5, [pc, #20]	; (80062c4 <_sbrk_r+0x1c>)
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fb fbc6 	bl	8001a44 <_sbrk>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_sbrk_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_sbrk_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	200002f8 	.word	0x200002f8

080062c8 <__assert_func>:
 80062c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ca:	4614      	mov	r4, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <__assert_func+0x2c>)
 80062d0:	4605      	mov	r5, r0
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68d8      	ldr	r0, [r3, #12]
 80062d6:	b14c      	cbz	r4, 80062ec <__assert_func+0x24>
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <__assert_func+0x30>)
 80062da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062de:	9100      	str	r1, [sp, #0]
 80062e0:	462b      	mov	r3, r5
 80062e2:	4906      	ldr	r1, [pc, #24]	; (80062fc <__assert_func+0x34>)
 80062e4:	f000 f80e 	bl	8006304 <fiprintf>
 80062e8:	f000 faaa 	bl	8006840 <abort>
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <__assert_func+0x38>)
 80062ee:	461c      	mov	r4, r3
 80062f0:	e7f3      	b.n	80062da <__assert_func+0x12>
 80062f2:	bf00      	nop
 80062f4:	2000000c 	.word	0x2000000c
 80062f8:	0800774d 	.word	0x0800774d
 80062fc:	0800775a 	.word	0x0800775a
 8006300:	08007788 	.word	0x08007788

08006304 <fiprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b503      	push	{r0, r1, lr}
 8006308:	4601      	mov	r1, r0
 800630a:	ab03      	add	r3, sp, #12
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <fiprintf+0x20>)
 800630e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	f000 f895 	bl	8006444 <_vfiprintf_r>
 800631a:	b002      	add	sp, #8
 800631c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006320:	b003      	add	sp, #12
 8006322:	4770      	bx	lr
 8006324:	2000000c 	.word	0x2000000c

08006328 <__ascii_mbtowc>:
 8006328:	b082      	sub	sp, #8
 800632a:	b901      	cbnz	r1, 800632e <__ascii_mbtowc+0x6>
 800632c:	a901      	add	r1, sp, #4
 800632e:	b142      	cbz	r2, 8006342 <__ascii_mbtowc+0x1a>
 8006330:	b14b      	cbz	r3, 8006346 <__ascii_mbtowc+0x1e>
 8006332:	7813      	ldrb	r3, [r2, #0]
 8006334:	600b      	str	r3, [r1, #0]
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	1e10      	subs	r0, r2, #0
 800633a:	bf18      	it	ne
 800633c:	2001      	movne	r0, #1
 800633e:	b002      	add	sp, #8
 8006340:	4770      	bx	lr
 8006342:	4610      	mov	r0, r2
 8006344:	e7fb      	b.n	800633e <__ascii_mbtowc+0x16>
 8006346:	f06f 0001 	mvn.w	r0, #1
 800634a:	e7f8      	b.n	800633e <__ascii_mbtowc+0x16>

0800634c <memmove>:
 800634c:	4288      	cmp	r0, r1
 800634e:	b510      	push	{r4, lr}
 8006350:	eb01 0402 	add.w	r4, r1, r2
 8006354:	d902      	bls.n	800635c <memmove+0x10>
 8006356:	4284      	cmp	r4, r0
 8006358:	4623      	mov	r3, r4
 800635a:	d807      	bhi.n	800636c <memmove+0x20>
 800635c:	1e43      	subs	r3, r0, #1
 800635e:	42a1      	cmp	r1, r4
 8006360:	d008      	beq.n	8006374 <memmove+0x28>
 8006362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636a:	e7f8      	b.n	800635e <memmove+0x12>
 800636c:	4601      	mov	r1, r0
 800636e:	4402      	add	r2, r0
 8006370:	428a      	cmp	r2, r1
 8006372:	d100      	bne.n	8006376 <memmove+0x2a>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637e:	e7f7      	b.n	8006370 <memmove+0x24>

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	; (8006388 <__malloc_lock+0x8>)
 8006382:	f000 bc19 	b.w	8006bb8 <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	200002fc 	.word	0x200002fc

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	; (8006394 <__malloc_unlock+0x8>)
 800638e:	f000 bc14 	b.w	8006bba <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	200002fc 	.word	0x200002fc

08006398 <_realloc_r>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	4680      	mov	r8, r0
 800639e:	4614      	mov	r4, r2
 80063a0:	460e      	mov	r6, r1
 80063a2:	b921      	cbnz	r1, 80063ae <_realloc_r+0x16>
 80063a4:	4611      	mov	r1, r2
 80063a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	f7ff bdad 	b.w	8005f08 <_malloc_r>
 80063ae:	b92a      	cbnz	r2, 80063bc <_realloc_r+0x24>
 80063b0:	f7ff fd42 	bl	8005e38 <_free_r>
 80063b4:	4625      	mov	r5, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	f000 fc64 	bl	8006c88 <_malloc_usable_size_r>
 80063c0:	4284      	cmp	r4, r0
 80063c2:	4607      	mov	r7, r0
 80063c4:	d802      	bhi.n	80063cc <_realloc_r+0x34>
 80063c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063ca:	d812      	bhi.n	80063f2 <_realloc_r+0x5a>
 80063cc:	4621      	mov	r1, r4
 80063ce:	4640      	mov	r0, r8
 80063d0:	f7ff fd9a 	bl	8005f08 <_malloc_r>
 80063d4:	4605      	mov	r5, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0ed      	beq.n	80063b6 <_realloc_r+0x1e>
 80063da:	42bc      	cmp	r4, r7
 80063dc:	4622      	mov	r2, r4
 80063de:	4631      	mov	r1, r6
 80063e0:	bf28      	it	cs
 80063e2:	463a      	movcs	r2, r7
 80063e4:	f7ff f984 	bl	80056f0 <memcpy>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7ff fd24 	bl	8005e38 <_free_r>
 80063f0:	e7e1      	b.n	80063b6 <_realloc_r+0x1e>
 80063f2:	4635      	mov	r5, r6
 80063f4:	e7df      	b.n	80063b6 <_realloc_r+0x1e>

080063f6 <__sfputc_r>:
 80063f6:	6893      	ldr	r3, [r2, #8]
 80063f8:	b410      	push	{r4}
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	6093      	str	r3, [r2, #8]
 8006400:	da07      	bge.n	8006412 <__sfputc_r+0x1c>
 8006402:	6994      	ldr	r4, [r2, #24]
 8006404:	42a3      	cmp	r3, r4
 8006406:	db01      	blt.n	800640c <__sfputc_r+0x16>
 8006408:	290a      	cmp	r1, #10
 800640a:	d102      	bne.n	8006412 <__sfputc_r+0x1c>
 800640c:	bc10      	pop	{r4}
 800640e:	f000 b949 	b.w	80066a4 <__swbuf_r>
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	1c58      	adds	r0, r3, #1
 8006416:	6010      	str	r0, [r2, #0]
 8006418:	7019      	strb	r1, [r3, #0]
 800641a:	4608      	mov	r0, r1
 800641c:	bc10      	pop	{r4}
 800641e:	4770      	bx	lr

08006420 <__sfputs_r>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	4614      	mov	r4, r2
 8006428:	18d5      	adds	r5, r2, r3
 800642a:	42ac      	cmp	r4, r5
 800642c:	d101      	bne.n	8006432 <__sfputs_r+0x12>
 800642e:	2000      	movs	r0, #0
 8006430:	e007      	b.n	8006442 <__sfputs_r+0x22>
 8006432:	463a      	mov	r2, r7
 8006434:	4630      	mov	r0, r6
 8006436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643a:	f7ff ffdc 	bl	80063f6 <__sfputc_r>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d1f3      	bne.n	800642a <__sfputs_r+0xa>
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006444 <_vfiprintf_r>:
 8006444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	460d      	mov	r5, r1
 800644a:	4614      	mov	r4, r2
 800644c:	4698      	mov	r8, r3
 800644e:	4606      	mov	r6, r0
 8006450:	b09d      	sub	sp, #116	; 0x74
 8006452:	b118      	cbz	r0, 800645c <_vfiprintf_r+0x18>
 8006454:	6983      	ldr	r3, [r0, #24]
 8006456:	b90b      	cbnz	r3, 800645c <_vfiprintf_r+0x18>
 8006458:	f000 fb10 	bl	8006a7c <__sinit>
 800645c:	4b89      	ldr	r3, [pc, #548]	; (8006684 <_vfiprintf_r+0x240>)
 800645e:	429d      	cmp	r5, r3
 8006460:	d11b      	bne.n	800649a <_vfiprintf_r+0x56>
 8006462:	6875      	ldr	r5, [r6, #4]
 8006464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <_vfiprintf_r+0x32>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <_vfiprintf_r+0x32>
 8006470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006472:	f000 fba1 	bl	8006bb8 <__retarget_lock_acquire_recursive>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	d501      	bpl.n	8006480 <_vfiprintf_r+0x3c>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	b9eb      	cbnz	r3, 80064bc <_vfiprintf_r+0x78>
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f96e 	bl	8006764 <__swsetup_r>
 8006488:	b1c0      	cbz	r0, 80064bc <_vfiprintf_r+0x78>
 800648a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800648c:	07dc      	lsls	r4, r3, #31
 800648e:	d50e      	bpl.n	80064ae <_vfiprintf_r+0x6a>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	b01d      	add	sp, #116	; 0x74
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	4b7b      	ldr	r3, [pc, #492]	; (8006688 <_vfiprintf_r+0x244>)
 800649c:	429d      	cmp	r5, r3
 800649e:	d101      	bne.n	80064a4 <_vfiprintf_r+0x60>
 80064a0:	68b5      	ldr	r5, [r6, #8]
 80064a2:	e7df      	b.n	8006464 <_vfiprintf_r+0x20>
 80064a4:	4b79      	ldr	r3, [pc, #484]	; (800668c <_vfiprintf_r+0x248>)
 80064a6:	429d      	cmp	r5, r3
 80064a8:	bf08      	it	eq
 80064aa:	68f5      	ldreq	r5, [r6, #12]
 80064ac:	e7da      	b.n	8006464 <_vfiprintf_r+0x20>
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	0598      	lsls	r0, r3, #22
 80064b2:	d4ed      	bmi.n	8006490 <_vfiprintf_r+0x4c>
 80064b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b6:	f000 fb80 	bl	8006bba <__retarget_lock_release_recursive>
 80064ba:	e7e9      	b.n	8006490 <_vfiprintf_r+0x4c>
 80064bc:	2300      	movs	r3, #0
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	2320      	movs	r3, #32
 80064c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c6:	2330      	movs	r3, #48	; 0x30
 80064c8:	f04f 0901 	mov.w	r9, #1
 80064cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80064d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006690 <_vfiprintf_r+0x24c>
 80064d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d8:	4623      	mov	r3, r4
 80064da:	469a      	mov	sl, r3
 80064dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e0:	b10a      	cbz	r2, 80064e6 <_vfiprintf_r+0xa2>
 80064e2:	2a25      	cmp	r2, #37	; 0x25
 80064e4:	d1f9      	bne.n	80064da <_vfiprintf_r+0x96>
 80064e6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ea:	d00b      	beq.n	8006504 <_vfiprintf_r+0xc0>
 80064ec:	465b      	mov	r3, fp
 80064ee:	4622      	mov	r2, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ff94 	bl	8006420 <__sfputs_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	f000 80aa 	beq.w	8006652 <_vfiprintf_r+0x20e>
 80064fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006500:	445a      	add	r2, fp
 8006502:	9209      	str	r2, [sp, #36]	; 0x24
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a2 	beq.w	8006652 <_vfiprintf_r+0x20e>
 800650e:	2300      	movs	r3, #0
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006524:	931a      	str	r3, [sp, #104]	; 0x68
 8006526:	4654      	mov	r4, sl
 8006528:	2205      	movs	r2, #5
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4858      	ldr	r0, [pc, #352]	; (8006690 <_vfiprintf_r+0x24c>)
 8006530:	f7ff f8d0 	bl	80056d4 <memchr>
 8006534:	9a04      	ldr	r2, [sp, #16]
 8006536:	b9d8      	cbnz	r0, 8006570 <_vfiprintf_r+0x12c>
 8006538:	06d1      	lsls	r1, r2, #27
 800653a:	bf44      	itt	mi
 800653c:	2320      	movmi	r3, #32
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006542:	0713      	lsls	r3, r2, #28
 8006544:	bf44      	itt	mi
 8006546:	232b      	movmi	r3, #43	; 0x2b
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b2a      	cmp	r3, #42	; 0x2a
 8006552:	d015      	beq.n	8006580 <_vfiprintf_r+0x13c>
 8006554:	4654      	mov	r4, sl
 8006556:	2000      	movs	r0, #0
 8006558:	f04f 0c0a 	mov.w	ip, #10
 800655c:	9a07      	ldr	r2, [sp, #28]
 800655e:	4621      	mov	r1, r4
 8006560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006564:	3b30      	subs	r3, #48	; 0x30
 8006566:	2b09      	cmp	r3, #9
 8006568:	d94e      	bls.n	8006608 <_vfiprintf_r+0x1c4>
 800656a:	b1b0      	cbz	r0, 800659a <_vfiprintf_r+0x156>
 800656c:	9207      	str	r2, [sp, #28]
 800656e:	e014      	b.n	800659a <_vfiprintf_r+0x156>
 8006570:	eba0 0308 	sub.w	r3, r0, r8
 8006574:	fa09 f303 	lsl.w	r3, r9, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	46a2      	mov	sl, r4
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	e7d2      	b.n	8006526 <_vfiprintf_r+0xe2>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbb      	ittet	lt
 800658c:	425b      	neglt	r3, r3
 800658e:	f042 0202 	orrlt.w	r2, r2, #2
 8006592:	9307      	strge	r3, [sp, #28]
 8006594:	9307      	strlt	r3, [sp, #28]
 8006596:	bfb8      	it	lt
 8006598:	9204      	strlt	r2, [sp, #16]
 800659a:	7823      	ldrb	r3, [r4, #0]
 800659c:	2b2e      	cmp	r3, #46	; 0x2e
 800659e:	d10c      	bne.n	80065ba <_vfiprintf_r+0x176>
 80065a0:	7863      	ldrb	r3, [r4, #1]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d135      	bne.n	8006612 <_vfiprintf_r+0x1ce>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	3402      	adds	r4, #2
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	9203      	str	r2, [sp, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bfb8      	it	lt
 80065b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006694 <_vfiprintf_r+0x250>
 80065be:	2203      	movs	r2, #3
 80065c0:	4650      	mov	r0, sl
 80065c2:	7821      	ldrb	r1, [r4, #0]
 80065c4:	f7ff f886 	bl	80056d4 <memchr>
 80065c8:	b140      	cbz	r0, 80065dc <_vfiprintf_r+0x198>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	eba0 000a 	sub.w	r0, r0, sl
 80065d0:	fa03 f000 	lsl.w	r0, r3, r0
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	3401      	adds	r4, #1
 80065d8:	4303      	orrs	r3, r0
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	2206      	movs	r2, #6
 80065e2:	482d      	ldr	r0, [pc, #180]	; (8006698 <_vfiprintf_r+0x254>)
 80065e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e8:	f7ff f874 	bl	80056d4 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d03f      	beq.n	8006670 <_vfiprintf_r+0x22c>
 80065f0:	4b2a      	ldr	r3, [pc, #168]	; (800669c <_vfiprintf_r+0x258>)
 80065f2:	bb1b      	cbnz	r3, 800663c <_vfiprintf_r+0x1f8>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	3307      	adds	r3, #7
 80065f8:	f023 0307 	bic.w	r3, r3, #7
 80065fc:	3308      	adds	r3, #8
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	443b      	add	r3, r7
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	e767      	b.n	80064d8 <_vfiprintf_r+0x94>
 8006608:	460c      	mov	r4, r1
 800660a:	2001      	movs	r0, #1
 800660c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006610:	e7a5      	b.n	800655e <_vfiprintf_r+0x11a>
 8006612:	2300      	movs	r3, #0
 8006614:	f04f 0c0a 	mov.w	ip, #10
 8006618:	4619      	mov	r1, r3
 800661a:	3401      	adds	r4, #1
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	4620      	mov	r0, r4
 8006620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006624:	3a30      	subs	r2, #48	; 0x30
 8006626:	2a09      	cmp	r2, #9
 8006628:	d903      	bls.n	8006632 <_vfiprintf_r+0x1ee>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c5      	beq.n	80065ba <_vfiprintf_r+0x176>
 800662e:	9105      	str	r1, [sp, #20]
 8006630:	e7c3      	b.n	80065ba <_vfiprintf_r+0x176>
 8006632:	4604      	mov	r4, r0
 8006634:	2301      	movs	r3, #1
 8006636:	fb0c 2101 	mla	r1, ip, r1, r2
 800663a:	e7f0      	b.n	800661e <_vfiprintf_r+0x1da>
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4630      	mov	r0, r6
 8006644:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <_vfiprintf_r+0x25c>)
 8006646:	a904      	add	r1, sp, #16
 8006648:	f7fd fddc 	bl	8004204 <_printf_float>
 800664c:	4607      	mov	r7, r0
 800664e:	1c78      	adds	r0, r7, #1
 8006650:	d1d6      	bne.n	8006600 <_vfiprintf_r+0x1bc>
 8006652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d405      	bmi.n	8006664 <_vfiprintf_r+0x220>
 8006658:	89ab      	ldrh	r3, [r5, #12]
 800665a:	059a      	lsls	r2, r3, #22
 800665c:	d402      	bmi.n	8006664 <_vfiprintf_r+0x220>
 800665e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006660:	f000 faab 	bl	8006bba <__retarget_lock_release_recursive>
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	065b      	lsls	r3, r3, #25
 8006668:	f53f af12 	bmi.w	8006490 <_vfiprintf_r+0x4c>
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	e711      	b.n	8006494 <_vfiprintf_r+0x50>
 8006670:	ab03      	add	r3, sp, #12
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	462a      	mov	r2, r5
 8006676:	4630      	mov	r0, r6
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <_vfiprintf_r+0x25c>)
 800667a:	a904      	add	r1, sp, #16
 800667c:	f7fe f85e 	bl	800473c <_printf_i>
 8006680:	e7e4      	b.n	800664c <_vfiprintf_r+0x208>
 8006682:	bf00      	nop
 8006684:	080078b4 	.word	0x080078b4
 8006688:	080078d4 	.word	0x080078d4
 800668c:	08007894 	.word	0x08007894
 8006690:	0800773c 	.word	0x0800773c
 8006694:	08007742 	.word	0x08007742
 8006698:	08007746 	.word	0x08007746
 800669c:	08004205 	.word	0x08004205
 80066a0:	08006421 	.word	0x08006421

080066a4 <__swbuf_r>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	460e      	mov	r6, r1
 80066a8:	4614      	mov	r4, r2
 80066aa:	4605      	mov	r5, r0
 80066ac:	b118      	cbz	r0, 80066b6 <__swbuf_r+0x12>
 80066ae:	6983      	ldr	r3, [r0, #24]
 80066b0:	b90b      	cbnz	r3, 80066b6 <__swbuf_r+0x12>
 80066b2:	f000 f9e3 	bl	8006a7c <__sinit>
 80066b6:	4b21      	ldr	r3, [pc, #132]	; (800673c <__swbuf_r+0x98>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	d12b      	bne.n	8006714 <__swbuf_r+0x70>
 80066bc:	686c      	ldr	r4, [r5, #4]
 80066be:	69a3      	ldr	r3, [r4, #24]
 80066c0:	60a3      	str	r3, [r4, #8]
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	071a      	lsls	r2, r3, #28
 80066c6:	d52f      	bpl.n	8006728 <__swbuf_r+0x84>
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	b36b      	cbz	r3, 8006728 <__swbuf_r+0x84>
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	b2f6      	uxtb	r6, r6
 80066d2:	1ac0      	subs	r0, r0, r3
 80066d4:	6963      	ldr	r3, [r4, #20]
 80066d6:	4637      	mov	r7, r6
 80066d8:	4283      	cmp	r3, r0
 80066da:	dc04      	bgt.n	80066e6 <__swbuf_r+0x42>
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f938 	bl	8006954 <_fflush_r>
 80066e4:	bb30      	cbnz	r0, 8006734 <__swbuf_r+0x90>
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	3001      	adds	r0, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	701e      	strb	r6, [r3, #0]
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	4283      	cmp	r3, r0
 80066fa:	d004      	beq.n	8006706 <__swbuf_r+0x62>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d506      	bpl.n	8006710 <__swbuf_r+0x6c>
 8006702:	2e0a      	cmp	r6, #10
 8006704:	d104      	bne.n	8006710 <__swbuf_r+0x6c>
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f000 f923 	bl	8006954 <_fflush_r>
 800670e:	b988      	cbnz	r0, 8006734 <__swbuf_r+0x90>
 8006710:	4638      	mov	r0, r7
 8006712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <__swbuf_r+0x9c>)
 8006716:	429c      	cmp	r4, r3
 8006718:	d101      	bne.n	800671e <__swbuf_r+0x7a>
 800671a:	68ac      	ldr	r4, [r5, #8]
 800671c:	e7cf      	b.n	80066be <__swbuf_r+0x1a>
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <__swbuf_r+0xa0>)
 8006720:	429c      	cmp	r4, r3
 8006722:	bf08      	it	eq
 8006724:	68ec      	ldreq	r4, [r5, #12]
 8006726:	e7ca      	b.n	80066be <__swbuf_r+0x1a>
 8006728:	4621      	mov	r1, r4
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f81a 	bl	8006764 <__swsetup_r>
 8006730:	2800      	cmp	r0, #0
 8006732:	d0cb      	beq.n	80066cc <__swbuf_r+0x28>
 8006734:	f04f 37ff 	mov.w	r7, #4294967295
 8006738:	e7ea      	b.n	8006710 <__swbuf_r+0x6c>
 800673a:	bf00      	nop
 800673c:	080078b4 	.word	0x080078b4
 8006740:	080078d4 	.word	0x080078d4
 8006744:	08007894 	.word	0x08007894

08006748 <__ascii_wctomb>:
 8006748:	4603      	mov	r3, r0
 800674a:	4608      	mov	r0, r1
 800674c:	b141      	cbz	r1, 8006760 <__ascii_wctomb+0x18>
 800674e:	2aff      	cmp	r2, #255	; 0xff
 8006750:	d904      	bls.n	800675c <__ascii_wctomb+0x14>
 8006752:	228a      	movs	r2, #138	; 0x8a
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	4770      	bx	lr
 800675c:	2001      	movs	r0, #1
 800675e:	700a      	strb	r2, [r1, #0]
 8006760:	4770      	bx	lr
	...

08006764 <__swsetup_r>:
 8006764:	4b32      	ldr	r3, [pc, #200]	; (8006830 <__swsetup_r+0xcc>)
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	681d      	ldr	r5, [r3, #0]
 800676a:	4606      	mov	r6, r0
 800676c:	460c      	mov	r4, r1
 800676e:	b125      	cbz	r5, 800677a <__swsetup_r+0x16>
 8006770:	69ab      	ldr	r3, [r5, #24]
 8006772:	b913      	cbnz	r3, 800677a <__swsetup_r+0x16>
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f981 	bl	8006a7c <__sinit>
 800677a:	4b2e      	ldr	r3, [pc, #184]	; (8006834 <__swsetup_r+0xd0>)
 800677c:	429c      	cmp	r4, r3
 800677e:	d10f      	bne.n	80067a0 <__swsetup_r+0x3c>
 8006780:	686c      	ldr	r4, [r5, #4]
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006788:	0719      	lsls	r1, r3, #28
 800678a:	d42c      	bmi.n	80067e6 <__swsetup_r+0x82>
 800678c:	06dd      	lsls	r5, r3, #27
 800678e:	d411      	bmi.n	80067b4 <__swsetup_r+0x50>
 8006790:	2309      	movs	r3, #9
 8006792:	6033      	str	r3, [r6, #0]
 8006794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	e03e      	b.n	800681e <__swsetup_r+0xba>
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <__swsetup_r+0xd4>)
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d101      	bne.n	80067aa <__swsetup_r+0x46>
 80067a6:	68ac      	ldr	r4, [r5, #8]
 80067a8:	e7eb      	b.n	8006782 <__swsetup_r+0x1e>
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <__swsetup_r+0xd8>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	bf08      	it	eq
 80067b0:	68ec      	ldreq	r4, [r5, #12]
 80067b2:	e7e6      	b.n	8006782 <__swsetup_r+0x1e>
 80067b4:	0758      	lsls	r0, r3, #29
 80067b6:	d512      	bpl.n	80067de <__swsetup_r+0x7a>
 80067b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ba:	b141      	cbz	r1, 80067ce <__swsetup_r+0x6a>
 80067bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d002      	beq.n	80067ca <__swsetup_r+0x66>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff fb37 	bl	8005e38 <_free_r>
 80067ca:	2300      	movs	r3, #0
 80067cc:	6363      	str	r3, [r4, #52]	; 0x34
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f043 0308 	orr.w	r3, r3, #8
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	b94b      	cbnz	r3, 80067fe <__swsetup_r+0x9a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f4:	d003      	beq.n	80067fe <__swsetup_r+0x9a>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 fa05 	bl	8006c08 <__smakebuf_r>
 80067fe:	89a0      	ldrh	r0, [r4, #12]
 8006800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006804:	f010 0301 	ands.w	r3, r0, #1
 8006808:	d00a      	beq.n	8006820 <__swsetup_r+0xbc>
 800680a:	2300      	movs	r3, #0
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	6963      	ldr	r3, [r4, #20]
 8006810:	425b      	negs	r3, r3
 8006812:	61a3      	str	r3, [r4, #24]
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b943      	cbnz	r3, 800682a <__swsetup_r+0xc6>
 8006818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800681c:	d1ba      	bne.n	8006794 <__swsetup_r+0x30>
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	0781      	lsls	r1, r0, #30
 8006822:	bf58      	it	pl
 8006824:	6963      	ldrpl	r3, [r4, #20]
 8006826:	60a3      	str	r3, [r4, #8]
 8006828:	e7f4      	b.n	8006814 <__swsetup_r+0xb0>
 800682a:	2000      	movs	r0, #0
 800682c:	e7f7      	b.n	800681e <__swsetup_r+0xba>
 800682e:	bf00      	nop
 8006830:	2000000c 	.word	0x2000000c
 8006834:	080078b4 	.word	0x080078b4
 8006838:	080078d4 	.word	0x080078d4
 800683c:	08007894 	.word	0x08007894

08006840 <abort>:
 8006840:	2006      	movs	r0, #6
 8006842:	b508      	push	{r3, lr}
 8006844:	f000 fa50 	bl	8006ce8 <raise>
 8006848:	2001      	movs	r0, #1
 800684a:	f7fb f887 	bl	800195c <_exit>
	...

08006850 <__sflush_r>:
 8006850:	898a      	ldrh	r2, [r1, #12]
 8006852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006854:	4605      	mov	r5, r0
 8006856:	0710      	lsls	r0, r2, #28
 8006858:	460c      	mov	r4, r1
 800685a:	d457      	bmi.n	800690c <__sflush_r+0xbc>
 800685c:	684b      	ldr	r3, [r1, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	dc04      	bgt.n	800686c <__sflush_r+0x1c>
 8006862:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc01      	bgt.n	800686c <__sflush_r+0x1c>
 8006868:	2000      	movs	r0, #0
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800686e:	2e00      	cmp	r6, #0
 8006870:	d0fa      	beq.n	8006868 <__sflush_r+0x18>
 8006872:	2300      	movs	r3, #0
 8006874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006878:	682f      	ldr	r7, [r5, #0]
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	d032      	beq.n	80068e4 <__sflush_r+0x94>
 800687e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	075a      	lsls	r2, r3, #29
 8006884:	d505      	bpl.n	8006892 <__sflush_r+0x42>
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	1ac0      	subs	r0, r0, r3
 800688a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800688c:	b10b      	cbz	r3, 8006892 <__sflush_r+0x42>
 800688e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006890:	1ac0      	subs	r0, r0, r3
 8006892:	2300      	movs	r3, #0
 8006894:	4602      	mov	r2, r0
 8006896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006898:	4628      	mov	r0, r5
 800689a:	6a21      	ldr	r1, [r4, #32]
 800689c:	47b0      	blx	r6
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	d106      	bne.n	80068b2 <__sflush_r+0x62>
 80068a4:	6829      	ldr	r1, [r5, #0]
 80068a6:	291d      	cmp	r1, #29
 80068a8:	d82c      	bhi.n	8006904 <__sflush_r+0xb4>
 80068aa:	4a29      	ldr	r2, [pc, #164]	; (8006950 <__sflush_r+0x100>)
 80068ac:	40ca      	lsrs	r2, r1
 80068ae:	07d6      	lsls	r6, r2, #31
 80068b0:	d528      	bpl.n	8006904 <__sflush_r+0xb4>
 80068b2:	2200      	movs	r2, #0
 80068b4:	6062      	str	r2, [r4, #4]
 80068b6:	6922      	ldr	r2, [r4, #16]
 80068b8:	04d9      	lsls	r1, r3, #19
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	d504      	bpl.n	80068c8 <__sflush_r+0x78>
 80068be:	1c42      	adds	r2, r0, #1
 80068c0:	d101      	bne.n	80068c6 <__sflush_r+0x76>
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b903      	cbnz	r3, 80068c8 <__sflush_r+0x78>
 80068c6:	6560      	str	r0, [r4, #84]	; 0x54
 80068c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ca:	602f      	str	r7, [r5, #0]
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d0cb      	beq.n	8006868 <__sflush_r+0x18>
 80068d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068d4:	4299      	cmp	r1, r3
 80068d6:	d002      	beq.n	80068de <__sflush_r+0x8e>
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff faad 	bl	8005e38 <_free_r>
 80068de:	2000      	movs	r0, #0
 80068e0:	6360      	str	r0, [r4, #52]	; 0x34
 80068e2:	e7c2      	b.n	800686a <__sflush_r+0x1a>
 80068e4:	6a21      	ldr	r1, [r4, #32]
 80068e6:	2301      	movs	r3, #1
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b0      	blx	r6
 80068ec:	1c41      	adds	r1, r0, #1
 80068ee:	d1c7      	bne.n	8006880 <__sflush_r+0x30>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0c4      	beq.n	8006880 <__sflush_r+0x30>
 80068f6:	2b1d      	cmp	r3, #29
 80068f8:	d001      	beq.n	80068fe <__sflush_r+0xae>
 80068fa:	2b16      	cmp	r3, #22
 80068fc:	d101      	bne.n	8006902 <__sflush_r+0xb2>
 80068fe:	602f      	str	r7, [r5, #0]
 8006900:	e7b2      	b.n	8006868 <__sflush_r+0x18>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	e7ae      	b.n	800686a <__sflush_r+0x1a>
 800690c:	690f      	ldr	r7, [r1, #16]
 800690e:	2f00      	cmp	r7, #0
 8006910:	d0aa      	beq.n	8006868 <__sflush_r+0x18>
 8006912:	0793      	lsls	r3, r2, #30
 8006914:	bf18      	it	ne
 8006916:	2300      	movne	r3, #0
 8006918:	680e      	ldr	r6, [r1, #0]
 800691a:	bf08      	it	eq
 800691c:	694b      	ldreq	r3, [r1, #20]
 800691e:	1bf6      	subs	r6, r6, r7
 8006920:	600f      	str	r7, [r1, #0]
 8006922:	608b      	str	r3, [r1, #8]
 8006924:	2e00      	cmp	r6, #0
 8006926:	dd9f      	ble.n	8006868 <__sflush_r+0x18>
 8006928:	4633      	mov	r3, r6
 800692a:	463a      	mov	r2, r7
 800692c:	4628      	mov	r0, r5
 800692e:	6a21      	ldr	r1, [r4, #32]
 8006930:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006934:	47e0      	blx	ip
 8006936:	2800      	cmp	r0, #0
 8006938:	dc06      	bgt.n	8006948 <__sflush_r+0xf8>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	e790      	b.n	800686a <__sflush_r+0x1a>
 8006948:	4407      	add	r7, r0
 800694a:	1a36      	subs	r6, r6, r0
 800694c:	e7ea      	b.n	8006924 <__sflush_r+0xd4>
 800694e:	bf00      	nop
 8006950:	20400001 	.word	0x20400001

08006954 <_fflush_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	4605      	mov	r5, r0
 800695a:	460c      	mov	r4, r1
 800695c:	b913      	cbnz	r3, 8006964 <_fflush_r+0x10>
 800695e:	2500      	movs	r5, #0
 8006960:	4628      	mov	r0, r5
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	b118      	cbz	r0, 800696e <_fflush_r+0x1a>
 8006966:	6983      	ldr	r3, [r0, #24]
 8006968:	b90b      	cbnz	r3, 800696e <_fflush_r+0x1a>
 800696a:	f000 f887 	bl	8006a7c <__sinit>
 800696e:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <_fflush_r+0x6c>)
 8006970:	429c      	cmp	r4, r3
 8006972:	d11b      	bne.n	80069ac <_fflush_r+0x58>
 8006974:	686c      	ldr	r4, [r5, #4]
 8006976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0ef      	beq.n	800695e <_fflush_r+0xa>
 800697e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006980:	07d0      	lsls	r0, r2, #31
 8006982:	d404      	bmi.n	800698e <_fflush_r+0x3a>
 8006984:	0599      	lsls	r1, r3, #22
 8006986:	d402      	bmi.n	800698e <_fflush_r+0x3a>
 8006988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800698a:	f000 f915 	bl	8006bb8 <__retarget_lock_acquire_recursive>
 800698e:	4628      	mov	r0, r5
 8006990:	4621      	mov	r1, r4
 8006992:	f7ff ff5d 	bl	8006850 <__sflush_r>
 8006996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006998:	4605      	mov	r5, r0
 800699a:	07da      	lsls	r2, r3, #31
 800699c:	d4e0      	bmi.n	8006960 <_fflush_r+0xc>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	059b      	lsls	r3, r3, #22
 80069a2:	d4dd      	bmi.n	8006960 <_fflush_r+0xc>
 80069a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069a6:	f000 f908 	bl	8006bba <__retarget_lock_release_recursive>
 80069aa:	e7d9      	b.n	8006960 <_fflush_r+0xc>
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <_fflush_r+0x70>)
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d101      	bne.n	80069b6 <_fflush_r+0x62>
 80069b2:	68ac      	ldr	r4, [r5, #8]
 80069b4:	e7df      	b.n	8006976 <_fflush_r+0x22>
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <_fflush_r+0x74>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	bf08      	it	eq
 80069bc:	68ec      	ldreq	r4, [r5, #12]
 80069be:	e7da      	b.n	8006976 <_fflush_r+0x22>
 80069c0:	080078b4 	.word	0x080078b4
 80069c4:	080078d4 	.word	0x080078d4
 80069c8:	08007894 	.word	0x08007894

080069cc <std>:
 80069cc:	2300      	movs	r3, #0
 80069ce:	b510      	push	{r4, lr}
 80069d0:	4604      	mov	r4, r0
 80069d2:	e9c0 3300 	strd	r3, r3, [r0]
 80069d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069da:	6083      	str	r3, [r0, #8]
 80069dc:	8181      	strh	r1, [r0, #12]
 80069de:	6643      	str	r3, [r0, #100]	; 0x64
 80069e0:	81c2      	strh	r2, [r0, #14]
 80069e2:	6183      	str	r3, [r0, #24]
 80069e4:	4619      	mov	r1, r3
 80069e6:	2208      	movs	r2, #8
 80069e8:	305c      	adds	r0, #92	; 0x5c
 80069ea:	f7fd fb65 	bl	80040b8 <memset>
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <std+0x38>)
 80069f0:	6224      	str	r4, [r4, #32]
 80069f2:	6263      	str	r3, [r4, #36]	; 0x24
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <std+0x3c>)
 80069f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80069f8:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <std+0x40>)
 80069fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <std+0x44>)
 80069fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	bf00      	nop
 8006a04:	08006d21 	.word	0x08006d21
 8006a08:	08006d43 	.word	0x08006d43
 8006a0c:	08006d7b 	.word	0x08006d7b
 8006a10:	08006d9f 	.word	0x08006d9f

08006a14 <_cleanup_r>:
 8006a14:	4901      	ldr	r1, [pc, #4]	; (8006a1c <_cleanup_r+0x8>)
 8006a16:	f000 b8af 	b.w	8006b78 <_fwalk_reent>
 8006a1a:	bf00      	nop
 8006a1c:	08006955 	.word	0x08006955

08006a20 <__sfmoreglue>:
 8006a20:	2268      	movs	r2, #104	; 0x68
 8006a22:	b570      	push	{r4, r5, r6, lr}
 8006a24:	1e4d      	subs	r5, r1, #1
 8006a26:	4355      	muls	r5, r2
 8006a28:	460e      	mov	r6, r1
 8006a2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a2e:	f7ff fa6b 	bl	8005f08 <_malloc_r>
 8006a32:	4604      	mov	r4, r0
 8006a34:	b140      	cbz	r0, 8006a48 <__sfmoreglue+0x28>
 8006a36:	2100      	movs	r1, #0
 8006a38:	e9c0 1600 	strd	r1, r6, [r0]
 8006a3c:	300c      	adds	r0, #12
 8006a3e:	60a0      	str	r0, [r4, #8]
 8006a40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a44:	f7fd fb38 	bl	80040b8 <memset>
 8006a48:	4620      	mov	r0, r4
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}

08006a4c <__sfp_lock_acquire>:
 8006a4c:	4801      	ldr	r0, [pc, #4]	; (8006a54 <__sfp_lock_acquire+0x8>)
 8006a4e:	f000 b8b3 	b.w	8006bb8 <__retarget_lock_acquire_recursive>
 8006a52:	bf00      	nop
 8006a54:	200002fd 	.word	0x200002fd

08006a58 <__sfp_lock_release>:
 8006a58:	4801      	ldr	r0, [pc, #4]	; (8006a60 <__sfp_lock_release+0x8>)
 8006a5a:	f000 b8ae 	b.w	8006bba <__retarget_lock_release_recursive>
 8006a5e:	bf00      	nop
 8006a60:	200002fd 	.word	0x200002fd

08006a64 <__sinit_lock_acquire>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__sinit_lock_acquire+0x8>)
 8006a66:	f000 b8a7 	b.w	8006bb8 <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	200002fe 	.word	0x200002fe

08006a70 <__sinit_lock_release>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__sinit_lock_release+0x8>)
 8006a72:	f000 b8a2 	b.w	8006bba <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	200002fe 	.word	0x200002fe

08006a7c <__sinit>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	4604      	mov	r4, r0
 8006a80:	f7ff fff0 	bl	8006a64 <__sinit_lock_acquire>
 8006a84:	69a3      	ldr	r3, [r4, #24]
 8006a86:	b11b      	cbz	r3, 8006a90 <__sinit+0x14>
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f7ff bff0 	b.w	8006a70 <__sinit_lock_release>
 8006a90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a94:	6523      	str	r3, [r4, #80]	; 0x50
 8006a96:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <__sinit+0x68>)
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <__sinit+0x6c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	bf08      	it	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	bf08      	it	eq
 8006aa8:	61a3      	streq	r3, [r4, #24]
 8006aaa:	f000 f81f 	bl	8006aec <__sfp>
 8006aae:	6060      	str	r0, [r4, #4]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 f81b 	bl	8006aec <__sfp>
 8006ab6:	60a0      	str	r0, [r4, #8]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 f817 	bl	8006aec <__sfp>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	60e0      	str	r0, [r4, #12]
 8006ac4:	6860      	ldr	r0, [r4, #4]
 8006ac6:	f7ff ff81 	bl	80069cc <std>
 8006aca:	2201      	movs	r2, #1
 8006acc:	2109      	movs	r1, #9
 8006ace:	68a0      	ldr	r0, [r4, #8]
 8006ad0:	f7ff ff7c 	bl	80069cc <std>
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	2112      	movs	r1, #18
 8006ad8:	68e0      	ldr	r0, [r4, #12]
 8006ada:	f7ff ff77 	bl	80069cc <std>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	61a3      	str	r3, [r4, #24]
 8006ae2:	e7d1      	b.n	8006a88 <__sinit+0xc>
 8006ae4:	08007518 	.word	0x08007518
 8006ae8:	08006a15 	.word	0x08006a15

08006aec <__sfp>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	4607      	mov	r7, r0
 8006af0:	f7ff ffac 	bl	8006a4c <__sfp_lock_acquire>
 8006af4:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <__sfp+0x84>)
 8006af6:	681e      	ldr	r6, [r3, #0]
 8006af8:	69b3      	ldr	r3, [r6, #24]
 8006afa:	b913      	cbnz	r3, 8006b02 <__sfp+0x16>
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff ffbd 	bl	8006a7c <__sinit>
 8006b02:	3648      	adds	r6, #72	; 0x48
 8006b04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	d503      	bpl.n	8006b14 <__sfp+0x28>
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	b30b      	cbz	r3, 8006b54 <__sfp+0x68>
 8006b10:	6836      	ldr	r6, [r6, #0]
 8006b12:	e7f7      	b.n	8006b04 <__sfp+0x18>
 8006b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b18:	b9d5      	cbnz	r5, 8006b50 <__sfp+0x64>
 8006b1a:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <__sfp+0x88>)
 8006b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b20:	60e3      	str	r3, [r4, #12]
 8006b22:	6665      	str	r5, [r4, #100]	; 0x64
 8006b24:	f000 f847 	bl	8006bb6 <__retarget_lock_init_recursive>
 8006b28:	f7ff ff96 	bl	8006a58 <__sfp_lock_release>
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	4629      	mov	r1, r5
 8006b30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b38:	6025      	str	r5, [r4, #0]
 8006b3a:	61a5      	str	r5, [r4, #24]
 8006b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b40:	f7fd faba 	bl	80040b8 <memset>
 8006b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b50:	3468      	adds	r4, #104	; 0x68
 8006b52:	e7d9      	b.n	8006b08 <__sfp+0x1c>
 8006b54:	2104      	movs	r1, #4
 8006b56:	4638      	mov	r0, r7
 8006b58:	f7ff ff62 	bl	8006a20 <__sfmoreglue>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	6030      	str	r0, [r6, #0]
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d1d5      	bne.n	8006b10 <__sfp+0x24>
 8006b64:	f7ff ff78 	bl	8006a58 <__sfp_lock_release>
 8006b68:	230c      	movs	r3, #12
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	e7ee      	b.n	8006b4c <__sfp+0x60>
 8006b6e:	bf00      	nop
 8006b70:	08007518 	.word	0x08007518
 8006b74:	ffff0001 	.word	0xffff0001

08006b78 <_fwalk_reent>:
 8006b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	4688      	mov	r8, r1
 8006b80:	2700      	movs	r7, #0
 8006b82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b8e:	d505      	bpl.n	8006b9c <_fwalk_reent+0x24>
 8006b90:	6824      	ldr	r4, [r4, #0]
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	d1f7      	bne.n	8006b86 <_fwalk_reent+0xe>
 8006b96:	4638      	mov	r0, r7
 8006b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9c:	89ab      	ldrh	r3, [r5, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d907      	bls.n	8006bb2 <_fwalk_reent+0x3a>
 8006ba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	d003      	beq.n	8006bb2 <_fwalk_reent+0x3a>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4630      	mov	r0, r6
 8006bae:	47c0      	blx	r8
 8006bb0:	4307      	orrs	r7, r0
 8006bb2:	3568      	adds	r5, #104	; 0x68
 8006bb4:	e7e9      	b.n	8006b8a <_fwalk_reent+0x12>

08006bb6 <__retarget_lock_init_recursive>:
 8006bb6:	4770      	bx	lr

08006bb8 <__retarget_lock_acquire_recursive>:
 8006bb8:	4770      	bx	lr

08006bba <__retarget_lock_release_recursive>:
 8006bba:	4770      	bx	lr

08006bbc <__swhatbuf_r>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	460e      	mov	r6, r1
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	461d      	mov	r5, r3
 8006bca:	b096      	sub	sp, #88	; 0x58
 8006bcc:	da08      	bge.n	8006be0 <__swhatbuf_r+0x24>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	061a      	lsls	r2, r3, #24
 8006bd8:	d410      	bmi.n	8006bfc <__swhatbuf_r+0x40>
 8006bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bde:	e00e      	b.n	8006bfe <__swhatbuf_r+0x42>
 8006be0:	466a      	mov	r2, sp
 8006be2:	f000 f903 	bl	8006dec <_fstat_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dbf1      	blt.n	8006bce <__swhatbuf_r+0x12>
 8006bea:	9a01      	ldr	r2, [sp, #4]
 8006bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bf4:	425a      	negs	r2, r3
 8006bf6:	415a      	adcs	r2, r3
 8006bf8:	602a      	str	r2, [r5, #0]
 8006bfa:	e7ee      	b.n	8006bda <__swhatbuf_r+0x1e>
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	2000      	movs	r0, #0
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	b016      	add	sp, #88	; 0x58
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c08 <__smakebuf_r>:
 8006c08:	898b      	ldrh	r3, [r1, #12]
 8006c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c0c:	079d      	lsls	r5, r3, #30
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	d507      	bpl.n	8006c24 <__smakebuf_r+0x1c>
 8006c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	6163      	str	r3, [r4, #20]
 8006c20:	b002      	add	sp, #8
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	466a      	mov	r2, sp
 8006c26:	ab01      	add	r3, sp, #4
 8006c28:	f7ff ffc8 	bl	8006bbc <__swhatbuf_r>
 8006c2c:	9900      	ldr	r1, [sp, #0]
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff f969 	bl	8005f08 <_malloc_r>
 8006c36:	b948      	cbnz	r0, 8006c4c <__smakebuf_r+0x44>
 8006c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3c:	059a      	lsls	r2, r3, #22
 8006c3e:	d4ef      	bmi.n	8006c20 <__smakebuf_r+0x18>
 8006c40:	f023 0303 	bic.w	r3, r3, #3
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	e7e3      	b.n	8006c14 <__smakebuf_r+0xc>
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <__smakebuf_r+0x7c>)
 8006c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	6020      	str	r0, [r4, #0]
 8006c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	9b00      	ldr	r3, [sp, #0]
 8006c5c:	6120      	str	r0, [r4, #16]
 8006c5e:	6163      	str	r3, [r4, #20]
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	b15b      	cbz	r3, 8006c7c <__smakebuf_r+0x74>
 8006c64:	4630      	mov	r0, r6
 8006c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6a:	f000 f8d1 	bl	8006e10 <_isatty_r>
 8006c6e:	b128      	cbz	r0, 8006c7c <__smakebuf_r+0x74>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	89a0      	ldrh	r0, [r4, #12]
 8006c7e:	4305      	orrs	r5, r0
 8006c80:	81a5      	strh	r5, [r4, #12]
 8006c82:	e7cd      	b.n	8006c20 <__smakebuf_r+0x18>
 8006c84:	08006a15 	.word	0x08006a15

08006c88 <_malloc_usable_size_r>:
 8006c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8c:	1f18      	subs	r0, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfbc      	itt	lt
 8006c92:	580b      	ldrlt	r3, [r1, r0]
 8006c94:	18c0      	addlt	r0, r0, r3
 8006c96:	4770      	bx	lr

08006c98 <_raise_r>:
 8006c98:	291f      	cmp	r1, #31
 8006c9a:	b538      	push	{r3, r4, r5, lr}
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	d904      	bls.n	8006cac <_raise_r+0x14>
 8006ca2:	2316      	movs	r3, #22
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cae:	b112      	cbz	r2, 8006cb6 <_raise_r+0x1e>
 8006cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cb4:	b94b      	cbnz	r3, 8006cca <_raise_r+0x32>
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f830 	bl	8006d1c <_getpid_r>
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc6:	f000 b817 	b.w	8006cf8 <_kill_r>
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d00a      	beq.n	8006ce4 <_raise_r+0x4c>
 8006cce:	1c59      	adds	r1, r3, #1
 8006cd0:	d103      	bne.n	8006cda <_raise_r+0x42>
 8006cd2:	2316      	movs	r3, #22
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7e7      	b.n	8006caa <_raise_r+0x12>
 8006cda:	2400      	movs	r4, #0
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ce2:	4798      	blx	r3
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e7e0      	b.n	8006caa <_raise_r+0x12>

08006ce8 <raise>:
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <raise+0xc>)
 8006cea:	4601      	mov	r1, r0
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	f7ff bfd3 	b.w	8006c98 <_raise_r>
 8006cf2:	bf00      	nop
 8006cf4:	2000000c 	.word	0x2000000c

08006cf8 <_kill_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4d06      	ldr	r5, [pc, #24]	; (8006d18 <_kill_r+0x20>)
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	f7fa fe19 	bl	800193c <_kill>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d102      	bne.n	8006d14 <_kill_r+0x1c>
 8006d0e:	682b      	ldr	r3, [r5, #0]
 8006d10:	b103      	cbz	r3, 8006d14 <_kill_r+0x1c>
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	bd38      	pop	{r3, r4, r5, pc}
 8006d16:	bf00      	nop
 8006d18:	200002f8 	.word	0x200002f8

08006d1c <_getpid_r>:
 8006d1c:	f7fa be07 	b.w	800192e <_getpid>

08006d20 <__sread>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	460c      	mov	r4, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	f000 f894 	bl	8006e54 <_read_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	bfab      	itete	ge
 8006d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d32:	89a3      	ldrhlt	r3, [r4, #12]
 8006d34:	181b      	addge	r3, r3, r0
 8006d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d3a:	bfac      	ite	ge
 8006d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d3e:	81a3      	strhlt	r3, [r4, #12]
 8006d40:	bd10      	pop	{r4, pc}

08006d42 <__swrite>:
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	461f      	mov	r7, r3
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	05db      	lsls	r3, r3, #23
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4616      	mov	r6, r2
 8006d52:	d505      	bpl.n	8006d60 <__swrite+0x1e>
 8006d54:	2302      	movs	r3, #2
 8006d56:	2200      	movs	r2, #0
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	f000 f868 	bl	8006e30 <_lseek_r>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	4632      	mov	r2, r6
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d76:	f000 b817 	b.w	8006da8 <_write_r>

08006d7a <__sseek>:
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 f855 	bl	8006e30 <_lseek_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	bf15      	itete	ne
 8006d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d96:	81a3      	strheq	r3, [r4, #12]
 8006d98:	bf18      	it	ne
 8006d9a:	81a3      	strhne	r3, [r4, #12]
 8006d9c:	bd10      	pop	{r4, pc}

08006d9e <__sclose>:
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 b813 	b.w	8006dcc <_close_r>
	...

08006da8 <_write_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	2200      	movs	r2, #0
 8006db2:	4d05      	ldr	r5, [pc, #20]	; (8006dc8 <_write_r+0x20>)
 8006db4:	602a      	str	r2, [r5, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f7fa fdf7 	bl	80019aa <_write>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_write_r+0x1e>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_write_r+0x1e>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200002f8 	.word	0x200002f8

08006dcc <_close_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4d05      	ldr	r5, [pc, #20]	; (8006de8 <_close_r+0x1c>)
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7fa fe03 	bl	80019e2 <_close>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_close_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_close_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200002f8 	.word	0x200002f8

08006dec <_fstat_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	2300      	movs	r3, #0
 8006df0:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_fstat_r+0x20>)
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f7fa fdfd 	bl	80019f8 <_fstat>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d102      	bne.n	8006e08 <_fstat_r+0x1c>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	b103      	cbz	r3, 8006e08 <_fstat_r+0x1c>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200002f8 	.word	0x200002f8

08006e10 <_isatty_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	2300      	movs	r3, #0
 8006e14:	4d05      	ldr	r5, [pc, #20]	; (8006e2c <_isatty_r+0x1c>)
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f7fa fdfb 	bl	8001a16 <_isatty>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_isatty_r+0x1a>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_isatty_r+0x1a>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	200002f8 	.word	0x200002f8

08006e30 <_lseek_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4d05      	ldr	r5, [pc, #20]	; (8006e50 <_lseek_r+0x20>)
 8006e3c:	602a      	str	r2, [r5, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f7fa fdf3 	bl	8001a2a <_lseek>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_lseek_r+0x1e>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_lseek_r+0x1e>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	200002f8 	.word	0x200002f8

08006e54 <_read_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4d05      	ldr	r5, [pc, #20]	; (8006e74 <_read_r+0x20>)
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f7fa fd84 	bl	8001970 <_read>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_read_r+0x1e>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_read_r+0x1e>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	200002f8 	.word	0x200002f8

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
